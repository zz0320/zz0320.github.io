<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「环境配置」使用Conda配置mmdetction环境</title>
      <link href="/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8Dmmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8Dmmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章「<a href="https://mmdetection.readthedocs.io/zh_CN/v2.22.0/get_started.html#id2"><strong>mmdet文档</strong></a>」「**<a href="https://pytorch.org/get-started/locally/">Pytorch官网</a>**」</p><h2 id="Conda激活环境"><a href="#Conda激活环境" class="headerlink" title="Conda激活环境"></a>Conda激活环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py39_torch112 python=3.9</span><br><span class="line">conda activate py39_torch112  </span><br></pre></td></tr></table></figure><h2 id="使用pip-下载Pytorch"><a href="#使用pip-下载Pytorch" class="headerlink" title="使用pip 下载Pytorch"></a>使用pip 下载Pytorch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu</span><br><span class="line"></span><br><span class="line">pip3 install torch torchvision torchaudio</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装mmcv-full-x3D-x3D-1-4-5"><a href="#安装mmcv-full-x3D-x3D-1-4-5" class="headerlink" title="安装mmcv-full &#x3D;&#x3D; 1.4.5"></a>安装mmcv-full &#x3D;&#x3D; 1.4.5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv-full==1.4.5</span><br></pre></td></tr></table></figure><h2 id="Conda-安装onnx和onnxruntime"><a href="#Conda-安装onnx和onnxruntime" class="headerlink" title="Conda 安装onnx和onnxruntime"></a>Conda 安装onnx和onnxruntime</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install onnx onnxruntime</span><br></pre></td></tr></table></figure><h2 id="安装依赖环境库"><a href="#安装依赖环境库" class="headerlink" title="安装依赖环境库"></a>安装依赖环境库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="之后-python-setup-py-develp"><a href="#之后-python-setup-py-develp" class="headerlink" title="之后 python setup.py develp"></a>之后 python setup.py develp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「蝠鲼项目」（三）基于目标检测的水下蝠鲼相对距离测量</title>
      <link href="/2022/05/18/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8E%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9A%84%E6%B0%B4%E4%B8%8B%E8%9D%A0%E9%B2%BC%E7%9B%B8%E5%AF%B9%E8%B7%9D%E7%A6%BB%E6%B5%8B%E9%87%8F/"/>
      <url>/2022/05/18/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8E%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9A%84%E6%B0%B4%E4%B8%8B%E8%9D%A0%E9%B2%BC%E7%9B%B8%E5%AF%B9%E8%B7%9D%E7%A6%BB%E6%B5%8B%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><p>本项目采用的双目相机型号是HBV-1780-2 S2.0「<a href="https://m.tb.cn/h.fII4vQe?tk=F94b2kh7FI5">淘宝链接</a>」</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2a5t7ysxpj221y0u07jd.jpg" alt="" style="zoom: 25%;" /><p>标定采用张正友标定法在MATLAB上对相机进行初始标定，得到左右两个相机的<strong>内参</strong>、<strong>畸变参数</strong>、<strong>旋转矩阵</strong>和<strong>平移向量</strong>，并根据参数得到用于畸变矫正和视差图生成的参数「<strong>R1</strong>、 <strong>R2</strong>、 <strong>P1</strong>、 <strong>P2</strong>、 <strong>Q</strong>、 <strong>validPixROI1</strong>、 <strong>validPixROI2</strong>」以及<strong>经过畸变矫正后的成像图</strong></p><blockquote><p>张正友标定法操作简单，使用广泛「<a href="https://blog.csdn.net/weixin_45589062/article/details/104805368">参考链接</a>」</p></blockquote><p>实验使用棋盘格形式对双目相机进行标定，棋盘格边长为30mm</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2a5tax2bcj20rz0k0mxh.jpg" style="zoom: 50%;" /><p> 通过相机标定，得到的参数如下：</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : camera_configs.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 相机参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左相机内参</span></span><br><span class="line">left_camera_matrix = np.array([[<span class="number">707.824075446486</span>,<span class="number">1.07451655669836</span>,<span class="number">601.201405138026</span>],</span><br><span class="line">                                         [<span class="number">0</span>, <span class="number">705.881696325990</span>, <span class="number">330.217417382197</span>],</span><br><span class="line">                                         [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左相机畸变系数:[k1, k2, p1, p2, k3]</span></span><br><span class="line">left_distortion = np.array([[<span class="number">0.0893245604683052</span>, -<span class="number">0.126754168307066</span>, -<span class="number">0.00131656067296556</span>, -<span class="number">0.000315713692799473</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右相机内参</span></span><br><span class="line">right_camera_matrix = np.array([[<span class="number">711.585683187535</span>, <span class="number">0.901258032991587</span>, <span class="number">625.317084919039</span>],</span><br><span class="line">                                          [<span class="number">0</span>, <span class="number">709.262161181703</span>, <span class="number">354.966665955608</span>],</span><br><span class="line">                                            [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br><span class="line"><span class="comment"># 右相机畸变系数:[k1, k2, p1, p2, k3]</span></span><br><span class="line">right_distortion = np.array([[<span class="number">0.102141197750782</span>, -<span class="number">0.149625221344911</span>, -<span class="number">0.00103972763397189</span>, -<span class="number">0.000811782786473007</span>,  <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转矩阵</span></span><br><span class="line">R = np.array([[<span class="number">0.999991950633517</span>,-<span class="number">0.000304302438593610</span>, -<span class="number">0.00400075845303241</span>],</span><br><span class="line">                           [-<span class="number">0.000288013802500198</span>, <span class="number">0.999991670613285</span>, -<span class="number">0.00407133296364548</span>],</span><br><span class="line">                           [<span class="number">0.00400196404571726</span>, <span class="number">0.00407014791833944</span>, <span class="number">0.999983708957151</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平移向量</span></span><br><span class="line">T = np.array([[-<span class="number">62.7132373122585</span>], [-<span class="number">0.0418754846950936</span>], [<span class="number">0.392862452856694</span>]])</span><br><span class="line"></span><br><span class="line">size = (<span class="number">1280</span>, <span class="number">720</span>)</span><br><span class="line"></span><br><span class="line">R1, R2, P1, P2, Q, validPixROI1, validPixROI2 = cv2.stereoRectify(left_camera_matrix, left_distortion,</span><br><span class="line">                                                                  right_camera_matrix, right_distortion,size, R,T)</span><br><span class="line"></span><br><span class="line">left_map1, left_map2 = cv2.initUndistortRectifyMap(left_camera_matrix, left_distortion, R1, P1, size, cv2.CV_16SC2)</span><br><span class="line">right_map1, right_map2 = cv2.initUndistortRectifyMap(right_camera_matrix, right_distortion, R2, P2, size, cv2.CV_16SC2)</span><br></pre></td></tr></table></figure><h2 id="获取视差图"><a href="#获取视差图" class="headerlink" title="获取视差图"></a>获取视差图</h2><p>使用半全局双目立体匹配方法<strong>SGBM</strong>传入左右图像，生成双目视差图</p><p>SGBM介绍及各参数调节方法参考「<a href="https://blog.csdn.net/yegeli/article/details/119775171?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165259432616782350910937%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165259432616782350910937&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-119775171-null-null.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=SGBM&spm=1018.2226.3001.4187">链接</a>」</p><p>SGBM参数调节可视化视频</p><iframe src="//player.bilibili.com/player.html?aid=586500850&bvid=BV1Sz4y1m7BW&cid=293120556&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>参数部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SGBM</span></span><br><span class="line"> blockSize = <span class="number">7</span> <span class="comment"># 分层</span></span><br><span class="line"> img_channels = <span class="number">3</span></span><br><span class="line"> paraml = &#123;<span class="string">&#x27;minDisparity&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="string">&#x27;numDisparities&#x27;</span>: <span class="number">64</span>,  <span class="comment"># 64</span></span><br><span class="line">           <span class="string">&#x27;blockSize&#x27;</span>: blockSize,</span><br><span class="line">           <span class="string">&#x27;P1&#x27;</span>: <span class="number">8</span> * img_channels * blockSize ** <span class="number">2</span>,</span><br><span class="line">           <span class="string">&#x27;P2&#x27;</span>: <span class="number">32</span> * img_channels * blockSize ** <span class="number">2</span>,</span><br><span class="line">           <span class="string">&#x27;disp12MaxDiff&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="string">&#x27;preFilterCap&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">           <span class="string">&#x27;uniquenessRatio&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">           <span class="string">&#x27;speckleWindowSize&#x27;</span>: <span class="number">800</span>,</span><br><span class="line">           <span class="string">&#x27;speckleRange&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="string">&#x27;mode&#x27;</span>: cv2.STEREO_SGBM_MODE_SGBM_3WAY</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h2 id="将目标检测的结果用于水下蝠鲼的相对距离测量"><a href="#将目标检测的结果用于水下蝠鲼的相对距离测量" class="headerlink" title="将目标检测的结果用于水下蝠鲼的相对距离测量"></a>将目标检测的结果用于水下蝠鲼的相对距离测量</h2><p>通过将YOLOX检测左侧相机的结果的坐标以参数形式传入目标检测网络中，在视差图上得到对应位置的视差值，通过相机标定参数计算后得到相对距离值和XYZ坐标，具体代码「尚未实现按比例采样」如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : main.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 相机主程序 打开后可以返回摄像头/双目数据集的视差图</span></span><br><span class="line"><span class="string">点击视差图可以获得值</span></span><br><span class="line"><span class="string">传入YOLO得到的坐标后 可返回距离和XYZ坐标</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> camera_config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">2560</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">720</span>)  <span class="comment">#打开并设置摄像头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onmouse_pick_points</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        threeD = param</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n像素坐标 x = %d, y = %d&#x27;</span> % (x, y))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;世界坐标xyz 是：&quot;</span>, threeD[y][x][<span class="number">0</span>]/ <span class="number">1000.0</span>, threeD[y][x][<span class="number">1</span>]/ <span class="number">1000.0</span>, threeD[y][x][<span class="number">2</span>]/ <span class="number">1000.0</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">        distance = math.sqrt( threeD[y][x][<span class="number">0</span>] **<span class="number">2</span> + threeD[y][x][<span class="number">1</span>] **<span class="number">2</span> + threeD[y][x][<span class="number">2</span>] **<span class="number">2</span> )</span><br><span class="line">        distance = distance / <span class="number">1000.0</span>  <span class="comment"># mm -&gt; m</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;距离是：&quot;</span>, distance, <span class="string">&quot;m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yolo_pick_points</span>(<span class="params">x, y,  param</span>):</span><br><span class="line">    threeD = param</span><br><span class="line">    distance = math.sqrt( threeD[y][x][<span class="number">0</span>] **<span class="number">2</span> + threeD[y][x][<span class="number">1</span>] **<span class="number">2</span> + threeD[y][x][<span class="number">2</span>] **<span class="number">2</span> )</span><br><span class="line">    distance = distance / <span class="number">1000.0</span>  <span class="comment"># mm -&gt; m</span></span><br><span class="line">    <span class="comment"># str = &quot;距离是：z = %4f m&quot; % (distance)</span></span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line">WIN_NAME = <span class="string">&#x27;Deep_disp&#x27;</span></span><br><span class="line">cv2.namedWindow(WIN_NAME,  cv2.WINDOW_AUTOSIZE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDepthMapWithQ</span>(<span class="params">disparityMap: np.ndarray, Q: np.ndarray</span>) -&gt; np.ndarray:</span><br><span class="line">  points_3d = cv2.reprojectImageTo3D(disparityMap, Q)</span><br><span class="line">  depthMap = points_3d[:, :, <span class="number">2</span>]</span><br><span class="line">  reset_index = np.where(np.logical_or(depthMap &lt; <span class="number">0.0</span>, depthMap &gt; <span class="number">65535.0</span>))</span><br><span class="line">  depthMap[reset_index] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> depthMap.astype(np.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  ret, frame = cap.read()</span><br><span class="line">  frame1 = frame[<span class="number">0</span>:<span class="number">720</span>, <span class="number">0</span>:<span class="number">1280</span>]</span><br><span class="line">  frame2 = frame[<span class="number">0</span>:<span class="number">720</span>, <span class="number">1280</span>:<span class="number">2560</span>]  <span class="comment">#割开双目图像</span></span><br><span class="line">  <span class="comment"># frame1 = cv2.imread(&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/双目数据集/test_7/left_1.jpg&#x27;)</span></span><br><span class="line">  <span class="comment"># frame2 = cv2.imread(&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/双目数据集/test_7/right_1.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># imgL = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)  # BM方法需要将BGR格式转换成灰度图片</span></span><br><span class="line">  <span class="comment"># imgR = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># cv2.remap 重映射，就是把一幅图像中某位置的像素放置到另一个图片指定位置的过程。</span></span><br><span class="line">  <span class="comment"># 依据MATLAB测量数据重建无畸变图片</span></span><br><span class="line">  <span class="comment"># img1_rectified = cv2.remap(imgL, camera_config.left_map1, camera_config.left_map2, cv2.INTER_LINEAR)</span></span><br><span class="line">  <span class="comment"># img2_rectified = cv2.remap(imgR, camera_config.right_map1, camera_config.right_map2, cv2.INTER_LINEAR)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># cv2.remap 重映射，就是把一幅图像中某位置的像素放置到另一个图片指定位置的过程。</span></span><br><span class="line">  imageL = cv2.remap(frame1, camera_config.left_map1, camera_config.left_map2, cv2.INTER_LINEAR)</span><br><span class="line">  imageR = cv2.remap(frame2, camera_config.right_map1, camera_config.right_map2, cv2.INTER_LINEAR)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># BM</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  numberOfDisparities = ((720 // 8) + 15) &amp; -16  # 720对应是分辨率的宽</span></span><br><span class="line"><span class="string">  stereo = cv2.StereoBM_create(numDisparities=numberOfDisparities, blockSize=15)  #立体匹配</span></span><br><span class="line"><span class="string">  stereo.setROI1(camera_config.validPixROI1)</span></span><br><span class="line"><span class="string">  stereo.setROI2(camera_config.validPixROI2)</span></span><br><span class="line"><span class="string">  stereo.setPreFilterCap(15)</span></span><br><span class="line"><span class="string">  stereo.setBlockSize(15)</span></span><br><span class="line"><span class="string">  stereo.setMinDisparity(0)</span></span><br><span class="line"><span class="string">  stereo.setNumDisparities(numberOfDisparities)</span></span><br><span class="line"><span class="string">  stereo.setTextureThreshold(1000)</span></span><br><span class="line"><span class="string">  stereo.setUniquenessRatio(15)</span></span><br><span class="line"><span class="string">  stereo.setSpeckleWindowSize(100)</span></span><br><span class="line"><span class="string">  stereo.setSpeckleRange(10)</span></span><br><span class="line"><span class="string">  stereo.setDisp12MaxDiff(1)</span></span><br><span class="line"><span class="string">  disparity = stereo.compute(img1_rectified, img2_rectified) # 计算视差</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># SGBM</span></span><br><span class="line">  blockSize = <span class="number">7</span> <span class="comment"># 分层</span></span><br><span class="line">  img_channels = <span class="number">3</span></span><br><span class="line">  paraml = &#123;<span class="string">&#x27;minDisparity&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;numDisparities&#x27;</span>: <span class="number">64</span>, </span><br><span class="line">            <span class="string">&#x27;blockSize&#x27;</span>: blockSize,</span><br><span class="line">            <span class="string">&#x27;P1&#x27;</span>: <span class="number">8</span> * img_channels * blockSize ** <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;P2&#x27;</span>: <span class="number">32</span> * img_channels * blockSize ** <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;disp12MaxDiff&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;preFilterCap&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&#x27;uniquenessRatio&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="string">&#x27;speckleWindowSize&#x27;</span>: <span class="number">800</span>,</span><br><span class="line">            <span class="string">&#x27;speckleRange&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span>: cv2.STEREO_SGBM_MODE_SGBM_3WAY</span><br><span class="line">            &#125;</span><br><span class="line">  stereo = cv2.StereoSGBM_create(**paraml)</span><br><span class="line">  paramr = paraml</span><br><span class="line">  paramr[<span class="string">&#x27;minDisparity&#x27;</span>] = -paraml[<span class="string">&#x27;numDisparities&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 计算视差图</span></span><br><span class="line">  size = (imageL.shape[<span class="number">1</span>], imageL.shape[<span class="number">0</span>])</span><br><span class="line">  disparity = stereo.compute(imageL, imageR)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 真实视差（因为SGBM算法得到的视差是×16的）</span></span><br><span class="line">  trueDisp = disparity.astype(np.float32) / <span class="number">16.</span></span><br><span class="line"></span><br><span class="line">  disp = cv2.normalize(trueDisp, trueDisp, alpha=<span class="number">0</span>, beta=<span class="number">255</span>, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)  <span class="comment">#归一化函数算法</span></span><br><span class="line">  threeD = cv2.reprojectImageTo3D(trueDisp, camera_config.Q, handleMissingValues=<span class="literal">True</span>)  <span class="comment">#计算三维坐标数据值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># threeD = threeD / 16</span></span><br><span class="line">  <span class="comment"># threeD[y][x] x:0~640; y:0~480;   !!!!!!!!!!</span></span><br><span class="line">  cv2.setMouseCallback(WIN_NAME, onmouse_pick_points, threeD)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># yolo数据接口</span></span><br><span class="line">  pre_yolo_param = [<span class="number">6.00838623e+02</span>, <span class="number">1.92618637e+02</span>, <span class="number">1.24441724e+03</span>, <span class="number">4.02592468e+02</span> ]</span><br><span class="line">  yolo_param = [(pre_yolo_param[<span class="number">0</span>] + pre_yolo_param[<span class="number">2</span>]) / <span class="number">2</span> , (pre_yolo_param[<span class="number">1</span>] + pre_yolo_param[<span class="number">3</span>]) / <span class="number">2</span>]</span><br><span class="line">  <span class="comment"># print(yolo_param)</span></span><br><span class="line">  res = yolo_pick_points(<span class="built_in">int</span>(yolo_param[<span class="number">0</span>]), <span class="built_in">int</span>(yolo_param[<span class="number">1</span>]), threeD)</span><br><span class="line">  <span class="comment"># print(res)</span></span><br><span class="line">  <span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 需要测距时打开</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  # 找框内的最小值</span></span><br><span class="line"><span class="string">  for i in range(int(yolo_param[0]) - 20, int(yolo_param[0]) + 20):</span></span><br><span class="line"><span class="string">      for j in range(int(yolo_param[1]) - 20, int(yolo_param[1]) + 20):</span></span><br><span class="line"><span class="string">          list.append((yolo_pick_points(i, j, threeD), i, j))</span></span><br><span class="line"><span class="string">  res = min(list)</span></span><br><span class="line"><span class="string">  print(&quot;-----------------------------------------------------------------------------&quot;)</span></span><br><span class="line"><span class="string">  print(&#x27;距离为：&#x27; + str(res[0]) + &#x27;m&#x27;)</span></span><br><span class="line"><span class="string">  print(&quot;世界坐标xyz 是：&quot;, threeD[res[2]][res[1]][0]/ 1000.0,&#x27;m&#x27;, threeD[res[2]][res[1]][1]/ 1000.0, &#x27;m&#x27;,</span></span><br><span class="line"><span class="string">                            threeD[res[2]][res[1]][2]/ 1000.0, &quot;m&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># print(yolo_pick_points( ))</span></span><br><span class="line">  cv2.imshow(<span class="string">&quot;left&quot;</span>, frame1)</span><br><span class="line">  cv2.imshow(<span class="string">&quot;right&quot;</span>, frame2)</span><br><span class="line">  cv2.imshow(WIN_NAME, disp)</span><br><span class="line">  <span class="comment"># cv2.imshow()</span></span><br><span class="line">  key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="实验与结果展示"><a href="#实验与结果展示" class="headerlink" title="实验与结果展示"></a>实验与结果展示</h2><h3 id="目标检测模型指标设定"><a href="#目标检测模型指标设定" class="headerlink" title="目标检测模型指标设定"></a>目标检测模型指标设定</h3><table><thead><tr><th>评价指标</th><th>评价指标含义</th></tr></thead><tbody><tr><td>正负样本分类损失</td><td>计算预测类别与真实正负样本标签类别之间的二值交叉熵损失</td></tr><tr><td>类别分类损失</td><td>计算预测类别与真实标签类别之间的one-hot向量二值交叉熵损失</td></tr><tr><td>预测中心点偏移损失</td><td>所有真实框中心点与预测中心点之间的偏移损失</td></tr><tr><td>边界框回归损失</td><td>所有真实框与预测框之间的IoU损失</td></tr><tr><td>总损失</td><td>四类损失的加权和</td></tr><tr><td>PR曲线</td><td>置信度变化条件下，Precision（精准率）和Recall（查全率）曲线。横轴是Recall，纵轴是Precision</td></tr><tr><td>mAP</td><td>各个类别下的平均精准率（PR曲线所围面积）</td></tr><tr><td>模型参数量</td><td>模型训练中需要训练的参数总数</td></tr><tr><td>FLOPs</td><td>浮点运算数（输入尺寸为1280*720*3）</td></tr></tbody></table><p>依据上述指标设定，在数据集上进行模型的训练实验，在训练过程中跟踪记录模型的分类损失、回归损失以及总损失。训练完成后在设定好的测试集上进行测试，得到mAP、PR曲线、模型参数量、FLOPs以及FPS评价指标值，用以判断训练结果的优劣。</p><h3 id="基于目标检测的水下蝠鲼相对距离测量指标"><a href="#基于目标检测的水下蝠鲼相对距离测量指标" class="headerlink" title="基于目标检测的水下蝠鲼相对距离测量指标"></a>基于目标检测的水下蝠鲼相对距离测量指标</h3><table><thead><tr><th>检测误差</th><th>误差量含义</th></tr></thead><tbody><tr><td>单次检测误差</td><td>单张照片的深度值和真值之间的误差</td></tr><tr><td>平均检测误差</td><td>十次距离测得误差的平均值</td></tr><tr><td>检出率</td><td>十次距离测量中目标的检出比例</td></tr><tr><td>全部检出率</td><td>全部距离测量中目标检出比例</td></tr></tbody></table><p>以两个蝠鲼样机为例进行双目测距实验，设定后方蝠鲼样机所在位置为起点，即0m处，将前方蝠鲼样机分别在与后方样机相对实际距离为1m、1.5m、2m、2.5m、3m、3.5m、4m、4.5m、5m处进行测量，在每个位置上分别进行10次距离测量，并计算单次检测误差、平均检测误差和检出率。</p><p>这里补充一份同时控制双目相机进行拍照的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : dual-camera-shot.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 用于双目相机拍照 保存到路径下</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">AUTO = <span class="literal">False</span>  <span class="comment"># 自动拍照，或手动按s键拍照</span></span><br><span class="line">INTERVAL = <span class="number">0.3</span>  <span class="comment"># 自动拍照间隔</span></span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;right&quot;</span>)</span><br><span class="line"><span class="comment"># camera = cv2.VideoCapture(0)</span></span><br><span class="line">camera1 = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">camera2 = cv2.VideoCapture(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置分辨率左右摄像机同一频率，同一设备ID；左右摄像机总分辨率2560x720；分割为两个1280x720</span></span><br><span class="line">camera1.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, <span class="number">1920</span>)</span><br><span class="line">camera1.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, <span class="number">1080</span>)</span><br><span class="line"></span><br><span class="line">camera2.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, <span class="number">1920</span>)</span><br><span class="line">camera2.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, <span class="number">1080</span>)</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">utc = time.time()</span><br><span class="line">folder = <span class="string">&quot;/Users/kenton/Desktop/mmdetection-master/get_distance/test_15/&quot;</span>  <span class="comment"># 拍照文件目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">pos, frame</span>):</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    path = folder + pos + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(counter) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">    cv2.imwrite(path, frame)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;snapshot saved into: &quot;</span> + path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame1 = camera1.read()</span><br><span class="line">    ret, frame2 = camera2.read()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ret:&quot;</span>, ret)</span><br><span class="line">    <span class="comment"># 裁剪坐标为[y0:y1, x0:x1]    HEIGHT * WIDTH</span></span><br><span class="line">    <span class="comment"># left_frame = frame[0:720, 0:1280]</span></span><br><span class="line">    <span class="comment"># right_frame = frame[0:720, 1280:2560]</span></span><br><span class="line">    left_frame = frame1</span><br><span class="line">    right_frame = frame2</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line"></span><br><span class="line">    now = time.time()</span><br><span class="line">    <span class="keyword">if</span> AUTO <span class="keyword">and</span> now - utc &gt;= INTERVAL:</span><br><span class="line">        shot(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">        shot(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        utc = now</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> key == <span class="built_in">ord</span>(<span class="string">&quot;s&quot;</span>):</span><br><span class="line">        shot(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">        shot(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">camera1.release()</span><br><span class="line">camera2.release()</span><br><span class="line">cv2.destroyWindow(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">cv2.destroyWindow(<span class="string">&quot;right&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a>实验结果及分析</h3><p>水下目标检测实验结果</p><table><thead><tr><th><strong>评价指标</strong></th><th><strong>检测结果</strong></th></tr></thead><tbody><tr><td>正负样本分类损失</td><td>0.2570</td></tr><tr><td>类别分类损失</td><td>0.3358</td></tr><tr><td>预测中心点偏移损失</td><td>0.4475</td></tr><tr><td>边界框回归损失</td><td>0.9698</td></tr><tr><td>总损失</td><td>2.0101</td></tr><tr><td>PR曲线</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2a58yvlfhj20c0080weo.jpg" style="zoom:50%;" /></td></tr><tr><td>mAP</td><td>0.714</td></tr><tr><td>模型参数量</td><td>54.15 M</td></tr><tr><td>FLOPs</td><td>194.18 GFLOPs</td></tr></tbody></table><p>基于目标检测的水下蝠鲼相对距离测量结果</p><table><thead><tr><th>距离</th><th>1m</th><th>1.5m</th><th>2m</th><th>2.5m</th><th>3m</th><th>3.5m</th><th>4m</th><th>4.5m</th><th>5m</th></tr></thead><tbody><tr><td>单次检测误差</td><td>0.2119</td><td>0.3919</td><td>0.084</td><td>0.3294</td><td>0.1358</td><td>0.0063</td><td>-0.4762</td><td>1.4641</td><td>1.2321</td></tr><tr><td></td><td>0.2845</td><td>0.1432</td><td>0.8389</td><td>0.3509</td><td>0.4284</td><td>未检出</td><td>未检出</td><td>0.5978</td><td>未检出</td></tr><tr><td></td><td>0.1635</td><td>0.4047</td><td>0.4785</td><td>0.2637</td><td>未检出</td><td>0.5924</td><td>0.5953</td><td>未检出</td><td>1.13</td></tr><tr><td></td><td>0.2584</td><td>0.2777</td><td>0.2752</td><td>0.8306</td><td>0.0189</td><td>0.2678</td><td>1.0265</td><td>1.7881</td><td>未检出</td></tr><tr><td></td><td>0.1671</td><td>0.2636</td><td>0.4253</td><td>0.0735</td><td>0.4163</td><td>0.6281</td><td>未检出</td><td>0.4489</td><td>未检出</td></tr><tr><td></td><td>0.2665</td><td>0.2149</td><td>0.1789</td><td>1.6491</td><td>0.2196</td><td>未检出</td><td>0.4268</td><td>未检出</td><td>未检出</td></tr><tr><td></td><td>0.1769</td><td>-0.5316</td><td>0.247</td><td>0.5766</td><td>0.4277</td><td>0.2397</td><td>未检出</td><td>0.5692</td><td>未检出</td></tr><tr><td></td><td>0.2532</td><td>0.2721</td><td>0.2175</td><td>0.6623</td><td>0.5673</td><td>0.8843</td><td>1.5433</td><td>未检出</td><td>未检出</td></tr><tr><td></td><td>0.1364</td><td>0.1035</td><td>0.1988</td><td>0.3699</td><td>0.7477</td><td>0.0265</td><td>未检出</td><td>0.3478</td><td>未检出</td></tr><tr><td></td><td>0.117</td><td>0.1479</td><td>0.188</td><td>0.168</td><td>0.6733</td><td>0.9697</td><td>1.0393</td><td>未检出</td><td>未检出</td></tr><tr><td>平均检测误差</td><td>0.2035</td><td>0.2751</td><td>0.31321</td><td>0.5274</td><td>0.4039</td><td>0.4518</td><td>0.8512</td><td>0.8693</td><td>1.1810</td></tr><tr><td>检出率</td><td>100%</td><td>100%</td><td>100%</td><td>100%</td><td>90%</td><td>80%</td><td>60%</td><td>50%</td><td>20%</td></tr><tr><td>全局检出率</td><td>77.78%</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>设定目标距离为<strong>2m</strong>时，得到水下蝠鲼目标的检测图，深度图及返回距离结果</p><table><thead><tr><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czpa01krj21f30u0af1.jpg"></th><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czpowydoj21et0u0n2x.jpg"></th></tr></thead><tbody><tr><td align="center">目标检测图</td><td align="center">视差图</td></tr></tbody></table><table><thead><tr><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czqy24z9j21z409c3zu.jpg"></th></tr></thead><tbody><tr><td align="center">结果</td></tr></tbody></table><p>设定目标距离为<strong>1m</strong>时，得到水下蝠鲼目标的检测图，深度图及返回距离结果</p><table><thead><tr><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czsxchrdj21hc0u0wj6.jpg"></th><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czt9p1a7j21ew0u0dmc.jpg"></th></tr></thead><tbody><tr><td align="center">目标检测图</td><td align="center">视差图</td></tr></tbody></table><table><thead><tr><th align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czsbyr35j21z409c75m.jpg"></th></tr></thead><tbody><tr><td align="center">结果</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面是整个水下蝠鲼目标检测「方位」与相对距离估计流程图</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2czmx7jw2j20u0236dm0.jpg" alt="" style="zoom:24%;" /><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>当前阶段水下相对距离测量视差搜索范围是在正负20像素范围内进行最小值计算，其中一个改进方向可以优化搜索范围选择，比如与目标检测框面积占总面积的比例挂钩进行设计</p><p>双目匹配仍在使用较久远方法进行，后续可以参考一些最新工作，比如<a href="https://arxiv.org/abs/2203.11483">基于自适应相关级联递归网络的实用双目匹配『CVPR2022』</a>设计全网络结构进行双目立体匹配</p><p>目前水下目标检测「方位」与距离测量在程序上和结构上仍然是分立的，后续在程序上可以进行整合封装，预留接口；在结构上可以引入全链路网络结构，使用统一损失函数同时训练方位和距离测量，实现端到端的深度神经网络结构</p><p>现阶段的网络模型基于Pytorch进行推理计算，实时性较低，后续实际部署于航行器时可以将Pytorch模型转成NVIDIA的TensorRT或者华为的MindSpore等实现推理加速</p><p>在功能实现方面，后续可以叠加DeepSort等目标跟踪算法「<a href="https://mmtracking.readthedocs.io/en/latest/">mmtracking</a>」实现稳定视觉跟踪，实现细粒度更高的鱼体关键点姿态估计「<a href="https://mmpose.readthedocs.io/en/latest/">mmpose</a>」，实现鱼体实例分割「<a href="https://mmsegmentation.readthedocs.io/en/latest/">mmsegmentation</a>」，甚至更进一步实现3D目标检测「<a href="https://mmdetection3d.readthedocs.io/en/latest/">mmdetection3D</a>」等</p><p>双目视觉方面，当前使用相机双目基线为6cm。项目后续需要进行动态调整，所使用的标定参数、双目匹配参数均需测量与调整，如何保证效果也是需要未来需要解决的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 蝠鲼项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「蝠鲼项目」（二）基于YOLOX和mmdetection的仿生蝠鲼目标检测</title>
      <link href="/2022/05/13/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8EYOLOX%E5%92%8Cmmdetection%E7%9A%84%E4%BB%BF%E7%94%9F%E8%9D%A0%E9%B2%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/05/13/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8EYOLOX%E5%92%8Cmmdetection%E7%9A%84%E4%BB%BF%E7%94%9F%E8%9D%A0%E9%B2%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="YOLOX模型介绍"><a href="#YOLOX模型介绍" class="headerlink" title="YOLOX模型介绍"></a>YOLOX模型介绍</h2><p>YOLOX: Exceeding YOLO Series in 2021「<a href="https://arxiv.org/abs/2107.08430">原文下载</a>」「<a href="https://github.com/Megvii-BaseDetection/YOLOX">代码</a>」</p><blockquote><p>本文基于「<a href="https://zhuanlan.zhihu.com/p/392221567">知乎</a>」进行部分改写</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=848754302&bvid=BV1DL4y1B7eU&cid=432093643&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><blockquote><p>👆这里B站up主「Bubbliiiing」的“手把手”教学视频</p></blockquote><h3 id="速度与检测效果"><a href="#速度与检测效果" class="headerlink" title="速度与检测效果"></a>速度与检测效果</h3><p>1、YOLOX-L「Base YOLOv5-L 区别在Backbone等」和YOLOv4-CSP、YOLOv5-L有差不多参数量的情况下，YOLOX-L在COCO上取得50.0%AP「<strong>比YOLOv5-L高出1.8%的AP</strong>」，且YOLOX-L在单张Tesla V100上能达到68.9FPS。</p><p>2、YOLOX-Tiny和YOLOX-Nano「只有0.91M参数量和1.08G FLOPs」比对应的YOLOv4-Tiny和NanoDet3分别高出10% AP和1.8% AP</p><p>3、在Streaming Perception Challenge 「Workshop on Autonomous Driving at CVPR 2021」只使用YOLOX-L模型取得<strong>第一名</strong>。</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h26x9t8fe6j20rp0bvwgb.jpg"></p><blockquote><p>速度与准确率权衡图和参数量准确率曲线图</p></blockquote><h3 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h3><h4 id="Decoupled-head「预测分支解耦」"><a href="#Decoupled-head「预测分支解耦」" class="headerlink" title="Decoupled head「预测分支解耦」"></a>Decoupled head「预测分支解耦」</h4><p>作者实验发现<strong>耦合检测头可能会损害性能</strong>。共有两点改进：</p><p>①将预测分支解耦极大的改善收敛速度。</p><p>②相比较于非解耦的端到端方式，解耦能带来4.2%AP提升。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h26xgjc5lwj20u10gcq5a.jpg"></p><blockquote><p>YOLOv3 head与Decoupled head结构图</p></blockquote><p>YOLOv3中，针对coco80类的检测任务，每一个Anchor会对应产生h*w*85维度的预测结果，其中<strong>cls「区分是前景背景」</strong>占用1个通道，<strong>reg「坐标」</strong>占用4个通道，<strong>obj「预测是80类中的哪一个类」</strong>占用80个通道</p><p>而YOLOX首先使用<strong>1x1卷积</strong>将原本不同channel数的特征图先统一到256「主要目的是降维」，然后使用<strong>两个平行分支</strong>，两个分别两个使用3x3卷积，同时regression分支里还添加了IoU分支<strong>「之前的cls」</strong></p><h4 id="强大的数据增强"><a href="#强大的数据增强" class="headerlink" title="强大的数据增强"></a>强大的数据增强</h4><p>添加<strong>Mosaic</strong>和<strong>MixUp</strong>，但在最后15epochs时关闭</p><p>MixUp用在目标检测中大概的方式是：两张图以一定的比例对rgb值进行混合，同时需要模型预测出原本两张图中所有的目标。目前MixUp在各大竞赛、各类目标检测中属于稳定提点的策略</p><p>作者颠覆性发现：<strong>使用强大的数据增强后，ImageNet预训练模型无益，所有后续模型都是随机初始化权重</strong></p><p>同时论文最后提到，在训练比较小的模型时候，例如YOLOX-S, YOLOX-Tiny,YOLOX-Nano网络，剔除mixup，弱化mosaic效果，表现要比使用好</p><h4 id="Anchor-free"><a href="#Anchor-free" class="headerlink" title="Anchor-free"></a>Anchor-free</h4><p>①使用anchor时，为了调优模型，需要对数据聚类分析，确定最优锚点，缺乏泛化性</p><p>②anchor机制增加了检测头复杂度，增加了每幅图像预测数量</p><blockquote><p>针对coco数据集，YOLOV3使用416x416图像推理， 会产生3x(13x13+26x26+52x52)x85&#x3D;5355个预测结果</p></blockquote><p>使用ancho-freer可以减少调整参数数量，减少涉及的使用技巧</p><p>从原有一个特征图预测3组anchor减少成只预测1组，直接预测4个值（左上角xy坐标和box高宽）。减少了参数量和GFLOPs，使速度更快，且表现更好</p><h4 id="正样本选择方式"><a href="#正样本选择方式" class="headerlink" title="正样本选择方式"></a>正样本选择方式</h4><p>①只将<strong>物体中心点所在的位置认为是正样本</strong>，一个gt最多只会有一个正样本。AP达到42.9%</p><p>②<strong>Multi positives</strong> 将中心3*3区域都认为是正样本「类似FCOS」，即从上述策略每个gt有1个正样本增长到9个正样本。且AP提升到45%，已经超越U版yolov3的44.3%AP</p><p>③<strong>SimOTA 动态正样本匹配</strong> 作者认为好的正样本分配准则应该权衡以下几个方面：loss、中心优先、每个GT动态分配的锚框数量、能照顾到全局的样本。因此作者采用了<strong>OTA</strong>「<a href="https://link.zhihu.com/?target=https://arxiv.org/abs/2103.14259">原文</a>」的方法从全局的角度对标签分配，将标签的分配指定为一个最优运输的过程，并将其简化为top-K的策略，命名为SimOTA</p><p>相较于按阈值分配的原始正样本分配策略，SimOTA能自动分析每个GT匹配正样本的个数，以及决定GT应从哪个特征层预测。同时，相较于OTA，SimOTA在速度和超参数数量方面都有所优化。</p><p>在具体介绍SimOTA的算法步骤之前，需要明确SimOTA的cost代价是什么：计算固定的区域内每个gt和预测gi的匹配度，用$c_{ij}$来表示，其主要包括两个部分，分类损失和回归损失，λ是平衡系数：<br>$$<br>c_{ij} &#x3D; L{ij}^{cls} + \lambda * L_{ij}^{reg}<br>$$<br>​<strong>SimOTA的步骤如下：</strong></p><p>​1.计算每个真实框和当前特征点预测框的重合程度(IoU)</p><p>​2.计算将重合度最高的10个IoU相加求得k，代表每个真实框有k个特征点与之对应</p><p>​3.计算每个真实框和当前特征点预测框的种类预测准确度</p><p>​4.判断真实框的中心是否落在了特征点的一定半径内</p><p>​5.计算Cost代价矩阵</p><p>​6.将Cost最低的k个点作为该真实框的正样本</p><blockquote><p>对于步骤2，我们可以举个例子：假如目标区域内有12个物体，它们的IoU分别为 </p><p>$[0.67, 0.62, 0.58, 0.53, 0.49, 0.44, 0.41, 0.36, 0.31, 0.29, 0.18, 0.14]$</p><p>我们取前10个置信度最高的IoU，相加得到：</p><p>$sum&#x3D;0.67+0.62+0.58+0.53+0.49+0.44+0.41+0.36+0.31+0.29&#x3D;4.7, k&#x3D;round(sum)&#x3D;4$</p><p>使用这里会作为$4$个框的正样本</p></blockquote><h2 id="mmdetection目标检测框架介绍"><a href="#mmdetection目标检测框架介绍" class="headerlink" title="mmdetection目标检测框架介绍"></a>mmdetection目标检测框架介绍</h2><p>这里直接贴上官方🔗 直接进行配置 </p><blockquote><p>mmdetection中文指南「<a href="https://mmdetection.readthedocs.io/zh_CN/latest/">链接</a>」 | mmdetection源代码「<a href="https://github.com/open-mmlab/mmdetection">GitHub链接</a>」</p></blockquote><h2 id="数据集划分与模型训练流程"><a href="#数据集划分与模型训练流程" class="headerlink" title="数据集划分与模型训练流程"></a>数据集划分与模型训练流程</h2><p>现阶段数据集共有5466张图片设定训练集为4766张，验证集500张，测试集200张</p><p>基于YOLOX-L进行config文件改写，具体训练参数和流程可以从代码中获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个新的配置文件继承自一个原始配置文件，只需要突出必要的修改部分即可</span></span><br><span class="line">_base_ = <span class="string">&#x27;./yolox_l_8x8_300e_coco.py&#x27;</span></span><br><span class="line">img_scale = (<span class="number">640</span>, <span class="number">640</span>)  <span class="comment"># height, width</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们需要对头中的类别数量进行修改来匹配数据集的标注</span></span><br><span class="line">model = <span class="built_in">dict</span>(</span><br><span class="line">    backbone=<span class="built_in">dict</span>(deepen_factor=<span class="number">1.0</span>, widen_factor=<span class="number">1.0</span>),</span><br><span class="line">    neck=<span class="built_in">dict</span>(</span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>], out_channels=<span class="number">256</span>, num_csp_blocks=<span class="number">3</span>),</span><br><span class="line">    bbox_head=<span class="built_in">dict</span>(num_classes=<span class="number">8</span>, in_channels=<span class="number">256</span>, feat_channels=<span class="number">256</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据集相关设置</span></span><br><span class="line">data_root = <span class="string">&#x27;/root/mmdetection-master/data/coco_new/&#x27;</span></span><br><span class="line">dataset_type = <span class="string">&#x27;CocoDataset&#x27;</span></span><br><span class="line">classes = (<span class="string">&#x27;left_front&#x27;</span>,<span class="string">&#x27;left_rear&#x27;</span>,<span class="string">&#x27;right_front&#x27;</span>,<span class="string">&#x27;right_rear&#x27;</span>,<span class="string">&#x27;front&#x27;</span>,<span class="string">&#x27;rear&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"><span class="comment"># dataset_type = &#x27;CocoDataset&#x27;</span></span><br><span class="line"></span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Mosaic&#x27;</span>, img_scale=img_scale, pad_val=<span class="number">114.0</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;RandomAffine&#x27;</span>,</span><br><span class="line">        scaling_ratio_range=(<span class="number">0.1</span>, <span class="number">0.5</span>),</span><br><span class="line">        border=(-img_scale[<span class="number">0</span>] // <span class="number">2</span>, -img_scale[<span class="number">1</span>] // <span class="number">2</span>)),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;MixUp&#x27;</span>,</span><br><span class="line">        img_scale=img_scale,</span><br><span class="line">        ratio_range=(<span class="number">0.8</span>, <span class="number">1.6</span>),</span><br><span class="line">        pad_val=<span class="number">114.0</span>),</span><br><span class="line">    <span class="comment"># add can remove</span></span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;PhotoMetricDistortion&#x27;</span>,</span><br><span class="line">        brightness_delta=<span class="number">32</span>,</span><br><span class="line">        contrast_range=(<span class="number">0.5</span>, <span class="number">1.5</span>),</span><br><span class="line">        saturation_range=(<span class="number">0.5</span>, <span class="number">1.5</span>),</span><br><span class="line">        hue_delta=<span class="number">18</span>),</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;YOLOXHSVRandomAug&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>, flip_ratio=<span class="number">0.0</span>),</span><br><span class="line">    <span class="comment"># According to the official implementation, multi-scale</span></span><br><span class="line">    <span class="comment"># training is not considered here but in the</span></span><br><span class="line">    <span class="comment"># &#x27;mmdet/models/detectors/yolox.py&#x27;.</span></span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, img_scale=img_scale, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>,</span><br><span class="line">        pad_to_square=<span class="literal">True</span>,</span><br><span class="line">        <span class="comment"># If the image is three-channel, the pad value needs</span></span><br><span class="line">        <span class="comment"># to be set separately for each channel.</span></span><br><span class="line">        pad_val=<span class="built_in">dict</span>(img=(<span class="number">114.0</span>, <span class="number">114.0</span>, <span class="number">114.0</span>))),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;FilterAnnotations&#x27;</span>, min_gt_bbox_wh=(<span class="number">1</span>, <span class="number">1</span>), keep_empty=<span class="literal">False</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;DefaultFormatBundle&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;gt_bboxes&#x27;</span>, <span class="string">&#x27;gt_labels&#x27;</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">train_dataset = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&#x27;MultiImageMixDataset&#x27;</span>,</span><br><span class="line">    dataset=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        classes = classes,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;annotations/train2017.json&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;train/&#x27;</span>,</span><br><span class="line">        pipeline=[</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadAnnotations&#x27;</span>, with_bbox=<span class="literal">True</span>)</span><br><span class="line">        ],</span><br><span class="line">        filter_empty_gt=<span class="literal">False</span>,</span><br><span class="line">    ),</span><br><span class="line">    pipeline=train_pipeline)</span><br><span class="line">test_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;MultiScaleFlipAug&#x27;</span>,</span><br><span class="line">        img_scale=img_scale,</span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>, flip_ratio=<span class="number">0.0</span>),</span><br><span class="line">            <span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>,</span><br><span class="line">                pad_to_square=<span class="literal">True</span>,</span><br><span class="line">                pad_val=<span class="built_in">dict</span>(img=(<span class="number">114.0</span>, <span class="number">114.0</span>, <span class="number">114.0</span>))),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;DefaultFormatBundle&#x27;</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>])</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">dict</span>(</span><br><span class="line">    samples_per_gpu=<span class="number">8</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">16</span>,</span><br><span class="line">    persistent_workers=<span class="literal">True</span>,</span><br><span class="line">    train=train_dataset,</span><br><span class="line">    val=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        classes = classes,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;annotations/val2017.json&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;train/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        classes = classes,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;annotations/test2017.json&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;train/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器设计</span></span><br><span class="line">optimizer = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&#x27;SGD&#x27;</span>,</span><br><span class="line">    lr=<span class="number">0.01</span>,</span><br><span class="line">    momentum=<span class="number">0.9</span>,</span><br><span class="line">    weight_decay=<span class="number">5e-4</span>,</span><br><span class="line">    nesterov=<span class="literal">True</span>,</span><br><span class="line">    paramwise_cfg=<span class="built_in">dict</span>(norm_decay_mult=<span class="number">0.</span>, bias_decay_mult=<span class="number">0.</span>))</span><br><span class="line">optimizer_config = <span class="built_in">dict</span>(grad_clip=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">max_epochs = <span class="number">300</span></span><br><span class="line">num_last_epochs = <span class="number">15</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">interval = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># learning policy</span></span><br><span class="line">lr_config = <span class="built_in">dict</span>(</span><br><span class="line">    _delete_=<span class="literal">True</span>,</span><br><span class="line">    policy=<span class="string">&#x27;YOLOX&#x27;</span>,</span><br><span class="line">    warmup=<span class="string">&#x27;exp&#x27;</span>,</span><br><span class="line">    by_epoch=<span class="literal">False</span>,</span><br><span class="line">    warmup_by_epoch=<span class="literal">True</span>,</span><br><span class="line">    warmup_ratio=<span class="number">1</span>,</span><br><span class="line">    warmup_iters=<span class="number">10</span>,  <span class="comment"># 5 epoch</span></span><br><span class="line">    num_last_epochs=num_last_epochs,</span><br><span class="line">    min_lr_ratio=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">runner = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;EpochBasedRunner&#x27;</span>, max_epochs=max_epochs)</span><br><span class="line"></span><br><span class="line">custom_hooks = [</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;YOLOXModeSwitchHook&#x27;</span>,</span><br><span class="line">        num_last_epochs=num_last_epochs,</span><br><span class="line">        priority=<span class="number">48</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;SyncNormHook&#x27;</span>,</span><br><span class="line">        num_last_epochs=num_last_epochs,</span><br><span class="line">        interval=interval,</span><br><span class="line">        priority=<span class="number">48</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;ExpMomentumEMAHook&#x27;</span>,</span><br><span class="line">        resume_from=resume_from,</span><br><span class="line">        momentum=<span class="number">0.0001</span>,</span><br><span class="line">        priority=<span class="number">49</span>)</span><br><span class="line">]</span><br><span class="line">checkpoint_config = <span class="built_in">dict</span>(interval=interval)</span><br><span class="line">evaluation = <span class="built_in">dict</span>(</span><br><span class="line">    save_best=<span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    <span class="comment"># The evaluation interval is &#x27;interval&#x27; when running epoch is</span></span><br><span class="line">    <span class="comment"># less than ‘max_epochs - num_last_epochs’.</span></span><br><span class="line">    <span class="comment"># The evaluation interval is 1 when running epoch is greater than</span></span><br><span class="line">    <span class="comment"># or equal to ‘max_epochs - num_last_epochs’.</span></span><br><span class="line">    interval=interval,</span><br><span class="line">    dynamic_intervals=[(max_epochs - num_last_epochs, <span class="number">1</span>)],</span><br><span class="line">    metric=<span class="string">&#x27;bbox&#x27;</span>)</span><br><span class="line">log_config = <span class="built_in">dict</span>(interval=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> `auto_scale_lr` is for automatically scaling LR,</span></span><br><span class="line"><span class="comment"># USER SHOULD NOT CHANGE ITS VALUES.</span></span><br><span class="line"><span class="comment"># base_batch_size = (8 GPUs) x (8 samples per GPU)</span></span><br><span class="line"><span class="comment"># auto_scale_lr = dict(base_batch_size=64)</span></span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意的是因为蝠鲼检测任务中对于左右方位有区分，所以在进行数据增广的时候需要让「RandomFlip」的「flip_ratio」置为0</p></blockquote><h2 id="训练结果与检测效果展示"><a href="#训练结果与检测效果展示" class="headerlink" title="训练结果与检测效果展示"></a>训练结果与检测效果展示</h2><p>经过训练后得到「best_bbox_mAP_epoch_300.pth」「.log」「.log.json」文件</p><p>使用mmdetection自带api进行结果测试</p><table><thead><tr><th align="center">功能</th><th align="left">操作指令</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">可视化logs</td><td align="left"><code>python tools/analysis_tools/analyze_logs.py plot_curve work_dirs/new_v4/20220505_143504.log.json --keys loss_cls loss_bbox loss_obj --out result.png</code></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h270sx4cfxj20hs0dcgm7.jpg" alt="" style="zoom:50%;" /></td></tr><tr><td align="center">计算FLOPs和params</td><td align="left"><code>python tools/analysis_tools/get_flops.py configs/yolox/new_v4.py </code><br />注：1280*720会默认pad到1280*736</td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2729fnodaj206c026t8l.jpg"></td></tr><tr><td align="center">mAP</td><td align="left"><code>python tools/test.py  configs/yolox/new_v4.py work_dirs/new_v4/best_bbox_mAP_epoch_300.pth  --eval-options  &#39;classwise=True&#39;  --eval bbox</code></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2729d6wc1j20g208p75x.jpg" alt="" style="zoom:150%;" /></td></tr><tr><td align="center">训练损失</td><td align="left">查看logs文件</td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272b4v63gj20bw00it8j.jpg"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272bmd2r8j206f00mwe9.jpg" alt="" style="zoom:67%;" /></td></tr><tr><td align="center">PR曲线</td><td align="left"><code>python tools/test.py  configs/yolox/new_v4.py work_dirs/new_v4/best_bbox_mAP_epoch_300.pth  --eval-options  &#39;classwise=True&#39;  --out /root/mmdetection-master/test_result/new_v4/latest.pkl</code><br />运行上面👆的命令将.pth文件转成.pkl文件 <br />然后新建一个jupyter 运行下面👇的程序</td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h271vb22ilj20c0080weo.jpg"></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pycocotools.coco <span class="keyword">import</span> COCO</span><br><span class="line"><span class="keyword">from</span> pycocotools.cocoeval <span class="keyword">import</span> COCOeval</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmcv <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> mmdet.datasets <span class="keyword">import</span> build_dataset</span><br><span class="line"></span><br><span class="line">MODEL = <span class="string">&quot;yolox&quot;</span></span><br><span class="line">MODEL_NAME = <span class="string">&quot;new_v4&quot;</span></span><br><span class="line"></span><br><span class="line">CONFIG_FILE = <span class="string">f&quot;/root/mmdetection-master/configs/<span class="subst">&#123;MODEL&#125;</span>/<span class="subst">&#123;MODEL_NAME&#125;</span>.py&quot;</span></span><br><span class="line">RESULT_FILE = <span class="string">f&quot;/root/mmdetection-master/test_result/<span class="subst">&#123;MODEL_NAME&#125;</span>/latest.pkl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_pr_curve</span>(<span class="params">config_file, result_file, metric=<span class="string">&quot;bbox&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;plot precison-recall curve based on testing results of pkl file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            config_file (list[list | tuple]): config file path.</span></span><br><span class="line"><span class="string">            result_file (str): pkl file of testing results path.</span></span><br><span class="line"><span class="string">            metric (str): Metrics to be evaluated. Options are</span></span><br><span class="line"><span class="string">                &#x27;bbox&#x27;, &#x27;segm&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    cfg = Config.fromfile(config_file)</span><br><span class="line">    <span class="comment"># turn on test mode of dataset</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cfg.data.test, <span class="built_in">dict</span>):</span><br><span class="line">        cfg.data.test.test_mode = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(cfg.data.test, <span class="built_in">list</span>):</span><br><span class="line">        <span class="keyword">for</span> ds_cfg <span class="keyword">in</span> cfg.data.test:</span><br><span class="line">            ds_cfg.test_mode = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># build dataset</span></span><br><span class="line">    dataset = build_dataset(cfg.data.test)</span><br><span class="line">    <span class="comment"># load result file in pkl format</span></span><br><span class="line">    pkl_results = mmcv.load(result_file)</span><br><span class="line">    <span class="comment"># convert pkl file (list[list | tuple | ndarray]) to json</span></span><br><span class="line">    json_results, _ = dataset.format_results(pkl_results)</span><br><span class="line">    <span class="comment"># initialize COCO instance</span></span><br><span class="line">    coco = COCO(annotation_file=cfg.data.test.ann_file)</span><br><span class="line">    coco_gt = coco</span><br><span class="line">    coco_dt = coco_gt.loadRes(json_results[metric]) </span><br><span class="line">    <span class="comment"># initialize COCOeval instance</span></span><br><span class="line">    coco_eval = COCOeval(coco_gt, coco_dt, metric)</span><br><span class="line">    coco_eval.evaluate()</span><br><span class="line">    coco_eval.accumulate()</span><br><span class="line">    coco_eval.summarize()</span><br><span class="line">    <span class="comment"># extract eval data</span></span><br><span class="line">    precisions = coco_eval.<span class="built_in">eval</span>[<span class="string">&quot;precision&quot;</span>]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    precisions[T, R, K, A, M]</span></span><br><span class="line"><span class="string">    T: iou thresholds [0.5 : 0.05 : 0.95], idx from 0 to 9</span></span><br><span class="line"><span class="string">    R: recall thresholds [0 : 0.01 : 1], idx from 0 to 100</span></span><br><span class="line"><span class="string">    K: category, idx from 0 to ...</span></span><br><span class="line"><span class="string">    A: area range, (all, small, medium, large), idx from 0 to 3 </span></span><br><span class="line"><span class="string">    M: max dets, (1, 10, 100), idx from 0 to 2</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    pr_array1 = precisions[<span class="number">0</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array2 = precisions[<span class="number">1</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array3 = precisions[<span class="number">2</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array4 = precisions[<span class="number">3</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array5 = precisions[<span class="number">4</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array6 = precisions[<span class="number">5</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array7 = precisions[<span class="number">6</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array8 = precisions[<span class="number">7</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array9 = precisions[<span class="number">8</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line">    pr_array10 = precisions[<span class="number">9</span>, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line">    x = np.arange(<span class="number">0.0</span>, <span class="number">1.01</span>, <span class="number">0.01</span>)</span><br><span class="line">    <span class="comment"># plot PR curve</span></span><br><span class="line">    plt.plot(x, pr_array1, label=<span class="string">&quot;iou=0.5&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array2, label=<span class="string">&quot;iou=0.55&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array3, label=<span class="string">&quot;iou=0.6&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array4, label=<span class="string">&quot;iou=0.65&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array5, label=<span class="string">&quot;iou=0.7&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array6, label=<span class="string">&quot;iou=0.75&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array7, label=<span class="string">&quot;iou=0.8&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array8, label=<span class="string">&quot;iou=0.85&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array9, label=<span class="string">&quot;iou=0.9&quot;</span>)</span><br><span class="line">    plt.plot(x, pr_array10, label=<span class="string">&quot;iou=0.95&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.xlabel(<span class="string">&quot;recall&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;precison&quot;</span>)</span><br><span class="line">    plt.xlim(<span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">    plt.ylim(<span class="number">0</span>, <span class="number">1.01</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;lower left&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;./result.jpg&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plot_pr_curve(config_file=CONFIG_FILE, result_file=RESULT_FILE, metric=<span class="string">&quot;bbox&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后放几张检测结果「检测效果还不错」</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272o4wmadj20hs0a0wfb.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272m23y7tj20mi0f0q3n.jpg"></th></tr></thead><tbody><tr><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272lbylndj20mi0f0dh4.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h272m96w4dj20mi0f0jse.jpg"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 蝠鲼项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「论文系列」（一）旷视科技CVPR2022【CREStereo】官方GitHub代码推理运行</title>
      <link href="/2022/05/11/%E3%80%8C%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80CVPR2022%E3%80%90CREStereo%E3%80%91%E5%AE%98%E6%96%B9GitHub%E4%BB%A3%E7%A0%81%E6%8E%A8%E7%90%86%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/05/11/%E3%80%8C%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80CVPR2022%E3%80%90CREStereo%E3%80%91%E5%AE%98%E6%96%B9GitHub%E4%BB%A3%E7%A0%81%E6%8E%A8%E7%90%86%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="论文简介"><a href="#论文简介" class="headerlink" title="论文简介"></a>论文简介</h2><p>CVPR2022论文     <strong>《基于自适应相关级联递归网络的实用双目匹配》</strong>ttps:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2203.11483</p><p>原文链接：「<a href="https://arxiv.org/abs/2203.11483">Practical Stereo Matching via Cascaded Recurrent Network with Adaptive Correlation</a>」</p><p>作者解读视频：</p><iframe src="//player.bilibili.com/player.html?aid=383885340&bvid=BV1oZ4y1h7mL&cid=717464018&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="运行准备"><a href="#运行准备" class="headerlink" title="运行准备"></a>运行准备</h2><p>在<strong>恒源云</strong>平台 配置一个<strong>CUDA10.1</strong>的环境 这里选择<strong>Tesla T4</strong> 「使用其他型号可能无法只能进行CUDA11及以上的配置」</p><span id="more"></span><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24u0rmh0gj20mt02tt8p.jpg" alt="image-20220511212511378"  /><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24u0x9dtgj20dg07t3yt.jpg" alt="image-20220511212457641"></p><p>设置成功后进入<strong>Jupyter-lab</strong>，安装<strong>OpenCV</strong></p><blockquote><p>参考「<a href="https://blog.csdn.net/keineahnung2345/article/details/84299532%E3%80%8D">https://blog.csdn.net/keineahnung2345/article/details/84299532」</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">apt-get install -y libglib2.0-0</span><br><span class="line">apt-get install -y libsm6 libxext6</span><br><span class="line">apt-get install -y libxrender-dev</span><br></pre></td></tr></table></figure><p>之后根据官方GitHub「<a href="https://github.com/megvii-research/CREStereo%E3%80%8D">https://github.com/megvii-research/CREStereo」</a> 进行操作</p><blockquote><p>建议使用Download ZIP进行下载 之后放入服务器 unzip出来  git clone经常抽风卡在clone不动弹</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><blockquote><p>这里需要提前将requirements.txt 中的 MegEngine&gt;&#x3D;1.8.2 改为 MegEngine&#x3D;&#x3D;1.8.2 防止出现版本不兼容问题</p></blockquote><p>然后下载一个官方提供的预训练模型「<a href="https://drive.google.com/file/d/1Wx_-zDQh7BUFBmN9im_26DFpnf3AkXj4/view">Google网盘链接</a>」放到主目录下用于前向推理</p><p>最后运行如下代码，即可生成<strong>深度图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py --model_path path_to_mge_model --left img/test/left.png --right img/test/right.png --size 1024x1536 --output disparity.png</span><br></pre></td></tr></table></figure><h2 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示"></a>运行结果展示</h2><p>最近正好在做双目视觉相关的工作，有一些双目的素材</p><p>实验了一下看看，效果还是挺不错的，下面放上几张效果图</p><p>如果后面能够利用声纳测距或者其他方法 做一个水下蝠鲼双目匹配的的真值数据集就更好</p><table><thead><tr><th align="center">左侧图</th><th align="center">右侧图</th><th align="center">深度图</th></tr></thead><tbody><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uqkkb4ej20zk0k0q53.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uqkkb4ej20zk0k0q53.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24ut82ysij20zk0k0t97.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24up9kgcej20zk0k0tak.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24upf2e6jj20zk0k0wgb.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uukp9oxj20zk0k0aav.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uww73g7j20zk0k0whd.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uww73g7j20zk0k0whd.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24ux180a4j20zk0k0q3s.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyh35k6j20zk0k0whf.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyeiq49j20zk0k0tbo.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyft7d6j20zk0k0jsd.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0hv9urj20zk0k0dip.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0hv9urj20zk0k0dip.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0ts6ulj20zk0k0gmk.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v658pitj20zk0k0mzc.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v64j9edj20zk0k0dhv.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v633e4hj20zk0k03z6.jpg"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 论文系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「瞎折腾」支持Apple Silion的新版本Pytorch测试</title>
      <link href="/2022/05/10/%E3%80%8C%E7%9E%8E%E6%8A%98%E8%85%BE%E3%80%8D%E6%94%AF%E6%8C%81Apple%20Silion%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%ACPytorch%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/10/%E3%80%8C%E7%9E%8E%E6%8A%98%E8%85%BE%E3%80%8D%E6%94%AF%E6%8C%81Apple%20Silion%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%ACPytorch%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>今天早晨起来看到了「机器之心」和「量子位」的公众号推文「<a href="https://mp.weixin.qq.com/s/UjnDVacH-6kSadPOnO32lQ">PyTorch宣布支持苹果M1芯片GPU加速：训练快6倍，推理提升21倍</a>」「<a href="https://mp.weixin.qq.com/s/TMreqcWsvu-EOB1qEgg6Kg">炼丹速度×7！你的Mac电脑也能在PyTorch训练中用GPU加速了</a>」</p><p>我的天 过年了过年了  <strong>Pytorch支持Apple Silion啦！！！</strong> </p><p>看了看推文 有Preview版本可以使用了 这还不折腾起来？ 开整！</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>先根据Pytorch的<a href="https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/">官方指引</a>用Conda创建一个原生Python环境「M1系列Python3.9以上才是原生」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n torch112_py39 python=3.9</span><br><span class="line">conda activate torch112_py39</span><br></pre></td></tr></table></figure><span id="more"></span><p>之后进入环境 安装torch</p><blockquote><p>这里需要注意 conda下面找不到torchaudio 需要在pip下面安装</p><p>安装结束后为了防止pip的环境与conda的环境冲突 删掉pip下面的torch</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision -c pytorch-nightly</span><br><span class="line">pip install torchaudio</span><br><span class="line">pip uninstall torch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再安装一个依赖库「可能有用😂」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pkg-config libuv</span><br></pre></td></tr></table></figure><p>OK 环境配置好了 找个项目来试一试</p><h2 id="项目实测"><a href="#项目实测" class="headerlink" title="项目实测"></a>项目实测</h2><p>正好手头有目标检测CenterNet的项目代码 跑跑看看有没有提升</p><p>在Pycharm里面将编译环境改成设置好的<strong>torch112_py39</strong>环境</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dpqbqiihj20ya08uq3l.jpg"></p><p>之后安装项目依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">pip install torchsummary</span><br></pre></td></tr></table></figure><p>最后运行看看结果</p><table><thead><tr><th>Torch1.9.0｜Python3.8</th><th>Torch1.10.2 | Python3.9</th><th>Torch1.9.0</th><th>Python3.9</th></tr></thead><tbody><tr><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqf6zkndj21fz0u078d.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqhrgzalj21fz0u0aeb.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dvnjaakxj21fz0u078s.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqgzjxb4j21fz0u078n.jpg"></td></tr><tr><td>1.43FPS</td><td>2.42FPS</td><td>4.29FPS</td><td>5.85FPS</td></tr></tbody></table><blockquote><p>Torch针对MBP的GPU代码为‘mps’ 需要将model和data都移到device &#x3D; torch.device(‘mps’)上</p></blockquote><p>平台为MacBook M1 Pro 16+512 8核CPU 14核GPU</p><p>最后来看效果确实是有提升，考虑到目标检测过程中非torch操作很多且只能在CPU上跑这个项目，这种提升效果还是不错的，后续考虑再测试一下Train阶段的提升效果</p>]]></content>
      
      
      
        <tags>
            
            <tag> 尝鲜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「蝠鲼项目」（一）水下仿生蝠鲼数据集获取及VOC格式转化为COCO格式</title>
      <link href="/2022/05/10/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%B0%B4%E4%B8%8B%E4%BB%BF%E7%94%9F%E8%9D%A0%E9%B2%BC%E6%95%B0%E6%8D%AE%E9%9B%86%E8%8E%B7%E5%8F%96%E5%8F%8AVOC%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BACOCO%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/05/10/%E3%80%8C%E8%9D%A0%E9%B2%BC%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%B0%B4%E4%B8%8B%E4%BB%BF%E7%94%9F%E8%9D%A0%E9%B2%BC%E6%95%B0%E6%8D%AE%E9%9B%86%E8%8E%B7%E5%8F%96%E5%8F%8AVOC%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BACOCO%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="拍摄流程"><a href="#拍摄流程" class="headerlink" title="拍摄流程"></a>拍摄流程</h2><p>使用手机相机📱、水密相机📷「后面进水了🤦‍♂️」还有固定在水池玻璃围栏上的水密监控📹进行录像</p><p>蝠鲼团队的同学帮忙操纵蝠鲼进行各种姿态的运动，保证蝠鲼的各个角度都被捕捉到</p><p>后期经过粗略的剪辑「有蝠鲼的留下，没有蝠鲼的删掉」得到原始视频</p><blockquote><p>这里出现了“一号坑”：水密监控是网络传输格式，需要特殊的上位机进行录像，后期也需要单独下载VLC软件进行视频格式转换，直接双击源文件是播放不了的</p></blockquote><h2 id="视频切分为图片"><a href="#视频切分为图片" class="headerlink" title="视频切分为图片"></a>视频切分为图片</h2><p>有了原始视频就要进行切分得到图片，这里用调用OpenCV的“轮子”进行切分，切分标准为每10帧切1张</p><p>下面贴上代码：</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : video2image.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 将视频切分为图片</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义保存图片函数</span></span><br><span class="line"><span class="comment"># image:要保存的图片名字</span></span><br><span class="line"><span class="comment"># addr；图片地址与相片名字的前部分</span></span><br><span class="line"><span class="comment"># num: 相片，名字的后缀。int 类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_image</span>(<span class="params">image, addr, num</span>):</span><br><span class="line">    address = addr + <span class="built_in">str</span>(num) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    cv2.imwrite(address, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取视频文件</span></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">video_name = <span class="string">&quot;IMG_8777.mp4&quot;</span>  <span class="comment"># 视频名称</span></span><br><span class="line">video_dir = <span class="string">&quot;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/video/&quot;</span>  <span class="comment"># 视频根目录</span></span><br><span class="line">videoCapture = cv2.VideoCapture(video_dir + video_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># videoCapture=cv2.VideoCapture(1) # 这里就是直接调用摄像头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读帧</span></span><br><span class="line">success, frame = videoCapture.read()</span><br><span class="line"></span><br><span class="line">timeF = <span class="number">10</span>  <span class="comment"># 按需更改</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> success:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (i % timeF == <span class="number">0</span>):</span><br><span class="line">        s = <span class="number">10000</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">        s += j</span><br><span class="line">        save_image(frame, <span class="string">&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/video/test/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(video_name[:-<span class="number">4</span>]), s)</span><br><span class="line">        <span class="comment"># &#123;&#125;前的部分为保存视频的地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;save image:&#x27;</span>, i)</span><br><span class="line">    success, frame = videoCapture.read()</span><br></pre></td></tr></table></figure><h2 id="标签设定与标签标定"><a href="#标签设定与标签标定" class="headerlink" title="标签设定与标签标定"></a>标签设定与标签标定</h2><p>切分完以后就得到<strong>一堆一堆的图片</strong>「八千多张」</p><p>然后找师姐和师弟帮忙一起打标签「非常感谢🙏」</p><p>打标签是在「<a href="https://www.makesense.ai/%E3%80%8D%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%89%93%E7%9A%84">https://www.makesense.ai/」这个网站上打的</a></p><p>输出格式可以选择为<strong>VOC</strong>、<strong>YOLO</strong>或者直接<strong>XML</strong></p><p><strong>标签</strong>按照相机相对于蝠鲼的位置一共设定了<strong>8个类</strong>，分别为「<strong>left_front</strong>，<strong>left_rear</strong>，<strong>right_front</strong>，<strong>right_rear</strong>，<strong>front</strong>，<strong>rear</strong>，<strong>left</strong>，<strong>right</strong>」</p><blockquote><p>这里是“二号坑”：最早的时候打的标签是中文，但是后面推理的时候无法正确在图片上输出中文，所以在后面进行标签转化的时候需要进行英文替换，而且这八个类的顺序也十分十分十分重要，会影响到后面loss的计算。</p></blockquote><p>下面是打标网站的界面和打标的部分实况截图</p><img src="https://wx2.sinaimg.cn/large/005XjMv9ly1h23cjwewxsj30xi0rajyn.jpg" width=80% height=50% align=center referrerpolicy="no-referrer"/><img src="https://wx4.sinaimg.cn/large/005XjMv9ly1h23cjvruujj30xu0iwn3c.jpg" width=80% height=50% align=center referrerpolicy="no-referrer"/><h2 id="文件过滤"><a href="#文件过滤" class="headerlink" title="文件过滤"></a>文件过滤</h2><p>因为打标签的时候是图片文件-标签文件一一对应的，如果打标过程中遇到一些质量较低的图片就会选择跳过不打标签</p><p>这就造成了有部分图片并没有标签，我们需要去掉这些无标签的图片，这里用标签文件名「不含.xml」进行匹配过滤这些「无用」图片</p><p>程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : remove_useless_image.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 删除没有标签的照片</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path1 = <span class="string">r&quot;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/jpg/处理结果集合/数据对齐与分割程序/VOCdevkit/VOC2007/Annotations&quot;</span>       <span class="comment">#对比的文件夹（标签文件夹）</span></span><br><span class="line">path2 = <span class="string">r&quot;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/jpg/处理结果集合/数据对齐与分割程序/VOCdevkit/VOC2007/JPEGImages&quot;</span>        <span class="comment">#删除文件的文件夹（图片文件夹）</span></span><br><span class="line">filelist1 = os.listdir(path1) <span class="comment">#该文件夹下所有的文件（包括文件夹）</span></span><br><span class="line">filelist2 = os.listdir(path2)</span><br><span class="line">tp = <span class="string">&quot;.xml&quot;</span>      <span class="comment">#要匹配标签文件的后缀</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file2 <span class="keyword">in</span> filelist2:</span><br><span class="line">    filename = os.path.splitext(file2)[<span class="number">0</span>] + tp  <span class="comment"># 匹配文件名</span></span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">not</span> <span class="keyword">in</span> filelist1:           <span class="comment">#如果没有对应匹配文件，就删除</span></span><br><span class="line">        os.remove(os.path.join(path2, file2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="VOC标签格式"><a href="#VOC标签格式" class="headerlink" title="VOC标签格式"></a>VOC标签格式</h2><p>网站打标签后输出的文件格式没有COCO格式可以选择，所以在这里选择VOC数据集，方便后期的转换</p><p>这里介绍一下VOC标签的存放格式和内部格式</p><p>存放格式如下：「只考虑目标检测任务」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#第一级</span><br><span class="line">VOCdevkit</span><br><span class="line">├── VOC2007</span><br><span class="line">└── VOC2012</span><br><span class="line">#第二级</span><br><span class="line">VOCdevkit/VOC2007</span><br><span class="line">├── Annotations</span><br><span class="line">├── ImageSets</span><br><span class="line">├── JPEGImages</span><br><span class="line"></span><br><span class="line">VOCdevkit/VOC2012</span><br><span class="line">├── Annotations</span><br><span class="line">├── ImageSets</span><br><span class="line">├── JPEGImages</span><br><span class="line"></span><br><span class="line">#以VOC2007为例，第三级</span><br><span class="line">## Annotations</span><br><span class="line">VOCdevkit/VOC2007/Annotations/</span><br><span class="line">├── 000001.xml</span><br><span class="line">...</span><br><span class="line">## JPEGImages</span><br><span class="line">VOCdevkit/VOC2007/JPEGImages/</span><br><span class="line">├── 000001.jpg</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内部格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">folder</span>&gt;</span>油罐车图片<span class="tag">&lt;/<span class="name">folder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filename</span>&gt;</span>1.jpg<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>D:\Desktop\油罐车图片\1.jpg<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">database</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">width</span>&gt;</span>312<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span>&gt;</span>208<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depth</span>&gt;</span>3<span class="tag">&lt;/<span class="name">depth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">segmented</span>&gt;</span>0<span class="tag">&lt;/<span class="name">segmented</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>redCap<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>43<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>92<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>96<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>144<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yellowCap<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>147<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>98<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>198<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>151<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>oilTruck<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>111<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>46<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>266<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>157<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里如果需要进行标签转换的话，可以使用如下代码进行替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : chang_xml_label.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 批量修改xml文件中的类别名称 当有多个物体时，多个物体的名称均能被修改</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml.etree <span class="keyword">import</span> Element, SubElement, tostring, ElementTree</span><br><span class="line"><span class="keyword">from</span> xml.dom <span class="keyword">import</span> minidom</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 修改自己的路径</span></span><br><span class="line"><span class="comment"># parser = ET.XMLParser(encoding=&quot;utf-8&quot;)</span></span><br><span class="line">template_file = <span class="string">r&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/jpg/处理结果集合/VOCdevkit/VOC2007/Annotations/&#x27;</span>  <span class="comment">#这里是存放xml文件的文件夹</span></span><br><span class="line">xmllist = os.listdir(template_file)</span><br><span class="line"><span class="comment"># text = re.sub(u&quot;[\x00-\x08\x0b-\x0c\x0e-\x1f]+&quot;, u&quot;&quot;, text)</span></span><br><span class="line"><span class="keyword">for</span> xml <span class="keyword">in</span> xmllist:</span><br><span class="line">    <span class="keyword">if</span> xml == <span class="string">&#x27;.DS_Store&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># print(xml)</span></span><br><span class="line">    file = <span class="built_in">open</span>(os.path.join(template_file, xml)).read()</span><br><span class="line">    <span class="comment"># print(type(file))</span></span><br><span class="line">    file = file.replace(<span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    file = file.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    tree = ET.ElementTree(ET.fromstring(file))</span><br><span class="line">    root = tree.getroot() <span class="comment"># 获取根节点</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(child.tag,child.attrib)</span><br><span class="line">        <span class="keyword">if</span> child.tag == <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">            name=child.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">            <span class="comment"># print(name)</span></span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;左前&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text=<span class="string">&#x27;left_front&#x27;</span></span><br><span class="line">                tree=ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;左后&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;left_rear&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;右前&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;right_front&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;右后&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;right_rear&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;前侧&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;front&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;后侧&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;rear&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;左侧&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;右侧&#x27;</span>:</span><br><span class="line">                child.find(<span class="string">&#x27;name&#x27;</span>).text = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">                tree = ET.ElementTree(root)</span><br><span class="line">    <span class="comment"># print(tree)</span></span><br><span class="line">    tree.write(os.path.join(template_file, xml))</span><br></pre></td></tr></table></figure><blockquote><p>这里有个“三号坑”：每次系统运行的时候都会出现”.DS_Store”或者jupyter下面的时候出现”.jupyter xxxx”的类似文件，如果程序报错可以考虑忽略这种文件</p></blockquote><p>这里还可以延伸出一个计数程序，可以用于判定程序中各类的类别数量，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : count.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : 各类数量统计</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 修改自己的路径</span></span><br><span class="line">count0 = count1 = count2 = count3 = count4 = count5 = count6 = count7 = <span class="number">0</span></span><br><span class="line">template_file = <span class="string">r&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/jpg/处理结果集合/VOCdevkit/VOC2007/Annotations&#x27;</span>  <span class="comment">#这里是存放xml文件的文件夹</span></span><br><span class="line">xmllist = os.listdir(template_file)</span><br><span class="line"><span class="keyword">for</span> xml <span class="keyword">in</span> xmllist:</span><br><span class="line">    <span class="keyword">if</span> xml == <span class="string">&#x27;.DS_Store&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># print(xml)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># tree = ET.parse(os.path.join(template_file,xml))</span></span><br><span class="line">    <span class="comment"># root = tree.getroot() # 获取根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(xml)</span></span><br><span class="line">    file = <span class="built_in">open</span>(os.path.join(template_file, xml)).read()</span><br><span class="line">    <span class="comment"># print(type(file))</span></span><br><span class="line">    file = file.replace(<span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    file = file.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    tree = ET.ElementTree(ET.fromstring(file))</span><br><span class="line">    root = tree.getroot() <span class="comment"># 获取根节点</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line">        <span class="comment"># print(child.tag,child.attrib)</span></span><br><span class="line">        <span class="keyword">if</span> child.tag == <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">            name=child.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">            <span class="comment"># print(name)</span></span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;left_front&#x27;</span>:</span><br><span class="line">                count0 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;left_rear&#x27;</span>:</span><br><span class="line">                count1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;right_front&#x27;</span>:</span><br><span class="line">                count2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;right_rear&#x27;</span>:</span><br><span class="line">                count3 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;front&#x27;</span>:</span><br><span class="line">                count4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;rear&#x27;</span>:</span><br><span class="line">                count5 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">                count6 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> name == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">                count7 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count0,count1,count2,count3,count4,count5,count6,count7)</span><br></pre></td></tr></table></figure><h2 id="COCO数据格式"><a href="#COCO数据格式" class="headerlink" title="COCO数据格式"></a>COCO数据格式</h2><p>coco数据集的格式实在是有些繁琐，限于篇幅 这里贴一个链接，感兴趣的可以自行查看</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/29393415">https://zhuanlan.zhihu.com/p/29393415</a></p></blockquote><h2 id="转化成COCO格式"><a href="#转化成COCO格式" class="headerlink" title="转化成COCO格式"></a>转化成COCO格式</h2><p>下面就是voc格式转成coco的程序 顺带可以进行数据集的随机划分 划分为「训练集train」「验证集val」「测试集test」</p><p>运行后可以直接生成coco的文件分布和json文件</p><blockquote><p>这里还有一个“四号坑”：代码中段def convert函数下面有一个StartIndex这个是生成的json文件中图片类别的起始计数数值，这里一定要改成一个天马行空的数字，我这里是设定的21800，因为不这么设定会和后面标签的计数冲突「都是起始0」，导致训练时部分loss始终为0</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : voc2coco.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @brief      : voc格式转成coco &amp; 数据集划分</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">You only need to set the following three parts</span></span><br><span class="line"><span class="string">1.val_files_num : num of validation samples from your all samples</span></span><br><span class="line"><span class="string">2.test_files_num = num of test samples from your all samples</span></span><br><span class="line"><span class="string">3.voc_annotations : path to your VOC dataset Annotations</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">val_files_num = <span class="number">500</span></span><br><span class="line">test_files_num = <span class="number">200</span></span><br><span class="line">voc_annotations = <span class="string">&#x27;/Users/kenton/Downloads/集群重点研发/蝠鲼数据集/jpg/处理结果集合/VOCdevkit/VOC2007/Annotations/&#x27;</span></span><br><span class="line"><span class="comment">#voc数据集annotations的地址</span></span><br><span class="line"></span><br><span class="line">split = voc_annotations.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">coco_name = split[-<span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span> split[-<span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span> split[-<span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> split[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">del</span> split[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(split)</span></span><br><span class="line">main_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> split:</span><br><span class="line">    main_path += <span class="string">&#x27;/&#x27;</span> + i</span><br><span class="line"></span><br><span class="line">main_path = main_path + <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(main_path)</span></span><br><span class="line"></span><br><span class="line">coco_path = os.path.join(main_path, coco_name+<span class="string">&#x27;_COCO/&#x27;</span>)</span><br><span class="line">coco_images = os.path.join(main_path, coco_name+<span class="string">&#x27;_COCO/images&#x27;</span>)</span><br><span class="line">coco_json_annotations = os.path.join(main_path, coco_name+<span class="string">&#x27;_COCO/annotations/&#x27;</span>)</span><br><span class="line">xml_val = os.path.join(main_path, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xml_val/&#x27;</span>)</span><br><span class="line">xml_test = os.path.join(main_path, <span class="string">&#x27;xml/&#x27;</span>, <span class="string">&#x27;xml_test/&#x27;</span>)</span><br><span class="line">xml_train = os.path.join(main_path, <span class="string">&#x27;xml/&#x27;</span>, <span class="string">&#x27;xml_train/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">voc_images = os.path.join(main_path, coco_name, <span class="string">&#x27;JPEGImages/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    path=path.strip()</span><br><span class="line">    path=path.rstrip(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    isExists=os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="built_in">print</span>(path+<span class="string">&#x27; ----- folder created&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(path+<span class="string">&#x27; ----- folder existed&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">mkdir(coco_path)</span><br><span class="line">mkdir(coco_images)</span><br><span class="line">mkdir(coco_json_annotations)</span><br><span class="line">mkdir(xml_val)</span><br><span class="line">mkdir(xml_test)</span><br><span class="line">mkdir(xml_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#voc images copy to coco images</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(voc_images):</span><br><span class="line">    img_path = os.path.join(voc_images + i)</span><br><span class="line">    shutil.copy(img_path, coco_images)</span><br><span class="line">    <span class="comment"># voc images copy to coco images</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(voc_annotations):</span><br><span class="line">    img_path = os.path.join(voc_annotations + i)</span><br><span class="line">    shutil.copy(img_path, xml_train)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\n %s files copied to %s&quot;</span> % (val_files_num, xml_val))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val_files_num):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.listdir(xml_train)) &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        random_file = random.choice(os.listdir(xml_train))</span><br><span class="line">        <span class="comment">#         print(&quot;%d) %s&quot;%(i+1,random_file))</span></span><br><span class="line">        source_file = <span class="string">&quot;%s/%s&quot;</span> % (xml_train, random_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> random_file <span class="keyword">not</span> <span class="keyword">in</span> os.listdir(xml_val):</span><br><span class="line">            shutil.move(source_file, xml_val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            random_file = random.choice(os.listdir(xml_train))</span><br><span class="line">            source_file = <span class="string">&quot;%s/%s&quot;</span> % (xml_train, random_file)</span><br><span class="line">            shutil.move(source_file, xml_val)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;The folders are empty, please make sure there are enough %d file to move&#x27;</span> % (val_files_num))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(test_files_num):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.listdir(xml_train)) &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        random_file = random.choice(os.listdir(xml_train))</span><br><span class="line">        <span class="comment">#         print(&quot;%d) %s&quot;%(i+1,random_file))</span></span><br><span class="line">        source_file = <span class="string">&quot;%s/%s&quot;</span> % (xml_train, random_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> random_file <span class="keyword">not</span> <span class="keyword">in</span> os.listdir(xml_test):</span><br><span class="line">            shutil.move(source_file, xml_test)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            random_file = random.choice(os.listdir(xml_train))</span><br><span class="line">            source_file = <span class="string">&quot;%s/%s&quot;</span> % (xml_train, random_file)</span><br><span class="line">            shutil.move(source_file, xml_test)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;The folders are empty, please make sure there are enough %d file to move&#x27;</span> % (val_files_num))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\n&quot;</span> + <span class="string">&quot;*&quot;</span> * <span class="number">27</span> + <span class="string">&quot;[ Done ! Go check your file ]&quot;</span> + <span class="string">&quot;*&quot;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip install lxml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">START_BOUNDING_BOX_ID = <span class="number">1</span></span><br><span class="line"><span class="comment"># PRE_DEFINE_CATEGORIES = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># If necessary, pre-define category and its id</span></span><br><span class="line">PRE_DEFINE_CATEGORIES = &#123;<span class="string">&quot;left_front&quot;</span>: <span class="number">0</span>, <span class="string">&quot;left_rear&quot;</span>: <span class="number">1</span>, <span class="string">&quot;right_front&quot;</span>: <span class="number">2</span>, <span class="string">&quot;right_rear&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;front&quot;</span>: <span class="number">4</span>, <span class="string">&quot;rear&quot;</span>: <span class="number">5</span>, <span class="string">&quot;left&quot;</span>: <span class="number">6</span>, <span class="string">&quot;right&quot;</span>: <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">main code below are from</span></span><br><span class="line"><span class="string">https://github.com/Tony607/voc2coco</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">root, name</span>):</span><br><span class="line">    <span class="built_in">vars</span> = root.findall(name)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vars</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_and_check</span>(<span class="params">root, name, length</span>):</span><br><span class="line">    <span class="built_in">vars</span> = root.findall(name)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">vars</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Can not find %s in %s.&quot;</span> % (name, root.tag))</span><br><span class="line">    <span class="keyword">if</span> length &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">vars</span>) != length:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">&quot;The size of %s is supposed to be %d, but is %d.&quot;</span></span><br><span class="line">            % (name, length, <span class="built_in">len</span>(<span class="built_in">vars</span>))</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">vars</span> = <span class="built_in">vars</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vars</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_filename_as_int</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = filename.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        filename = os.path.splitext(os.path.basename(filename))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(filename)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Filename %s is supposed to be an integer.&quot;</span> % (filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_categories</span>(<span class="params">xml_files</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate category name to id mapping from a list of xml files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        xml_files &#123;list&#125; -- A list of xml file paths.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict -- category name to id mapping.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    classes_names = []</span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> xml_files:</span><br><span class="line">        file = <span class="built_in">open</span>(xml_file).read()</span><br><span class="line">        file = file.replace(<span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">        file = file.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="comment"># print(file)</span></span><br><span class="line">        tree = ET.ElementTree(ET.fromstring(file))</span><br><span class="line">        root = tree.getroot()  <span class="comment"># 获取根节点</span></span><br><span class="line">        <span class="comment"># tree = ET.parse(xml_file)</span></span><br><span class="line">        <span class="comment"># root = tree.getroot()</span></span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">&quot;object&quot;</span>):</span><br><span class="line">            classes_names.append(member[<span class="number">0</span>].text)</span><br><span class="line">    classes_names = <span class="built_in">list</span>(<span class="built_in">set</span>(classes_names))</span><br><span class="line">    classes_names.sort()</span><br><span class="line">    <span class="keyword">return</span> &#123;name: i <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(classes_names)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">xml_files, json_file</span>):</span><br><span class="line">    json_dict = &#123;<span class="string">&quot;images&quot;</span>: [], <span class="string">&quot;type&quot;</span>: <span class="string">&quot;instances&quot;</span>, <span class="string">&quot;annotations&quot;</span>: [], <span class="string">&quot;categories&quot;</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> PRE_DEFINE_CATEGORIES <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        categories = PRE_DEFINE_CATEGORIES</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        categories = get_categories(xml_files)</span><br><span class="line">    bnd_id = START_BOUNDING_BOX_ID</span><br><span class="line">    startIndex = <span class="number">21800</span> <span class="comment"># 修改这个很重要！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> xml_files:</span><br><span class="line">        file = <span class="built_in">open</span>(xml_file).read()</span><br><span class="line">        file = file.replace(<span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">        file = file.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="comment"># print(file)</span></span><br><span class="line">        tree = ET.ElementTree(ET.fromstring(file))</span><br><span class="line">        root = tree.getroot()  <span class="comment"># 获取根节点</span></span><br><span class="line">        <span class="comment"># tree = ET.parse(xml_file)</span></span><br><span class="line">        <span class="comment"># root = tree.getroot()</span></span><br><span class="line">        path = get(root, <span class="string">&quot;path&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="number">1</span>:</span><br><span class="line">            filename = os.path.basename(path[<span class="number">0</span>].text)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(path) == <span class="number">0</span>:</span><br><span class="line">            filename = get_and_check(root, <span class="string">&quot;filename&quot;</span>, <span class="number">1</span>).text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;%d paths found in %s&quot;</span> % (<span class="built_in">len</span>(path), xml_file))</span><br><span class="line">        <span class="comment">## The filename must be a number</span></span><br><span class="line">        image_id = startIndex</span><br><span class="line">        startIndex += <span class="number">1</span></span><br><span class="line">        size = get_and_check(root, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        width = <span class="built_in">int</span>(get_and_check(size, <span class="string">&quot;width&quot;</span>, <span class="number">1</span>).text)</span><br><span class="line">        height = <span class="built_in">int</span>(get_and_check(size, <span class="string">&quot;height&quot;</span>, <span class="number">1</span>).text)</span><br><span class="line">        image = &#123;</span><br><span class="line">            <span class="string">&quot;file_name&quot;</span>: filename,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: height,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: width,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: image_id,</span><br><span class="line">        &#125;</span><br><span class="line">        json_dict[<span class="string">&quot;images&quot;</span>].append(image)</span><br><span class="line">        <span class="comment">## Currently we do not support segmentation.</span></span><br><span class="line">        <span class="comment">#  segmented = get_and_check(root, &#x27;segmented&#x27;, 1).text</span></span><br><span class="line">        <span class="comment">#  assert segmented == &#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> get(root, <span class="string">&quot;object&quot;</span>):</span><br><span class="line">            category = get_and_check(obj, <span class="string">&quot;name&quot;</span>, <span class="number">1</span>).text</span><br><span class="line">            <span class="keyword">if</span> category <span class="keyword">not</span> <span class="keyword">in</span> categories:</span><br><span class="line">                new_id = <span class="built_in">len</span>(categories)</span><br><span class="line">                categories[category] = new_id</span><br><span class="line">            category_id = categories[category]</span><br><span class="line">            bndbox = get_and_check(obj, <span class="string">&quot;bndbox&quot;</span>, <span class="number">1</span>)</span><br><span class="line">            xmin = <span class="built_in">int</span>(get_and_check(bndbox, <span class="string">&quot;xmin&quot;</span>, <span class="number">1</span>).text) - <span class="number">1</span></span><br><span class="line">            ymin = <span class="built_in">int</span>(get_and_check(bndbox, <span class="string">&quot;ymin&quot;</span>, <span class="number">1</span>).text) - <span class="number">1</span></span><br><span class="line">            xmax = <span class="built_in">int</span>(get_and_check(bndbox, <span class="string">&quot;xmax&quot;</span>, <span class="number">1</span>).text)</span><br><span class="line">            ymax = <span class="built_in">int</span>(get_and_check(bndbox, <span class="string">&quot;ymax&quot;</span>, <span class="number">1</span>).text)</span><br><span class="line">            <span class="keyword">assert</span> xmax &gt; xmin</span><br><span class="line">            <span class="keyword">assert</span> ymax &gt; ymin</span><br><span class="line">            o_width = <span class="built_in">abs</span>(xmax - xmin)</span><br><span class="line">            o_height = <span class="built_in">abs</span>(ymax - ymin)</span><br><span class="line">            ann = &#123;</span><br><span class="line">                <span class="string">&quot;area&quot;</span>: o_width * o_height,</span><br><span class="line">                <span class="string">&quot;iscrowd&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;image_id&quot;</span>: image_id,</span><br><span class="line">                <span class="string">&quot;bbox&quot;</span>: [xmin, ymin, o_width, o_height],</span><br><span class="line">                <span class="string">&quot;category_id&quot;</span>: category_id,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: bnd_id,</span><br><span class="line">                <span class="string">&quot;ignore&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;segmentation&quot;</span>: [],</span><br><span class="line">            &#125;</span><br><span class="line">            json_dict[<span class="string">&quot;annotations&quot;</span>].append(ann)</span><br><span class="line">            bnd_id = bnd_id + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cate, cid <span class="keyword">in</span> categories.items():</span><br><span class="line">        cat = &#123;<span class="string">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="string">&quot;id&quot;</span>: cid, <span class="string">&quot;name&quot;</span>: cate&#125;</span><br><span class="line">        json_dict[<span class="string">&quot;categories&quot;</span>].append(cat)</span><br><span class="line"></span><br><span class="line">    os.makedirs(os.path.dirname(json_file), exist_ok=<span class="literal">True</span>)</span><br><span class="line">    json_fp = <span class="built_in">open</span>(json_file, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    json_str = json.dumps(json_dict)</span><br><span class="line">    json_fp.write(json_str)</span><br><span class="line">    json_fp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xml_val_files = glob.glob(os.path.join(xml_val, <span class="string">&quot;*.xml&quot;</span>))</span><br><span class="line">xml_test_files = glob.glob(os.path.join(xml_test, <span class="string">&quot;*.xml&quot;</span>))</span><br><span class="line">xml_train_files = glob.glob(os.path.join(xml_train, <span class="string">&quot;*.xml&quot;</span>))</span><br><span class="line"></span><br><span class="line">convert(xml_val_files, coco_json_annotations + <span class="string">&#x27;val2017.json&#x27;</span>)</span><br><span class="line">convert(xml_test_files, coco_json_annotations+<span class="string">&#x27;test2017.json&#x27;</span>)</span><br><span class="line">convert(xml_train_files, coco_json_annotations + <span class="string">&#x27;train2017.json&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蝠鲼项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/08/hello-world/"/>
      <url>/2022/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
