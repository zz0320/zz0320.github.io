<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「Kaggle系列」Happy Whale</title>
      <link href="/2022/05/23/%E3%80%8CKaggle%E7%B3%BB%E5%88%97%E3%80%8DHappy%20Whale/"/>
      <url>/2022/05/23/%E3%80%8CKaggle%E7%B3%BB%E5%88%97%E3%80%8DHappy%20Whale/</url>
      
        <content type="html"><![CDATA[<h2 id="竞赛背景"><a href="#竞赛背景" class="headerlink" title="竞赛背景"></a>竞赛背景</h2><p>我们使用指纹和面部识别来识别人，但我们能对动物使 用类似的方法吗？事实上，研究人员通过海洋生物的尾巴、背鳍、头部和其他身体部位的形状和标记来手动追踪它们。</p><p>建立一个鲸鱼和海豚图像识别的自动化模型，研究人员可以将两者的识别时间减少99%以上。 更有效的识别可以实现以前负担不起或不可能实现的研究规模</p><h2 id="竞赛目的「图像检索」"><a href="#竞赛目的「图像检索」" class="headerlink" title="竞赛目的「图像检索」"></a>竞赛目的「图像检索」</h2><p>开发一个模型，通过鲸鱼和海豚的天然标记的独特但往往微妙的特征来匹配它们。特别关注由28个研究机构建立的多物种数据集中的背鳍和身体侧视图。最好的作品将提出快速和准确的照片识别解决方案。</p><h2 id="比赛数据"><a href="#比赛数据" class="headerlink" title="比赛数据"></a>比赛数据</h2><p>本次竞赛的数据包含了从28个不同研究机构收集的30个不同物种的15000多个独特的海洋哺乳动物个体的图像。</p><p>海洋研究人员已经对个体进行了人工识别并赋予了<strong>individual_id</strong>，而任务是在图像中正确识别这些个体。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2il5sbzndj21810u079k.jpg"></p><table><thead><tr><th align="center">训练集</th><th align="center">测试集</th><th align="center">总数据集</th></tr></thead><tbody><tr><td align="center">51033张</td><td align="center">约28000张图片</td><td align="center">约62GB</td></tr></tbody></table><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2il6i4wkvj21220r8q5x.jpg" style="zoom:50%;" /><table><thead><tr><th align="center">image</th><th align="center">species</th><th align="center">individual_id「预测值」</th></tr></thead><tbody><tr><td align="center">图片ID</td><td align="center">物种</td><td align="center">个体ID</td></tr></tbody></table><blockquote><p>测试数据中有些个体在训练数据中没有观察到，这些个体应该被预测为新个体</p></blockquote><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><p>本次竞赛的评估采用了常见的 MAP@5<br>$$<br>MAP@5 &#x3D; \frac{1}{U}\sum_{u&#x3D;1}^{U}\sum_{k&#x3D;1}^min(n,5)P(k)\times rel(k)<br>$$<br>其中</p><ul><li>$U$是图像的数量</li><li>$P(k)$是预测为$k$图片的精度</li><li>$n$是每个图像的预测数量</li><li>$rel(k)$是一个指标函数，如果$k$图片是正确标签，则等于1，否则等于0</li></ul><p>简单来说可以用下面的表格展示：</p><table><thead><tr><th align="center">真实类别A，预测类别</th><th align="center">得分</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">A, B, C, D, E</td><td align="center">1&#x2F;1</td><td align="center">1</td></tr><tr><td align="center">B, A, C, D, E</td><td align="center">0&#x2F;1+1&#x2F;2</td><td align="center">0.5</td></tr><tr><td align="center">B, C, A, D, E</td><td align="center">0&#x2F;1+0&#x2F;2+1&#x2F;3</td><td align="center">0.3333</td></tr><tr><td align="center">B, C, D, A, E</td><td align="center">0&#x2F;1+0&#x2F;2+0&#x2F;3+1&#x2F;4</td><td align="center">0.25</td></tr><tr><td align="center">B, C, D, E, A</td><td align="center">0&#x2F;1+0&#x2F;2+0&#x2F;3+0&#x2F;4+1&#x2F;5</td><td align="center">0.2</td></tr><tr><td align="center">B, C, D, E, F</td><td align="center">0&#x2F;1+0&#x2F;2+0&#x2F;3+0&#x2F;4+0&#x2F;5</td><td align="center">0</td></tr></tbody></table><p>对于测试集中的每张图片， 最多可以预测 5个individual_id 标签。测试集中有一些个体在训练数据中没有出现，这些个体应该被预测为new_individual</p><p>提交结果文件应包含标题并具有以下格式</p><table><thead><tr><th>image</th><th>predictions</th></tr></thead><tbody><tr><td>000188a72f2562.jpg</td><td>37c7aba965a5 114207cab555 a6e325d8e924 19fbb960f07d new_individual</td></tr><tr><td>000ba09273d6f3.jpg</td><td>37c7aba965a5 114207cab555 a6e325d8e924 19fbb960f07d new_individual</td></tr></tbody></table><h2 id="相关程序"><a href="#相关程序" class="headerlink" title="相关程序"></a>相关程序</h2><h3 id="Arcface-baseline：链接🔗"><a href="#Arcface-baseline：链接🔗" class="headerlink" title="Arcface baseline：链接🔗"></a>Arcface baseline：<a href="https://www.kaggle.com/code/ks2019/happywhale-arcface-baseline-tpu">链接</a>🔗</h3><h3 id="Efficientnet-baseline：链接🔗"><a href="#Efficientnet-baseline：链接🔗" class="headerlink" title="Efficientnet baseline：链接🔗"></a>Efficientnet baseline：<a href="https://www.kaggle.com/code/aikhmelnytskyy/happywhale-arcface-baseline-eff-net-kfold5-0-652">链接</a>🔗</h3><h3 id="Efficient-Cosine-Distance：链接🔗"><a href="#Efficient-Cosine-Distance：链接🔗" class="headerlink" title="Efficient + Cosine Distance：链接🔗"></a>Efficient + Cosine Distance：<a href="https://www.kaggle.com/code/andradaolteanu/whales-dolphins-effnet-embedding-cos-distance">链接</a>🔗</h3><h3 id="Cropped-Image：链接1🔗-链接2🔗"><a href="#Cropped-Image：链接1🔗-链接2🔗" class="headerlink" title="Cropped Image：链接1🔗 链接2🔗"></a>Cropped Image：<a href="https://www.kaggle.com/code/awsaf49/happywhale-cropped-dataset-yolov5">链接1</a>🔗 <a href="https://www.kaggle.com/code/awsaf49/happywhale-boundingbox-yolov5">链接2</a>🔗</h3><h2 id="方案流程"><a href="#方案流程" class="headerlink" title="方案流程"></a>方案流程</h2><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>本次竞赛属于细粒度分类，所以每个ID都至少较少的图片数量，通过数据增强则可以增加每个ID的图片数量，从而达到防止过拟合的效果。</p><h4 id="常见数据增强「混合」"><a href="#常见数据增强「混合」" class="headerlink" title="常见数据增强「混合」"></a>常见数据增强「混合」</h4><p>几何变换：翻转，旋转，裁剪，变形，缩放等各类操作</p><p>颜色变换类：常见的包括噪声、模糊、颜色变换、擦除、填充等等</p><h4 id="本次竞赛方法"><a href="#本次竞赛方法" class="headerlink" title="本次竞赛方法"></a>本次竞赛方法</h4><blockquote><p><a href="https://www.kaggle.com/code/sahamed/eda-visualization-augmentation">链接</a></p></blockquote><ul><li><p>RandomResizedCrop 随机裁剪后固定尺寸</p></li><li><p>VerticalFlip 图片垂直翻转 </p></li><li><p>HorizontalFlip 图片水平翻转 </p></li><li><p>RandomBrightnessContrast 随机亮度、对比度、明度调整 </p></li><li><p>GaussianBlur 高斯模糊 </p></li><li><p>Normalize 归一化 让RGB三色的数值分布接近，可以使得训练更稳定</p></li></ul><h3 id="EfficientNet-EfficientNetV2-L"><a href="#EfficientNet-EfficientNetV2-L" class="headerlink" title="EfficientNet | EfficientNetV2-L"></a>EfficientNet | EfficientNetV2-L</h3><p>EfficientNet使用了compound scaling方法，统一缩放网络深度、宽度和分辨率</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2imr9kvvoj220w0u00wj.jpg"></p><blockquote><p>(a)为baseline网络，(b)、(c)、(d)为单独通过增加width，depth以及resolution使得网络变大的方式，(e)为compound scaling的方式。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2imu016mnj20ox0fqtbe.jpg"></p><p>文中给出了EfficientNet-B0的基准框架，在EfficientNet当中，我们所使用的激活函数是swish激活函数，整个网络分为了9个stage，在第2到第8个stage是一直在堆叠MBConv结构，表格当中MBConv结构后面的数字（1或6）表示的就是MBConv中第一个1x1的卷积层会将输入特征矩阵的channels扩充为n倍。Channels表示通过该Stage后输出特征矩阵的Channels。</p><p><a href="https://arxiv.org/abs/2104.00298">「EfficientNetV2论文」</a> <a href="https://github.com/d-li14/efficientnetv2.pytorch">「代码」</a></p><h3 id="Focal-Loss"><a href="#Focal-Loss" class="headerlink" title="Focal Loss"></a>Focal Loss</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2in3i8dvdj20an09rwfa.jpg"></p><p>在多分类问题中，类别平衡的数据集的目标标签是均匀分布的。若某类目标的样本相比其他类在数量上占据极大优势，则可以将该数据集视为不平衡的数据集。</p><p>这种不平衡将导致两个问题∶</p><ul><li><p>训练效率低下，因为大多数样本都是简单的目标，这些样本在训练中提供给模型不太有用的信息;</p></li><li><p>简单的样本数量上的极大优势会搞垮训练，使模型性能退化。</p></li></ul><p>一种常见的解决方案是执行某种形式的困难样本挖掘， 实现方式就是在训练时选取困难样本或使用更复杂的采样，以及重新对样本加权等方案。</p><p>对具体图像分类问题，对数据增强技术方案变更，以便为样本不足的类创建增强的数据。</p><p>焦点损失函数（Focal loss）旨在通过降低内部加权（简单样本）来解决类别不平衡问题，这样即使简单样本的数量很大，但它们对总损失的贡献却很小。也就是说， 该函数侧重于用困难样本稀疏的数据集来训练。</p><p>作者提出focal loss的出发点也是希望one-stage detector可以达到two-stage detector的准确率，同时不影响原有的速度。</p><p><strong>数据集</strong> </p><p>这个数据及具有极端的类不平衡问题，它包含总共6354407个正常样本和8213个欺诈案例，两者比例约为733：1，显然是非平衡问题</p><p><strong>使用基准模型</strong></p><p>绘制了混淆矩阵来展示模型在测试集上的分类性能。你可以看到总共有1140 + 480 &#x3D; 1620 个样本被错误分类</p><p>本次比赛中，由于数据分布不均匀，Focal loss的效果往往比CrossEntropy loss的效果要好「<a href="https://www.kaggle.com/code/zeta1996/pytorch-lightning-arcface-focal-loss">链接</a>」</p><h3 id="ArcFace"><a href="#ArcFace" class="headerlink" title="ArcFace"></a>ArcFace</h3><blockquote><p><a href="https://arxiv.org/abs/1801.07698">链接</a></p></blockquote><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2in77ryvmj20ab089wen.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2in7e54jxj20df07l3yo.jpg"></th></tr></thead></table><h3 id="GeM-Pooling"><a href="#GeM-Pooling" class="headerlink" title="GeM Pooling"></a>GeM Pooling</h3><blockquote><p><a href="https://arxiv.org/pdf/1711.02512.pdf">GeM Pooling论文</a></p></blockquote><p>介绍GeM Pooling之前，先要介绍一下Average Pooling 和 Max Pooling 。 </p><p>一般来说，当Feature Map中的所有信息都应该有所贡献的时候用Average Pooling ，例如图像分割中常用Global Average Pooling来获取全局上下文关系，再例如224*224图像分类将最后的7*7map进行Average Pooling，是因为网络深层的高级语义信息一般来说都能帮助分类器分类。 </p><p>反之，为了减少无用信息的影响时用Max Pooling ，比如网络浅层常常见到Max Pooling ，因为开始几层对图像而言包含较多的无关信息。 </p><p>另外Average Pooling与Max Pooling输出值会有不同的幅度区间，有些时候会遇到Max Pooling输出值幅度波动大，此时可以加一些归一化操作。二者的具体使用场景只有在具体任务上观察，实际效果炼丹后才知道。</p><p>Generalized Mean Pooling (GeM Pooling)，出现在很多大规模图像检索和识别有关的比赛或者论文中。尝尝使用GeM pooling对backbone最后一层特征进行池化。</p><p>GeM Pooling可以看作Average Pooling和Max Pooling的延申，当p&#x3D;1时，GeM Pooling退化成Average Pooling，当p无穷大时，GeM pooling 等效于Max Pooling. </p><p>池化参数p可以手动设置或学习，因为这个操作是可微分的，可以成为反向传播的一部分。 </p><p>因此，GeM Pooling层是可训练的。人们既可以固定超参数p，也可以使用反向传播来训练 它，作为标准模型训练过程的一部分</p><h3 id="模型融合方法"><a href="#模型融合方法" class="headerlink" title="模型融合方法"></a>模型融合方法</h3><h4 id="Voting"><a href="#Voting" class="headerlink" title="Voting"></a>Voting</h4><p>假如对于一个二分类模型，有3个基础模型，那么就采取投票的方式，投票多者为最终的分类</p><h4 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h4><p>Bagging的思想是利用抽样生成不同的训练集，进而训练不同的模型，将这些模型的输出结果综合（投票或平均的方式）得到最终的结果。 「类似Dropout」</p><p>Bagging本质上是利用了模型的多样性，改善算法整体的效果。Bagging的重点在于不同训练集的生成，这里使用了一种名为Bootstrap的方法，即有放回的重复随机抽样，从而生成不同的数据集。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2inh00neyj20n407pq3o.jpg"></p><h4 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h4><p>Boosting是一种提升算法，其思想是在算法迭代过程中，每次迭代构建新的分类器，重点关注被之前分类器分类错误的样本，如此迭代，最终加权平均所有分类器的结果，从而提升分类精度。 </p><p>Boosting与Bagging相比来说最大的区别就是Boosting是串行的，而Bagging中所有的分类器是可以同时生成的（分类器之间无关系），而Boosting中则必须先生成第一个分类器，然后依次往后进行。核心思想是通过改变训练集进行有针对性的学习，通过每次更新迭代，增加错误样本的权重，减小正确样本的权重。知错就改， </p><p>逐渐变好。典型应用为：Adaboost、GBDT和Xgboost。流程图如下所示：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2injd2bw7j20oe0cf3zp.jpg"></p><h4 id="Blending"><a href="#Blending" class="headerlink" title="Blending"></a>Blending</h4><p>类似概率voting </p><p>用不相交的数据训练不同的Base Model，将它们的输出（概率值）取加权平均。 </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2inkgpke3j20ta0ae0u5.jpg"></p><h4 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2inqaq1slj21f80gkdlp.jpg"></p><p>交叉验证部分：首先将训练数据分为 5 份，接下来一共 5 个迭代，每次迭代时，将 4 份数据作为 Training Set 对每个 Base Model 进行训练，然后在剩下一份 Hold-out Set上进行预测。同时也要将其在测试数据上的预测保存下来，对测试数据的全部做出预测。（test预测矩阵1） </p><blockquote><p>5个迭代都完成以后我们就获得了一个 训练数据行数 x Base Model 数量 的矩阵，这个矩阵接下来作为第二层的Model的训练数 据，训练完以后，对test data做预测。（test预测矩阵2） </p></blockquote><p>这时我们得到了两个预测矩阵，平均后就得到最后的输出</p><h3 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Kaggle系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「分割项目」（三）基于BiSeNet的网页端人像分割任务</title>
      <link href="/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8EBiSeNet%E7%9A%84%E4%BA%BA%E5%83%8F%E5%88%86%E5%89%B2%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8EBiSeNet%E7%9A%84%E4%BA%BA%E5%83%8F%E5%88%86%E5%89%B2%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="BiSeNet模型介绍"><a href="#BiSeNet模型介绍" class="headerlink" title="BiSeNet模型介绍"></a>BiSeNet模型介绍</h2><blockquote><p>「<a href="https://zhuanlan.zhihu.com/p/41475332">参考文章</a>」</p></blockquote><p>BiSeNet分析了模型结构层面加速的方法，并提出双分支的BiSeNet来加速</p><h3 id="在输入和模型上改动"><a href="#在输入和模型上改动" class="headerlink" title="在输入和模型上改动"></a>在输入和模型上改动</h3><p>原始图像resize缺点：丢失空间信息（spatial information ）</p><p>删减网络层，以提速缺点：模型容量下降，精度降低</p><span id="more"></span><h3 id="在结构上改动"><a href="#在结构上改动" class="headerlink" title="在结构上改动"></a>在结构上改动</h3><p>U型弥补丢失的空间信息的缺点：慢！</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hjq8b3jwj20zk0etgnv.jpg"></p><p>BiSeNet主要有两大分支构成，分别是<strong>Spatial分支</strong>和<strong>Context分支</strong></p><p><strong>Spatial分支</strong>采用小步长的策略，少降低分辨率，以保留更多空间信息</p><p><strong>Context分支</strong>采用快速下降分辨率的策略，使特征具有丰富的感受野最后利用特征融合模块FFM，将两个分支特征进行融合即可输出</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hjr92kljj20k00nomz4.jpg" style="zoom:50%;" /><p>ARM：Attention Refinment Module注意力机制模块</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hjrxi3oej20zk0g3ta1.jpg" style="zoom: 33%;" /><p>FFM：Feature Fusion Module，特征融合模块，设计一个能将特征图融合在一起的模块</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hjs9dnt1j20zk0fv403.jpg" style="zoom: 33%;" /><p>辅助损失：在Context分支输出的特征图直接用于计算分割结果，而Feature map 输入到一个conv层用于输出分割结果</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hk5l3ar7j20k00p20tv.jpg" style="zoom: 33%;" />$$L(X;W) = l_p(X;W) + \alpha \sum_{i=2}^{K}l_i(X_i;W)$$<h2 id="人像分割数据集"><a href="#人像分割数据集" class="headerlink" title="人像分割数据集"></a>人像分割数据集</h2><h3 id="Portrait-Dataset-2000「链接🔗」"><a href="#Portrait-Dataset-2000「链接🔗」" class="headerlink" title="Portrait Dataset 2000「链接🔗」"></a>Portrait Dataset 2000「<a href="http://www.cse.cuhk.edu.hk/~leojia/projects/automatting/index.html">链接</a>🔗」</h3><p>Portrait 数据集由香港中文大学于2016年发布，是当前标注质量较高的数据集之一。共有2000张自拍人像图像，1700训练、300测试</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hkf9crvtj20k00ka76o.jpg" style="zoom:50%;" /><h3 id="Portrait-Dataset-34427「-链接-https-github-com-aisegmentcn-matting-human-datasets"><a href="#Portrait-Dataset-34427「-链接-https-github-com-aisegmentcn-matting-human-datasets" class="headerlink" title="Portrait Dataset 34427「[链接](https://github.com/aisegmentcn/matting_human_datasets"></a>Portrait Dataset 34427「[链接](<a href="https://github.com/aisegmentcn/matting_human_datasets">https://github.com/aisegmentcn/matting_human_datasets</a></h3><p>)🔗」</p><p>由北京玩星汇聚科技有限公司高质量标注，原始图片来源于Flickr、百度、淘宝。经过人脸检测和区域裁剪后生成了600*800的半身人像。</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hkhip0rnj20nb0k00vg.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hki1lxs8j20nu0k076q.jpg"></th></tr></thead></table><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>图像分割任务中，损失函数是一大研究方向，主要以「**基于数据分布的$CE$<strong>」和 「</strong>基于区域的$Dice$**」为基础进行展开</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hmq8ya63j20zk0i1whm.jpg" style="zoom:67%;" /><h3 id="Dice-Loss"><a href="#Dice-Loss" class="headerlink" title="Dice Loss"></a>Dice Loss</h3><p>$Dice Loss$ 来自<a href="https://arxiv.org/abs/1606.04797">文献</a>，是从Dice系数推广得到的损失函数。</p><p>$Dice$ 系数是一种集合相似度度量函数，是从<strong>区域角度</strong>衡量两个集合的相似度。（$CE Loss$是从概率分布角度）</p><p>$Dice$ 系数值域为 $[0, 1]$ ，两个集合完全重叠时为$1$， 完全不重叠时为$0$，计算公式如下<br>$$<br>Dice &#x3D; \frac{2TP}{FP + 2TP + FN} \Leftrightarrow  \frac{2*gtmask\cap predmask}{gtmask + predmask}<br>$$<br><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hn1oplx2j20qb0k00ue.jpg" style="zoom:50%;" /></p><p>具体来讲<br>$$<br>Dice Loss &#x3D; 1 - \frac{2|A\cap B|}{|A| + |B|}<br>$$<br>值域$[0, 1]$，loss值越小，重合程度越高；</p><p>分母的计算：$|A|$和$|B|$分别表示$A$ 、$B$的元素值之和</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hnn177m4j20zk0g1gmg.jpg" style="zoom: 33%;" /><p>分子的计算：$A$ 、$B$的交集，用点乘，</p><p>$Soft Dice Loss$：Prediction不将它们转换为二进制mask</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hnowwhtrj20zk06owez.jpg"></p><h3 id="CE-Dice-Loss"><a href="#CE-Dice-Loss" class="headerlink" title="CE + Dice Loss"></a>CE + Dice Loss</h3><p>采用$CE + Dice$ ，权重比例$1:1$</p><p>从<strong>概率分布</strong>和<strong>区域</strong>两个角度衡量模型</p><h3 id="Focal-Loss「链接🔗」"><a href="#Focal-Loss「链接🔗」" class="headerlink" title="Focal Loss「链接🔗」"></a>Focal Loss「<a href="https://arxiv.org/abs/1708.02002">链接</a>🔗」</h3><p>$Focal Loss$：针对Two-Stage目标检测RPN网络中<strong>正负样本严重不均衡</strong>及<strong>困难样本</strong>提出的Loss</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hnri2npkj20tg0k00wd.jpg" style="zoom:33%;" /><p>解决不均衡：增加类别权重 $\alpha_t$<br>$$<br>CE(p_t) &#x3D; -\alpha_t log(p_t)<br>$$<br>解决困难样本：增加难度权重 $\gamma$<br>$$<br>FL(p_t) &#x3D; -(1 - p_t)^\gamma log(p_t)<br>$$</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hnux5dalj20w00k040s.jpg" style="zoom: 33%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hnw7rifmj20zk0dlmzt.jpg" style="zoom:50%;" /></th></tr></thead></table><p>$$<br>FL_{综合}(p_t) &#x3D; - \alpha_t ·(1-p_t)^\gamma · log(p_t)<br>$$</p><p>其中 $\alpha_t$为<strong>类别权重</strong>，$(1-p_t)^\gamma$为<strong>难度权重</strong></p><h2 id="学习率调整策略"><a href="#学习率调整策略" class="headerlink" title="学习率调整策略"></a>学习率调整策略</h2><p>良好的学习率调整可直接影响模型精度：基本原则从稳定状态逐步降低学习率</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i5qq3pxzj20vy0k0dhh.jpg" style="zoom: 50%;" /><h3 id="Warmup-Cosine"><a href="#Warmup-Cosine" class="headerlink" title="Warmup + Cosine"></a>Warmup + Cosine</h3><p>每个iteration逐渐增大至初始学习率，然后余弦下降至终止学习率</p><p>​batches：一个Epoch对应几个iteration</p><p>​max_epochs：总共跑几个Epoch</p><p>​base_lr：初始学习率</p><p>​final_lr：终止学习率</p><p>​warmup_epochs：warmup多久</p><p>​warmup_init_lr：warmup初始学习率是多少</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i5pkk8kuj20uf0k075d.jpg" style="zoom: 50%;" /><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><h3 id="数据增强工具-Albumentations「-官网-https-albumentations-ai"><a href="#数据增强工具-Albumentations「-官网-https-albumentations-ai" class="headerlink" title="数据增强工具-Albumentations「[官网](https://albumentations.ai/"></a>数据增强工具-Albumentations「[官网](<a href="https://albumentations.ai/">https://albumentations.ai/</a></h3><p>)」「<a href="https://github.com/albumentations-team/albumentations">GitHub</a>」</p><p>PyTorch提供的transforms模块大部分不适用于图像分割及目标检测任务</p><p>图像分割和目标检测，在进行空间变换，需要对图像和标签做相同的变换</p><p>Albumentations——广泛应用于工业界、学术界、AI竞赛和开源项目中的CV数据增强工具</p><p>​适用任务：图像分类、图像分割、目标检测、实例分割等</p><p>​适用领域：自然图像、医疗影像、卫星图像、工业图像等</p><p>​无缝衔接：可无缝衔接PyTorch、Keras框架</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i5xch4vsj20r00k0419.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i5xh29n5j20qx0k0wi6.jpg"></th></tr></thead></table><h4 id="Pixel-level"><a href="#Pixel-level" class="headerlink" title="Pixel level"></a>Pixel level</h4><table><thead><tr><th><img src="/Users/kenton/Library/Application Support/typora-user-images/image-20220523111250059.png" style="zoom: 50%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i60hzctuj20k00xzmzd.jpg" style="zoom: 67%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i60o4aesj20k00kct9z.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i60vjb48j20ks0k0dgn.jpg"></th></tr></thead></table><h4 id="Spatial-level"><a href="#Spatial-level" class="headerlink" title="Spatial level"></a>Spatial level</h4><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i61rhdi1j20k00rxq4a.jpg" style="zoom:67%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6205jehj20k00sfdh9.jpg" style="zoom:67%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i627k45zj20k00snq4y.jpg" style="zoom:67%;" /></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i62est1tj20k00m6wfg.jpg" style="zoom:67%;" /></th></tr></thead></table><h4 id="Albumentations-图像分割使用逻辑"><a href="#Albumentations-图像分割使用逻辑" class="headerlink" title="Albumentations 图像分割使用逻辑"></a>Albumentations 图像分割使用逻辑</h4><p>定义好一系列transform方法；同时传入image和mask；返回字典，通过”image”和“mask”获得处理后的数据</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i63do3hjj20zi0k0765.jpg" style="zoom:67%;" /><h4 id="图像分割常用数据增强方法"><a href="#图像分割常用数据增强方法" class="headerlink" title="图像分割常用数据增强方法"></a>图像分割常用数据增强方法</h4><h5 id="色彩扰动"><a href="#色彩扰动" class="headerlink" title="色彩扰动"></a>色彩扰动</h5><p>ColorJitter (brightness&#x3D;0.2, contrast&#x3D;0.2, saturation&#x3D;0.2, hue&#x3D;0.2, always_apply&#x3D;False, p&#x3D;0.5)</p><p>参数：</p><p>​brightness: 亮度的偏移幅度。图像给人的直观感受，如果是灰度图像，灰度值越高则图像越亮。</p><p>​contrast: 对比度偏移幅度。不同颜色最亮处和最暗处之间的差别，影响纹理细节。</p><p>​saturation：饱和度偏移幅度。饱和度越高，颜色表现越丰富。</p><p>​hue：色相偏移幅度。</p><p>亮度、对比度和饱和度是数字图像处理中常用概念。 夜晚场景，亮度偏低；雨雾天对比度低</p><h5 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h5><p>Affine (scale&#x3D;None, translate_percent&#x3D;None, translate_px&#x3D;None, rotate&#x3D;None, shear&#x3D;None, interpolation&#x3D;1, cval&#x3D;0, cval_mask&#x3D;0, mode&#x3D;0, fit_output&#x3D;False, always_apply&#x3D;False, p&#x3D;0.5)</p><p>参数：</p><p>​rotate：旋转角度， int or tuple</p><p>​shear: 错切，int or tuple</p><p>​translate_percent：平移，int or tuple</p><p>​scale：缩放， int or tuple</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6bl6su6j20r30k0wfd.jpg" style="zoom:33%;" /><h5 id="弹性变换"><a href="#弹性变换" class="headerlink" title="弹性变换"></a>弹性变换</h5><p>ElasticTransform (alpha&#x3D;1, sigma&#x3D;50, alpha_affine&#x3D;50, interpolation&#x3D;1, border_mode&#x3D;4, value&#x3D;None, mask_value&#x3D;None, always_apply&#x3D;False, approximate&#x3D;False, p&#x3D;0.5)</p><p>过程: </p><p>（1）每个像素点(x, y)产生两个-1~1之间的随机数，Δx(x,y)和Δy(x,y)，分别表示该像素点的x方向和y方向的移动距离；</p><p>（2）生成一个以0为均值，以σ为标准差的高斯核k_nn，并用前面的随机数与之做卷积，并将结果作用于原图像。</p><p>使用指导：alpha越小，sigma越大，产生的偏差越小，和原图越接近</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6cui1iyj20k00k8402.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6cy80bwj20k00kptab.jpg"></th></tr></thead></table><h3 id="额外数据训练"><a href="#额外数据训练" class="headerlink" title="额外数据训练"></a>额外数据训练</h3><h4 id="加入Portrait-Dataset-34427"><a href="#加入Portrait-Dataset-34427" class="headerlink" title="加入Portrait Dataset 34427"></a>加入Portrait Dataset 34427</h4><p>基于Portrait Dataset 2000可考虑增加Portrait Dataset 34427数据集训练</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6maabzdj20k00ka76o.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i6mha97nj20nb0k00vg.jpg"></th></tr></thead></table><p>$$<br>PortraitDataSet2000+PortraitDataSet34427&#x3D;NewDataSet(concat)<br>$$</p><h4 id="基于COCO自制数据集"><a href="#基于COCO自制数据集" class="headerlink" title="基于COCO自制数据集"></a>基于COCO自制数据集</h4><p>MS COCO的全称是Microsoft Common Objects in Context，起源于微软于2014年出资标注的Microsoft COCO数据集，数据集以scene understanding为目标。目前为止有语义分割的最大数据集，提供的类别有80 类，有超过33 万张图片，其中20 万张有标注，整个数据集中个体的数目超过150 万个。</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i70dea2mj20zk0d70vp.jpg" style="zoom:33%;" /><p>常用数据集为 coco2017， 其中训练集118287张图片，验证集有5000张图片物体的标注分为supercategory「超类」 和 category「类」</p><p>$前景图片* \alpha +背景* (1-\alpha) &#x3D;新图像$ </p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i74bws0dj20k00qnmzi.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i74fflk4j20k00qowg4.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i74eig6xj20k00qoabl.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i74dzwlcj20k00qo75d.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i74d20x4j20k00qo40w.jpg"></th></tr></thead></table><p>背景图片挑选：尽量符合真实场景，室内照片或者室外照片，不能出现人物</p><h2 id="模型封装"><a href="#模型封装" class="headerlink" title="模型封装"></a>模型封装</h2><blockquote><p>面向对象三大特性之一</p></blockquote><p>面向对象（Object Oriented Programming）三大特性</p><p>​1.封装（Encapsulation）：隐藏对象的属性和实现细节，仅对外提供公共访问方式</p><p>​2.继承（Inheritance）：使用已存在的类的定义作为基础建立新类的方法</p><p>​3.多态（Polymorphism）：”多种状态”，接口的多种不同的实现方式即为多态</p><p><strong>封装好处</strong>：</p><p>​1.隐藏实现细节，提供公共的访问方式</p><p>​2.提高了代码的复用性</p><p>​3.提高安全性</p><p><strong>封装原则</strong>：</p><p>​1.将不需要对外提供的内容都隐藏起来</p><p>​2.把属性隐藏，提供公共方法对其访问</p><h2 id="TTA（测试时数据增强）"><a href="#TTA（测试时数据增强）" class="headerlink" title="TTA（测试时数据增强）"></a>TTA（测试时数据增强）</h2><p>测试时将原始数据做不同形式的增强,然后取结果的平均值作为最终结果</p><p>可以进一步提升最终结果的精度，使模型输出更稳定</p><h3 id="AlexNet-的TTA方法"><a href="#AlexNet-的TTA方法" class="headerlink" title="AlexNet 的TTA方法"></a>AlexNet 的TTA方法</h3><p>​1.图片统一缩放至256*256</p><p>​2.左上、右上、左下、右下、中心裁剪出5个224*224区域</p><p>​3.均进行水平翻转，共得到10张224*224图片</p><p>​4.对10张图片进行推理，得到10个分类概率后取平均值输出</p><h3 id="图像分割的TTA"><a href="#图像分割的TTA" class="headerlink" title="图像分割的TTA"></a>图像分割的TTA</h3><p>旋转、翻转、缩放、像素扰动等</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i7jqcqcrj20zk0ab0u4.jpg" style="zoom:50%;" /><h3 id="PyTorch的TTA工具——TTAch"><a href="#PyTorch的TTA工具——TTAch" class="headerlink" title="PyTorch的TTA工具——TTAch"></a>PyTorch的TTA工具——TTAch</h3><p>TTAch工具库是一个PyTorch的TTA工具，可实现图像分类、图像分割、关键点检测的TTA方法「<a href="https://github.com/qubvel/ttach">源代码</a>」</p><h4 id="TTAch使用逻辑"><a href="#TTAch使用逻辑" class="headerlink" title="TTAch使用逻辑"></a>TTAch使用逻辑</h4><p>定义transforms方法将原模型与transforms绑定，生成新模型（nn.Module）</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i7mltxx3j20x30k00uh.jpg" style="zoom:33%;" /><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>在forward中依次执行各transforms原模型forward反变换mask收集结果，输出</p><h2 id="推理内存分析"><a href="#推理内存分析" class="headerlink" title="推理内存分析"></a>推理内存分析</h2><h3 id="PyTorch的内存分析"><a href="#PyTorch的内存分析" class="headerlink" title="PyTorch的内存分析"></a>PyTorch的内存分析</h3><h4 id="占用显存的数据"><a href="#占用显存的数据" class="headerlink" title="占用显存的数据"></a>占用显存的数据</h4><p>​<strong>模型参数weights</strong>：卷积核权重、BN层的α和β、FC层的权重等</p><p>​<strong>模型中间变量</strong>：feature maps</p><p>​<strong>输入输出数据</strong>：input_tensor, outputs_tensor</p><p>值得注意的是，With no_grad() 可解决模型中间变量的占用：是一个上下文管理器,被该语句 wrap 起来的部分将不会track梯度</p><p>中间部分缓存可通过：torch.cuda.empty_cache()删除</p><h2 id="Badcase分析"><a href="#Badcase分析" class="headerlink" title="Badcase分析"></a>Badcase分析</h2><p>训练集的分析作用：剔除异常样本，避免这些样本把模型带偏，就像考试题中的超纲题</p><p>测试集的分析作用：归纳总结哪一类的数据分布好，针对性的做数据增强或者Trick的设计</p><p>​如光照差的图像表现不好，考虑调整亮度</p><p>​背景与人物模糊的图像，考虑加高斯模糊</p><p>​从训练集中找出“样本不均衡”的数据，进行数据增强，如孔洞、头发丝较多等图像进行Fusion操作，增加训练集</p><h2 id="模型提交"><a href="#模型提交" class="headerlink" title="模型提交"></a>模型提交</h2><p>最优的模型：<strong>采用训练集+验证集训练模型</strong></p><p>验证集的作用是调参，当参数确定后，需把手中所有数据用于模型训练，得到最终提交的模型</p><h2 id="基于Flask将模型部署到web上"><a href="#基于Flask将模型部署到web上" class="headerlink" title="基于Flask将模型部署到web上"></a>基于Flask将模型部署到web上</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>Flask诞生于2010年，是基于Python编写的轻量级Web开发框架Web完成Server框中间的内容</p><p>利用Flask实现Web后端服务，需要两步：</p><p>​1.设置网址：url </p><p>​2.设置url响应：响应可能较为复杂，通常通过一个功能函数实现</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i99mh27pj20zk0je75x.jpg" style="zoom:50%;" /><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>给<strong>原函数</strong>增加<strong>额外功能</strong>，额外功能“装饰”原函数</p><p>装饰，就是装点、提供一些额外的点缀。在 Python 中的装饰器则是提供了一些额外的功能。例如：计算执行函数所需的时间</p><p>装饰器是一个函数，它接收函数，内部定义新函数，并返回新函数</p><p>装饰器工作逻辑是：当编译器遇到@XXX时，就会将原函数进行装饰，可理解为原函数在编译阶段即被编译器“替换”为装饰器返回的那个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo_decorator</span>(<span class="params">seconds</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo_decorator</span>(<span class="params">seconds</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">foo_decorator = clock(foo_decorator)</span><br></pre></td></tr></table></figure><h3 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h3><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>HTTP，Hypertext Transfer Protocol，超文本传输协议是基于“请求与响应”模式的应用层协议</p><p>HTTP协议采用<strong>URL</strong>（Uniform Resource Locator,统一资源定位器）作为<strong>定位网络资源的标识</strong>，URL格式如下：<br>$$<br><a href="https://host[:port][path]">https://host[:port][path]</a><br>$$<br>$host$: 合法的Internet主机域名或IP地址</p><p>$port$: 端口号，缺省端口为80</p><p>$path$: 请求资源的路径HTTP</p><p>URL的理解：URL是路径：URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i9vww0iaj20xw0k0dhp.jpg" style="zoom:50%;" /><h4 id="Python的HTTP库——Requests"><a href="#Python的HTTP库——Requests" class="headerlink" title="Python的HTTP库——Requests"></a>Python的HTTP库——Requests</h4><p>Requests库是Python的简易HTTP协议操作库</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i9xjyxyuj20zk0j478m.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2i9xngyfjj20zk0d7ju5.jpg"></th></tr></thead></table><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>代码框架如下：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ic4tsrugj20lk0p0jsy.jpg"></p><p>代码开源在<strong>GitHub，<a href="https://github.com/zz0320/Portrait_Seg_Flask">点击链接</a>查看</strong></p><h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><blockquote><p>不同输入分辨率下训练BiSeNet，mIoU变化，如112*112,224*224,448*448,512*512等</p></blockquote><p>训练参数</p><table><thead><tr><th>参数类别</th><th>参数值</th></tr></thead><tbody><tr><td>train_bs</td><td>6</td></tr><tr><td>valid_bs</td><td>2</td></tr><tr><td>workers</td><td>16</td></tr><tr><td>lr_init</td><td>0.01</td></tr><tr><td>factor</td><td>0.1</td></tr><tr><td>milestones</td><td>[25, 45]</td></tr><tr><td>weight_decay</td><td>0.0005</td></tr><tr><td>momentum</td><td>0.9</td></tr><tr><td>log_interval</td><td>10</td></tr><tr><td>bce_pos_weight</td><td>Tensor(0.7500)</td></tr></tbody></table><table><thead><tr><th>训练分辨率</th><th>Train_Acc</th><th>Valid_Acc</th><th>Train_loss&#x2F;Train_miou</th><th>Valid_loss&#x2F;Valid_miou</th><th>Epoch</th></tr></thead><tbody><tr><td>112</td><td>98.29%</td><td>96.94%</td><td>0.0405&#x2F;0.9676</td><td>0.0786&#x2F;<strong>0.9504</strong></td><td>24</td></tr><tr><td>224</td><td>99.01%</td><td>97.74%</td><td>0.0317&#x2F;0.9817</td><td>0.0644&#x2F;<strong>0.9645</strong></td><td>29</td></tr><tr><td>448</td><td>99.30%</td><td>98.06%</td><td>0.0288&#x2F;0.9872</td><td>0.0650&#x2F;<strong>0.9697</strong></td><td>43</td></tr><tr><td>512</td><td>99.24%</td><td>97.97%</td><td>0.0300&#x2F;0.9863</td><td>0.0648&#x2F;<strong>0.9691</strong></td><td>19</td></tr></tbody></table><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a><strong>测试二</strong></h3><blockquote><p>不同loss测试</p></blockquote><table><thead><tr><th>模型</th><th>mIoU</th><th>升降</th></tr></thead><tbody><tr><td>BCE pos_weight &#x3D; 1</td><td>best_miou: 0.9659 in :46</td><td>N&#x2F;A</td></tr><tr><td>BCE pos_weight &#x3D; 0.55</td><td>best_miou: 0.9622 in :9</td><td>-0.38%</td></tr><tr><td>focal loss alpha&#x3D;0.5 gamma&#x3D;0.5</td><td>best_miou: 0.9644 in :22</td><td>-0.15%</td></tr><tr><td>BCE&amp;dice</td><td>best_miou: 0.9659 in :16</td><td>0%</td></tr><tr><td>dice</td><td>best_miou: 0.9658 in :11</td><td>-0.01%</td></tr></tbody></table><h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3><blockquote><p>采用colorjitter、水平翻转 、旋转一定角度进行训练，观察模型分割结果，分析是否存在问题</p></blockquote><table><thead><tr><th>模型</th><th>mIoU.img</th><th>mIoU</th></tr></thead><tbody><tr><td>BaselineBCE weight 0.75</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2iclshq1vj213x0u0mxz.jpg"></td><td>best_miou: 0.9651 in :26</td></tr><tr><td>水平翻转A.HorizontalFlip(p&#x3D;1)</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2icltpeihj213x0u0js9.jpg"></td><td>best_miou: 0.9643 in :40</td></tr><tr><td>旋转一定角度A.IAAAffine(rotate&#x3D;(-10, 10), p&#x3D;1</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2iclxx5hfj21400u075a.jpg"></td><td>best_miou: 0.9640 in :41</td></tr><tr><td>色彩扰动A.ColorJitter(brightness&#x3D;0.1, contrast&#x3D;0.2, saturation&#x3D;0.2, hue&#x3D;0.2, p&#x3D;1)</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2icm24007j21400u0aaz.jpg"></td><td>best_miou: 0.9630 in :46</td></tr><tr><td>色彩扰动A.ColorJitter(brightness&#x3D;0.2, contrast&#x3D;0.2, saturation&#x3D;0.2, hue&#x3D;0.2, p&#x3D;1)</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2icm5vgmjj213z0u0dgs.jpg"></td><td>best_miou: 0.9627 in :48</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 分割项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「分割项目」（二）基于自动驾驶CamVid数据集的分割任务</title>
      <link href="/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6CamVid%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%86%E5%89%B2%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6CamVid%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%86%E5%89%B2%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="CamVid数据集介绍"><a href="#CamVid数据集介绍" class="headerlink" title="CamVid数据集介绍"></a>CamVid数据集介绍</h2><p>CamVid驾驶场景数据集，收集了701张驾驶场景语义分割图像，划分为<strong>训练</strong>、<strong>验证</strong>和<strong>测试</strong>，分别有367、101和233个样本</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbmhcm0wj20tx0k0dj5.jpg" style="zoom:67%;" /><span id="more"></span><h2 id="分割模型选择"><a href="#分割模型选择" class="headerlink" title="分割模型选择"></a>分割模型选择</h2><h3 id="SegNet"><a href="#SegNet" class="headerlink" title="SegNet"></a>SegNet</h3><h4 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h4><p>VGG16 &#x2F; Encoder-Decoder &#x2F; 带索引的最大池化上采样</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2he3khqu6j20zk0bkdig.jpg"></p><p>带索引的最大池化上采样：记录下采样过程的indices，在上采样过程中使用，以提供位置信息</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2he43aq3jj20zk0dfgn0.jpg" style="zoom:67%;" /><h4 id="其他上采样组件"><a href="#其他上采样组件" class="headerlink" title="其他上采样组件"></a>其他上采样组件</h4><p>UnPooling：反池化，带索引的反池化</p><p>插值运算：最近邻插值，双线性插值，双三次插值等</p><p>Transposed conv: 转置卷积，卷积核矩阵的shape进行了转置而得名</p><h2 id="寻找最佳学习率"><a href="#寻找最佳学习率" class="headerlink" title="寻找最佳学习率"></a>寻找最佳学习率</h2><blockquote><p><a href="https://arxiv.org/abs/1506.01186">参考文章《Cyclical Learning Rates for Training Neural Networks》</a></p><p><a href="https://github.com/vmbbc/pytorch-lr-finder">参考代码</a></p></blockquote><p>文章中提出了一种寻找最优学习率的方法，可适用于各类神经网络的初始学习率设置每个Iteration逐渐增加学习率，观察loss的变化选择一个损失下降最快的点对应的学习率</p><p>选择一个<strong>损失下降最快点对应的LR</strong>：观察Loss 梯度，得到梯度滑动平均图，找到下降最快的地方，从下图例可知道0.01的LR是对应损失下降最快的LR</p><table><thead><tr><th>Loss梯度图</th><th>Loss梯度滑动平均图</th></tr></thead><tbody><tr><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2heg5db1gj20v30k00uw.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2heiokcisj20u90k00tn.jpg"></td></tr></tbody></table><p>下图为SegNet在CamVid上的区间测试结果</p><p>LR Finder会自动计算最优学习率为<strong>steepest gradient（陡峭的梯度）</strong></p><p>对应的学习率为<strong>Suggested LR: 4.33E-01</strong></p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hei5y43jj20ql0k03z8.jpg" style="zoom: 50%;" /><h2 id="梯度裁剪"><a href="#梯度裁剪" class="headerlink" title="梯度裁剪"></a>梯度裁剪</h2><h3 id="梯度激增问题"><a href="#梯度激增问题" class="headerlink" title="梯度激增问题"></a>梯度激增问题</h3><p>训练SegResnet-50过程中有时候会出现loss激增的现象，通常是因为出现梯度过大导致的不稳定，可通过梯度裁剪来稳定模型训练</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hexbngo5j20qo0k0mxs.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hexgdedtj20qo0k0t9k.jpg"></th></tr></thead></table><h3 id="梯度裁剪-1"><a href="#梯度裁剪-1" class="headerlink" title="梯度裁剪"></a>梯度裁剪</h3><p>PyTorch提供了两个梯度裁剪函数</p><p>clip_grad_norm_ ：Clips gradient norm of an iterable of parameters.</p><p>clip_grad_value_ :Clips gradient of an iterable of parameters at specified value.</p><p>裁剪思路：统计模型训练过程中的梯度的直方图，设定clip的阈值</p><p>例：clip_value :0.5，0.3仍激增</p><p>当调整为0.2时如下所示，mIoU从0.6025下降到0.5982</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hf0z7oxdj20qo0k0gly.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hf140i1tj20qo0k03z4.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hf192jy2j20qo0k0q3p.jpg"></th></tr></thead></table><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="bins-x2F-lr-range-test-py"><a href="#bins-x2F-lr-range-test-py" class="headerlink" title="bins&#x2F;lr_range_test.py"></a>bins&#x2F;lr_range_test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : lr_range_test.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-04-17</span></span><br><span class="line"><span class="string"># @brief      : lr 区间测试脚本</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;agg&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> datasets.camvid_dataset <span class="keyword">import</span> CamvidDataset</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> setup_seed, show_confMat, plot_line, Logger, check_data_dir</span><br><span class="line"><span class="keyword">from</span> config.camvid_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> models.deeplabv3_plus <span class="keyword">import</span> DeepLabV3Plus</span><br><span class="line"><span class="keyword">from</span> models.unet <span class="keyword">import</span> UNet, UNetResnet</span><br><span class="line"><span class="keyword">from</span> models.segnet <span class="keyword">import</span> SegNet, SegResNet</span><br><span class="line"><span class="keyword">from</span> torch_lr_finder <span class="keyword">import</span> LRFinder</span><br><span class="line"></span><br><span class="line">setup_seed(<span class="number">12345</span>)  <span class="comment"># 先固定随机种子</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;learning rate&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--max_epoch&#x27;</span>, default=<span class="literal">None</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--train_bs&#x27;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--data_root_dir&#x27;</span>, default=<span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/camvid_from_paper&quot;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;path to your dataset&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">cfg.lr_init = args.lr <span class="keyword">if</span> args.lr <span class="keyword">else</span> cfg.lr_init</span><br><span class="line">cfg.train_bs = args.train_bs <span class="keyword">if</span> args.train_bs <span class="keyword">else</span> cfg.train_bs</span><br><span class="line">cfg.max_epoch = args.max_epoch <span class="keyword">if</span> args.max_epoch <span class="keyword">else</span> cfg.max_epoch</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置路径</span></span><br><span class="line">    path_model_50 = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet50-19c8e357.pth&quot;</span> <span class="comment"># segnet</span></span><br><span class="line">    path_model_101 = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet101s-03a0f310.pth&quot;</span>  <span class="comment"># deeplab</span></span><br><span class="line">    path_model_50s = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet50s-a75c83cf.pth&quot;</span>  <span class="comment"># unet</span></span><br><span class="line">    path_model_vgg = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/vgg16_bn-6c64b313.pth&quot;</span></span><br><span class="line">    <span class="comment"># ------------------------------------ step 1/5 : 加载数据------------------------------------</span></span><br><span class="line">    <span class="comment"># 构建Dataset实例</span></span><br><span class="line">    root_dir = args.data_root_dir</span><br><span class="line">    train_img_dir = os.path.join(root_dir, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    train_lable_dir = os.path.join(root_dir, <span class="string">&#x27;train_labels&#x27;</span>)</span><br><span class="line">    path_to_dict = os.path.join(root_dir, <span class="string">&#x27;class_dict.csv&#x27;</span>)</span><br><span class="line">    check_data_dir(train_img_dir)</span><br><span class="line">    check_data_dir(train_lable_dir)</span><br><span class="line"></span><br><span class="line">    train_set = CamvidDataset(train_img_dir, train_lable_dir, path_to_dict, cfg.crop_size)</span><br><span class="line"></span><br><span class="line">    train_loader = DataLoader(train_set, batch_size=cfg.train_bs, shuffle=<span class="literal">True</span>, num_workers=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 2/5 : 定义网络------------------------------------</span></span><br><span class="line">    model = SegNet(num_classes=train_set.cls_num, path_model=path_model_vgg)</span><br><span class="line">    <span class="comment"># model = SegResNet(num_classes=train_set.cls_num, path_model=None)</span></span><br><span class="line">    <span class="comment"># model = UNet(num_classes=train_set.cls_num)</span></span><br><span class="line">    <span class="comment"># model = DeepLabV3Plus(num_classes=train_set.cls_num, path_model=path_model)</span></span><br><span class="line">    model.to(cfg.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 3/5 : 定义损失函数和优化器 ------------------------------------</span></span><br><span class="line">    loss_f = nn.CrossEntropyLoss().to(cfg.device)</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-3</span>, weight_decay=<span class="number">1e-4</span>)</span><br><span class="line">    <span class="comment"># ------------------------------------ step 4/5 : 训练 --------------------------------------------------</span></span><br><span class="line">    <span class="comment"># 接口：data loader、model、optimizer、loss_f</span></span><br><span class="line">    lr_finder = LRFinder(model, optimizer, loss_f, device=cfg.device)</span><br><span class="line">    lr_finder.range_test(train_loader, end_lr=<span class="number">100</span>, num_iter=<span class="number">100</span>)</span><br><span class="line">    lr_finder.plot()  <span class="comment"># to inspect the loss-learning rate graph</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bins-x2F-segnet-inference-py"><a href="#bins-x2F-segnet-inference-py" class="headerlink" title="bins&#x2F;segnet_inference.py"></a>bins&#x2F;segnet_inference.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : segnet_inference.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-04-17</span></span><br><span class="line"><span class="string"># @brief      : 前向推理代码 + 结果输出</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;agg&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> models.segnet <span class="keyword">import</span> SegResNet</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Inference&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--path_checkpoint&#x27;</span>,</span><br><span class="line">    default=<span class="string">r&quot;/Users/kenton/Downloads/terminal_download/results/04-18_08-23/checkpoint_best.pkl&quot;</span>,</span><br><span class="line">    <span class="built_in">help</span> = <span class="string">&#x27;path to your dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--path_img&#x27;</span>, default=<span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/camvid_from_paper/test/Seq05VD_f00210.png&quot;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;path to your dataset&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--path_csv&#x27;</span>, default=<span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/camvid_from_paper/class_dict.csv&quot;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;path to your csv&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    transform_img = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ])</span><br><span class="line">    img = Image.<span class="built_in">open</span>(args.path_img)</span><br><span class="line">    img_tensor = transform_img(img)</span><br><span class="line">    img_tensor.unsqueeze_(<span class="number">0</span>)</span><br><span class="line">    img_tensor = img_tensor.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型加载</span></span><br><span class="line">    model = SegResNet(num_classes=<span class="number">12</span>)</span><br><span class="line">    checkpoint = torch.load(args.path_checkpoint, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 推理</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        outputs = model(img_tensor)</span><br><span class="line">    outputs = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)</span><br><span class="line">    pre_label = outputs[<span class="number">1</span>].squeeze().cpu().data.numpy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结果展示</span></span><br><span class="line">    pd_label_color = pd.read_csv(args.path_csv, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    name_value = pd_label_color[<span class="string">&#x27;name&#x27;</span>].values</span><br><span class="line">    num_class = <span class="built_in">len</span>(name_value)</span><br><span class="line">    colormap = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_class):</span><br><span class="line">        tmp = pd_label_color.iloc[i]</span><br><span class="line">        color = [tmp[<span class="string">&#x27;r&#x27;</span>], tmp[<span class="string">&#x27;g&#x27;</span>], tmp[<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">        colormap.append(color)</span><br><span class="line"></span><br><span class="line">    cm = np.array(colormap).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">    pre = cm[pre_label]</span><br><span class="line">    pre1 = Image.fromarray(pre)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">121</span>)</span><br><span class="line">    plt.imshow(pre1)</span><br><span class="line">    plt.subplot(<span class="number">122</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示图例</span></span><br><span class="line">    height = <span class="number">20</span></span><br><span class="line">    fake_img = np.zeros((height*<span class="number">12</span>, <span class="number">100</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_class):</span><br><span class="line">        tmp = pd_label_color.iloc[i]</span><br><span class="line">        color = [tmp[<span class="string">&#x27;r&#x27;</span>], tmp[<span class="string">&#x27;g&#x27;</span>], tmp[<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">        fake_img[height*i:height*(i+<span class="number">1</span>), :, :] = color</span><br><span class="line"></span><br><span class="line">    plt.imshow(fake_img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_class):</span><br><span class="line">        name = pd_label_color[<span class="string">&quot;name&quot;</span>][i]</span><br><span class="line">        plt.text(<span class="number">10</span>, <span class="number">15</span> + height*i, name)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="config-x2F-camvid-config-py"><a href="#config-x2F-camvid-config-py" class="headerlink" title="config&#x2F;camvid_config.py"></a>config&#x2F;camvid_config.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : camvid_config.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-03-12</span></span><br><span class="line"><span class="string"># @brief      : camvid分割参数配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> easydict <span class="keyword">import</span> EasyDict</span><br><span class="line"></span><br><span class="line">cfg = EasyDict()  <span class="comment"># 访问属性的方式去使用key-value 即通过 .key获得value</span></span><br><span class="line"></span><br><span class="line">cfg.device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">cfg.max_epoch = <span class="number">150</span>  <span class="comment"># 150</span></span><br><span class="line"></span><br><span class="line">cfg.crop_size = (<span class="number">360</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># batch size</span></span><br><span class="line">cfg.train_bs = <span class="number">2</span>  <span class="comment"># 8</span></span><br><span class="line">cfg.valid_bs = <span class="number">1</span>    <span class="comment"># 4</span></span><br><span class="line">cfg.workers = <span class="number">1</span>  <span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习率</span></span><br><span class="line">cfg.lr_init = <span class="number">0.1</span>  <span class="comment"># pretraied_model::0.1</span></span><br><span class="line">cfg.factor = <span class="number">0.1</span></span><br><span class="line">cfg.milestones = [<span class="number">75</span>, <span class="number">130</span>]</span><br><span class="line">cfg.weight_decay = <span class="number">1e-4</span></span><br><span class="line">cfg.momentum = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line">cfg.log_interval = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="models-x2F-segnet-py"><a href="#models-x2F-segnet-py" class="headerlink" title="models&#x2F;segnet.py"></a>models&#x2F;segnet.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : segnet.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-4-16</span></span><br><span class="line"><span class="string"># @brief      : segnet网络架构</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">from</span> tools.helpers <span class="keyword">import</span> set_trainable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes, in_channels=<span class="number">3</span>, freeze_bn=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        freeze_backbone=<span class="literal">False</span>, path_model=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SegNet, self).__init__()</span><br><span class="line">        vgg_bn = models.vgg16_bn()</span><br><span class="line">        <span class="keyword">if</span> path_model:</span><br><span class="line">            vgg_bn.load_state_dict(torch.load(path_model, map_location=<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;load pretrain model done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        encoder = <span class="built_in">list</span>(vgg_bn.features.children())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adjust the input size</span></span><br><span class="line">        <span class="keyword">if</span> in_channels != <span class="number">3</span>:</span><br><span class="line">            encoder[<span class="number">0</span>] = nn.Conv2d(in_channels, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Encoder, VGG without any maxpooling</span></span><br><span class="line">        self.stage1_encoder = nn.Sequential(*encoder[:<span class="number">6</span>])</span><br><span class="line">        self.stage2_encoder = nn.Sequential(*encoder[<span class="number">7</span>:<span class="number">13</span>])</span><br><span class="line">        self.stage3_encoder = nn.Sequential(*encoder[<span class="number">14</span>:<span class="number">23</span>])</span><br><span class="line">        self.stage4_encoder = nn.Sequential(*encoder[<span class="number">24</span>:<span class="number">33</span>])</span><br><span class="line">        self.stage5_encoder = nn.Sequential(*encoder[<span class="number">34</span>:-<span class="number">1</span>])</span><br><span class="line">        self.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, return_indices=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decoder, same as the encoder but reversed, maxpool will not be used</span></span><br><span class="line">        decoder = encoder</span><br><span class="line">        decoder = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(decoder)) <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(i, nn.MaxPool2d)]</span><br><span class="line">        <span class="comment"># Replace the last conv layer</span></span><br><span class="line">        decoder[-<span class="number">1</span>] = nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># When reversing, we also reversed conv-&gt;batchN-&gt;relu, correct it</span></span><br><span class="line">        decoder = [item <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(decoder), <span class="number">3</span>) <span class="keyword">for</span> item <span class="keyword">in</span> decoder[i:i + <span class="number">3</span>][::-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Replace some conv layers &amp; batchN after them</span></span><br><span class="line">        <span class="keyword">for</span> i, module <span class="keyword">in</span> <span class="built_in">enumerate</span>(decoder):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.Conv2d):</span><br><span class="line">                <span class="keyword">if</span> module.in_channels != module.out_channels:</span><br><span class="line">                    decoder[i + <span class="number">1</span>] = nn.BatchNorm2d(module.in_channels)</span><br><span class="line">                    decoder[i] = nn.Conv2d(module.out_channels, module.in_channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.stage1_decoder = nn.Sequential(*decoder[<span class="number">0</span>:<span class="number">9</span>])</span><br><span class="line">        self.stage2_decoder = nn.Sequential(*decoder[<span class="number">9</span>:<span class="number">18</span>])</span><br><span class="line">        self.stage3_decoder = nn.Sequential(*decoder[<span class="number">18</span>:<span class="number">27</span>])</span><br><span class="line">        self.stage4_decoder = nn.Sequential(*decoder[<span class="number">27</span>:<span class="number">33</span>])</span><br><span class="line">        self.stage5_decoder = nn.Sequential(*decoder[<span class="number">33</span>:],</span><br><span class="line">                                            nn.Conv2d(<span class="number">64</span>, num_classes, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">                                            )</span><br><span class="line">        self.unpool = nn.MaxUnpool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self._initialize_weights(self.stage1_decoder, self.stage2_decoder, self.stage3_decoder,</span><br><span class="line">                                 self.stage4_decoder, self.stage5_decoder)</span><br><span class="line">        <span class="keyword">if</span> freeze_bn:</span><br><span class="line">            self.freeze_bn()</span><br><span class="line">        <span class="keyword">if</span> freeze_backbone:</span><br><span class="line">            set_trainable([self.stage1_encoder, self.stage2_encoder, self.stage3_encoder, self.stage4_encoder,</span><br><span class="line">                           self.stage5_encoder], <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_initialize_weights</span>(<span class="params">self, *stages</span>):</span><br><span class="line">        <span class="keyword">for</span> modules <span class="keyword">in</span> stages:</span><br><span class="line">            <span class="keyword">for</span> module <span class="keyword">in</span> modules.modules():</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.Conv2d):</span><br><span class="line">                    nn.init.kaiming_normal_(module.weight)</span><br><span class="line">                    <span class="keyword">if</span> module.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        module.bias.data.zero_()</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(module, nn.BatchNorm2d):</span><br><span class="line">                    module.weight.data.fill_(<span class="number">1</span>)</span><br><span class="line">                    module.bias.data.zero_()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">freeze_bn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.BatchNorm2d):</span><br><span class="line">                module.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># Encoder</span></span><br><span class="line">        x = self.stage1_encoder(x)</span><br><span class="line">        x1_size = x.size()</span><br><span class="line">        x, indices1 = self.pool(x)</span><br><span class="line"></span><br><span class="line">        x = self.stage2_encoder(x)</span><br><span class="line">        x2_size = x.size()</span><br><span class="line">        x, indices2 = self.pool(x)</span><br><span class="line"></span><br><span class="line">        x = self.stage3_encoder(x)</span><br><span class="line">        x3_size = x.size()</span><br><span class="line">        x, indices3 = self.pool(x)</span><br><span class="line"></span><br><span class="line">        x = self.stage4_encoder(x)</span><br><span class="line">        x4_size = x.size()</span><br><span class="line">        x, indices4 = self.pool(x)</span><br><span class="line"></span><br><span class="line">        x = self.stage5_encoder(x)</span><br><span class="line">        x5_size = x.size()</span><br><span class="line">        x, indices5 = self.pool(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decoder</span></span><br><span class="line">        x = self.unpool(x, indices=indices5, output_size=x5_size)</span><br><span class="line">        x = self.stage1_decoder(x)</span><br><span class="line"></span><br><span class="line">        x = self.unpool(x, indices=indices4, output_size=x4_size)</span><br><span class="line">        x = self.stage2_decoder(x)</span><br><span class="line"></span><br><span class="line">        x = self.unpool(x, indices=indices3, output_size=x3_size)</span><br><span class="line">        x = self.stage3_decoder(x)</span><br><span class="line"></span><br><span class="line">        x = self.unpool(x, indices=indices2, output_size=x2_size)</span><br><span class="line">        x = self.stage4_decoder(x)</span><br><span class="line"></span><br><span class="line">        x = self.unpool(x, indices=indices1, output_size=x1_size)</span><br><span class="line">        x = self.stage5_decoder(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoderBottleneck</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inchannels</span>):</span><br><span class="line">        <span class="built_in">super</span>(DecoderBottleneck, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(inchannels, inchannels//<span class="number">4</span>, kernel_size=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(inchannels//<span class="number">4</span>)</span><br><span class="line">        self.conv2 = nn.ConvTranspose2d(inchannels//<span class="number">4</span>, inchannels//<span class="number">4</span>, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(inchannels//<span class="number">4</span>)</span><br><span class="line">        self.conv3 = nn.Conv2d(inchannels//<span class="number">4</span>, inchannels//<span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn3 = nn.BatchNorm2d(inchannels//<span class="number">2</span>)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.downsample = nn.Sequential(</span><br><span class="line">                nn.ConvTranspose2d(inchannels, inchannels//<span class="number">2</span>, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(inchannels//<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.conv3(out)</span><br><span class="line">        out = self.bn3(out)</span><br><span class="line"></span><br><span class="line">        identity = self.downsample(x)</span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LastBottleneck</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inchannels</span>):</span><br><span class="line">        <span class="built_in">super</span>(LastBottleneck, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(inchannels, inchannels // <span class="number">4</span>, kernel_size=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(inchannels // <span class="number">4</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(inchannels // <span class="number">4</span>, inchannels // <span class="number">4</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(inchannels // <span class="number">4</span>)</span><br><span class="line">        self.conv3 = nn.Conv2d(inchannels // <span class="number">4</span>, inchannels // <span class="number">4</span>, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn3 = nn.BatchNorm2d(inchannels // <span class="number">4</span>)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.downsample = nn.Sequential(</span><br><span class="line">            nn.Conv2d(inchannels, inchannels // <span class="number">4</span>, kernel_size=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(inchannels // <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.conv3(out)</span><br><span class="line">        out = self.bn3(out)</span><br><span class="line"></span><br><span class="line">        identity = self.downsample(x)</span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegResNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes, in_channels=<span class="number">3</span>, freeze_bn=<span class="literal">False</span>, path_model=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SegResNet, self).__init__()</span><br><span class="line">        resnet101 = models.resnet101()</span><br><span class="line">        <span class="keyword">if</span> path_model:</span><br><span class="line">            resnet101.load_state_dict(torch.load(path_model, map_location=<span class="string">&quot;cpu&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;load pretrain model done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        encoder = <span class="built_in">list</span>(resnet101.children())</span><br><span class="line">        <span class="keyword">if</span> in_channels != <span class="number">3</span>:</span><br><span class="line">            encoder[<span class="number">0</span>] = nn.Conv2d(in_channels, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        encoder[<span class="number">3</span>].return_indices = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Encoder</span></span><br><span class="line">        self.first_conv = nn.Sequential(*encoder[:<span class="number">4</span>])</span><br><span class="line">        resnet101_blocks = <span class="built_in">list</span>(resnet101.children())[<span class="number">4</span>:-<span class="number">2</span>]</span><br><span class="line">        self.encoder = nn.Sequential(*resnet101_blocks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decoder</span></span><br><span class="line">        resnet101_untrained = models.resnet101(pretrained=<span class="literal">False</span>)</span><br><span class="line">        resnet101_blocks = <span class="built_in">list</span>(resnet101_untrained.children())[<span class="number">4</span>:-<span class="number">2</span>][::-<span class="number">1</span>]</span><br><span class="line">        decoder = []</span><br><span class="line">        channels = (<span class="number">2048</span>, <span class="number">1024</span>, <span class="number">512</span>)</span><br><span class="line">        <span class="keyword">for</span> i, block <span class="keyword">in</span> <span class="built_in">enumerate</span>(resnet101_blocks[:-<span class="number">1</span>]):</span><br><span class="line">            new_block = <span class="built_in">list</span>(block.children())[::-<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line">            decoder.append(nn.Sequential(*new_block, DecoderBottleneck(channels[i])))</span><br><span class="line">        new_block = <span class="built_in">list</span>(resnet101_blocks[-<span class="number">1</span>].children())[::-<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line">        decoder.append(nn.Sequential(*new_block, LastBottleneck(<span class="number">256</span>)))</span><br><span class="line"></span><br><span class="line">        self.decoder = nn.Sequential(*decoder)</span><br><span class="line">        self.last_conv = nn.Sequential(</span><br><span class="line">            nn.ConvTranspose2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, num_classes, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> freeze_bn:</span><br><span class="line">            self.freeze_bn()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        inputsize = x.size()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Encoder</span></span><br><span class="line">        x, indices = self.first_conv(x)</span><br><span class="line">        x = self.encoder(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decoder</span></span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        h_diff = ceil((x.size()[<span class="number">2</span>] - indices.size()[<span class="number">2</span>]) / <span class="number">2</span>)</span><br><span class="line">        w_diff = ceil((x.size()[<span class="number">3</span>] - indices.size()[<span class="number">3</span>]) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> indices.size()[<span class="number">2</span>] % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            x = x[:, :, h_diff:x.size()[<span class="number">2</span>] - (h_diff - <span class="number">1</span>), w_diff: x.size()[<span class="number">3</span>] - (w_diff - <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = x[:, :, h_diff:x.size()[<span class="number">2</span>] - h_diff, w_diff: x.size()[<span class="number">3</span>] - w_diff]</span><br><span class="line"></span><br><span class="line">        x = F.max_unpool2d(x, indices, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        x = self.last_conv(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inputsize != x.size():</span><br><span class="line">            h_diff = (x.size()[<span class="number">2</span>] - inputsize[<span class="number">2</span>]) // <span class="number">2</span></span><br><span class="line">            w_diff = (x.size()[<span class="number">3</span>] - inputsize[<span class="number">3</span>]) // <span class="number">2</span></span><br><span class="line">            x = x[:, :, h_diff:x.size()[<span class="number">2</span>] - h_diff, w_diff: x.size()[<span class="number">3</span>] - w_diff]</span><br><span class="line">            <span class="keyword">if</span> h_diff % <span class="number">2</span> != <span class="number">0</span>: x = x[:, :, :-<span class="number">1</span>, :]</span><br><span class="line">            <span class="keyword">if</span> w_diff % <span class="number">2</span> != <span class="number">0</span>: x = x[:, :, :, :-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">freeze_bn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.BatchNorm2d): module.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fake_img = torch.randn((<span class="number">2</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"></span><br><span class="line">    model = SegNet(num_classes=<span class="number">21</span>, path_model=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># model = SegResNet(num_classes=12)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    output = model(fake_img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h3 id="src-x2F-camvid-train-py"><a href="#src-x2F-camvid-train-py" class="headerlink" title="src&#x2F;camvid_train.py"></a>src&#x2F;camvid_train.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : camvid_train.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-4-16</span></span><br><span class="line"><span class="string"># @brief      : 模型训练主代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;agg&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> datasets.camvid_dataset <span class="keyword">import</span> CamvidDataset</span><br><span class="line"><span class="keyword">from</span> tools.model_trainer <span class="keyword">import</span> ModelTrainer</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> config.camvid_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> models.segnet <span class="keyword">import</span> SegNet, SegResNet</span><br><span class="line"><span class="keyword">from</span> models.unet <span class="keyword">import</span> UNet, UNetResnet</span><br><span class="line"><span class="keyword">from</span> models.deeplabv3_plus <span class="keyword">import</span> DeepLabV3Plus</span><br><span class="line"><span class="keyword">from</span> tools.evalution_segmentaion <span class="keyword">import</span> calc_semantic_segmentation_iou</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">setup_seed(<span class="number">12345</span>)  <span class="comment"># 先固定随机种子</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;learning rate&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--max_epoch&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--train_bs&#x27;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--data_root_dir&#x27;</span>, default= <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/camvid_from_paper&quot;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;path to your dataset&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">cfg.lr_init = args.lr <span class="keyword">if</span> args.lr <span class="keyword">else</span> cfg.lr_init</span><br><span class="line">cfg.train_bs = args.train_bs <span class="keyword">if</span> args.train_bs <span class="keyword">else</span> cfg.train_bs</span><br><span class="line">cfg.max_epoch = args.max_epoch <span class="keyword">if</span> args.max_epoch <span class="keyword">else</span> cfg.max_epoch</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step0: setting path</span></span><br><span class="line">    <span class="comment"># path_model_101 = &#x27;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet101s-03a0f310.pth&#x27;  # deeplab</span></span><br><span class="line">    <span class="comment"># path_model_50 = &#x27;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet50s-a75c83cf.pth&#x27;  # unet</span></span><br><span class="line">    <span class="comment"># path_model_vgg = &#x27;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/vgg16_bn-6c64b313.pth&#x27;</span></span><br><span class="line">    <span class="comment"># path_model_50s = &#x27;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet50s-a75c83cf.pth&#x27;</span></span><br><span class="line">    res_dir = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>)</span><br><span class="line">    logger, log_dir = make_logger(res_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 1/4 : 加载数据------------------------------------</span></span><br><span class="line">    <span class="comment"># 构建Dataset实例</span></span><br><span class="line">    root_dir = args.data_root_dir</span><br><span class="line">    train_img_dir = os.path.join(root_dir, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    train_lable_dir = os.path.join(root_dir, <span class="string">&#x27;train_labels&#x27;</span>)</span><br><span class="line">    valid_img_dir = os.path.join(root_dir, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    valid_label_dir = os.path.join(root_dir, <span class="string">&#x27;val_labels&#x27;</span>)</span><br><span class="line">    path_to_dict = os.path.join(root_dir, <span class="string">&#x27;class_dict.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    check_data_dir(train_img_dir)</span><br><span class="line">    check_data_dir(train_lable_dir)</span><br><span class="line">    check_data_dir(valid_img_dir)</span><br><span class="line">    check_data_dir(valid_label_dir)</span><br><span class="line"></span><br><span class="line">    train_data = CamvidDataset(train_img_dir, train_lable_dir, path_to_dict, cfg.crop_size)</span><br><span class="line">    valid_data = CamvidDataset(valid_img_dir, valid_label_dir, path_to_dict, cfg.crop_size)</span><br><span class="line">    train_loader = DataLoader(train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">True</span>, num_workers=cfg.workers)</span><br><span class="line">    valid_loader = DataLoader(valid_data, batch_size=cfg.valid_bs, num_workers=cfg.workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 2/4 : 定义网络------------------------------------</span></span><br><span class="line">    <span class="comment"># model = DeepLabV3Plus(num_classes=train_data.cls_num, path_model=path_model_101)</span></span><br><span class="line">    <span class="comment"># model = UNet(num_classes=train_data.cls_num)</span></span><br><span class="line">    <span class="comment"># model = UNetResnet(num_classes=train_data.cls_num, backbone=&#x27;resnet50&#x27;, path_model=path_model_50)</span></span><br><span class="line">    model = SegResNet(num_classes=train_data.cls_num)</span><br><span class="line">    model.to(cfg.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 3/4 : 定义损失函数和优化器 ------------------------------------</span></span><br><span class="line">    loss_f = nn.CrossEntropyLoss().to(cfg.device)</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=cfg.lr_init, momentum=cfg.momentum, weight_decay=cfg.weight_decay)</span><br><span class="line">    scheduler = optim.lr_scheduler.MultiStepLR(optimizer, gamma=cfg.factor, milestones=cfg.milestones)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 4/4 : 训练 --------------------------------------------------</span></span><br><span class="line">    <span class="comment"># 记录训练配置信息</span></span><br><span class="line">    logger.info(<span class="string">&quot;cfg:\n&#123;&#125;\n loss_f:\n&#123;&#125;\n scheduler:\n&#123;&#125;\n optimizer:\n&#123;&#125;\n model name:\n&#123;&#125;\nmodel:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        cfg, loss_f, scheduler, optimizer, model._get_name(), model))</span><br><span class="line"></span><br><span class="line">    loss_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    acc_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    miou_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    best_miou, best_epoch = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    grad_lst_epoch = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(cfg.max_epoch):</span><br><span class="line"></span><br><span class="line">        loss_train, acc_train, mat_train, miou_train, grad_lst = ModelTrainer.train(</span><br><span class="line">            train_loader, model, loss_f, cfg, optimizer, epoch, logger)</span><br><span class="line">        loss_valid, acc_valid, mat_valid, miou_valid = ModelTrainer.valid(</span><br><span class="line">            valid_loader, model, loss_f, cfg)</span><br><span class="line">        grad_lst_epoch.extend(grad_lst)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Epoch[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Train Acc: &#123;:.2%&#125; Valid Acc:&#123;:.2%&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;Train loss:&#123;:.4f&#125; Train miou:&#123;:.4f&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;Valid loss:&#123;:.4f&#125; Valid miou:&#123;:.4f&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;LR:&#123;&#125;&quot;</span>. <span class="built_in">format</span>(epoch, cfg.max_epoch, acc_train, acc_valid, loss_train, miou_train,</span><br><span class="line">                                    loss_valid, miou_valid, optimizer.param_groups[<span class="number">0</span>][<span class="string">&quot;lr&quot;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练信息</span></span><br><span class="line">        loss_rec[<span class="string">&quot;train&quot;</span>].append(loss_train), loss_rec[<span class="string">&quot;valid&quot;</span>].append(loss_valid)</span><br><span class="line">        acc_rec[<span class="string">&quot;train&quot;</span>].append(acc_train), acc_rec[<span class="string">&quot;valid&quot;</span>].append(acc_valid)</span><br><span class="line">        miou_rec[<span class="string">&quot;train&quot;</span>].append(miou_train), miou_rec[<span class="string">&quot;valid&quot;</span>].append(miou_valid)</span><br><span class="line">        <span class="comment"># 保存混淆矩阵图</span></span><br><span class="line">        show_confMat(mat_train, train_data.names, <span class="string">&quot;train&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                     verbose=epoch == cfg.max_epoch - <span class="number">1</span>, perc=<span class="literal">True</span>)</span><br><span class="line">        show_confMat(mat_valid, valid_data.names, <span class="string">&quot;valid&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                     verbose=epoch == cfg.max_epoch - <span class="number">1</span>, perc=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 保存loss曲线， acc曲线， miou曲线</span></span><br><span class="line">        plt_x = np.arange(<span class="number">1</span>, epoch + <span class="number">2</span>)</span><br><span class="line">        plot_line(plt_x, loss_rec[<span class="string">&quot;train&quot;</span>], plt_x, loss_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;loss&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, acc_rec[<span class="string">&quot;train&quot;</span>], plt_x, acc_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;acc&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, miou_rec[<span class="string">&quot;train&quot;</span>], plt_x, miou_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;miou&quot;</span>, out_dir=log_dir)</span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">or</span> epoch == cfg.max_epoch-<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            best_epoch = epoch <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">else</span> best_epoch</span><br><span class="line">            best_miou = miou_valid <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">else</span> best_miou</span><br><span class="line">            checkpoint = &#123;<span class="string">&quot;model_state_dict&quot;</span>: model.state_dict(),</span><br><span class="line">                          <span class="string">&quot;optimizer_state_dict&quot;</span>: optimizer.state_dict(),</span><br><span class="line">                          <span class="string">&quot;epoch&quot;</span>: epoch,</span><br><span class="line">                          <span class="string">&quot;best_miou&quot;</span>: best_miou&#125;</span><br><span class="line">            pkl_name = <span class="string">&quot;checkpoint_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch-<span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;checkpoint_best.pkl&quot;</span></span><br><span class="line">            path_checkpoint = os.path.join(log_dir, pkl_name)</span><br><span class="line">            torch.save(checkpoint, path_checkpoint)</span><br><span class="line">            <span class="comment"># 观察各类别的iou：</span></span><br><span class="line">            iou_array = calc_semantic_segmentation_iou(mat_valid)</span><br><span class="line">            info = [<span class="string">&quot;&#123;&#125;_iou:&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(n, iou) <span class="keyword">for</span> n, iou <span class="keyword">in</span> <span class="built_in">zip</span>(train_data.names, iou_array)]</span><br><span class="line">            logger.info(<span class="string">&quot;Best mIoU in &#123;&#125;. &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, <span class="string">&quot;\n&quot;</span>.join(info)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 梯度剪裁的图 显示 最大的梯度</span></span><br><span class="line">        <span class="keyword">if</span> cfg.hist_grad:</span><br><span class="line">            path_grad_png = os.path.join(log_dir, <span class="string">&quot;grad_hist.png&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;max grad in &#123;&#125;, is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(grad_lst_epoch.index(<span class="built_in">max</span>(grad_lst_epoch)), <span class="built_in">max</span>(grad_lst_epoch)))</span><br><span class="line">            <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">            plt.hist(grad_lst_epoch)</span><br><span class="line">            plt.close()</span><br><span class="line">            plt.savefig(path_grad_png)</span><br><span class="line">            logger.info(grad_lst_epoch)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;&#123;&#125; done, best_miou: &#123;:.4f&#125; in :&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        datetime.strftime(datetime.now(), <span class="string">&#x27;%m-%d_%H-%M&#x27;</span>), best_miou, best_epoch))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="datasets-x2F-camvid-dataset-py"><a href="#datasets-x2F-camvid-dataset-py" class="headerlink" title="datasets&#x2F;camvid_dataset.py"></a>datasets&#x2F;camvid_dataset.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : camvid_dataset.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-03-12</span></span><br><span class="line"><span class="string"># @brief      : CamVid数据集的Dataset定义</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> ff</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LabelProcessor</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对标签图像的编码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        self.colormap = self.read_color_map(file_path)  <span class="comment"># 读取csv，获得label对应的rgb值, csv --&gt; rgb</span></span><br><span class="line">        self.cm2lbl = self.encode_label_pix(self.colormap)  <span class="comment"># 对label的rgb值制作映射矩阵，rgb --&gt; cls index</span></span><br><span class="line">        self.names = pd.read_csv(file_path, sep=<span class="string">&#x27;,&#x27;</span>).name.tolist()</span><br><span class="line">    <span class="comment"># 静态方法装饰器， 可以理解为定义在类中的普通函数，可以用self.&lt;name&gt;方式调用</span></span><br><span class="line">    <span class="comment"># 在静态方法内部不可以示例属性和实列对象，即不可以调用self.相关的内容</span></span><br><span class="line">    <span class="comment"># 使用静态方法的原因之一是程序设计的需要（简洁代码，封装功能等）</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_color_map</span>(<span class="params">file_path</span>):  <span class="comment"># data process and load.ipynb: 处理标签文件中colormap的数据</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        读取csv中信息，获得各类别标签的rgb像素，以list形式返回</span></span><br><span class="line"><span class="string">        :param file_path:</span></span><br><span class="line"><span class="string">        :return: list， list[0] == [128, 128, 128] ...</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pd_label_color = pd.read_csv(file_path, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        colormap = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pd_label_color.index)):</span><br><span class="line">            tmp = pd_label_color.iloc[i]</span><br><span class="line">            color = [tmp[<span class="string">&#x27;r&#x27;</span>], tmp[<span class="string">&#x27;g&#x27;</span>], tmp[<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">            colormap.append(color)</span><br><span class="line">        <span class="keyword">return</span> colormap</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_label_pix</span>(<span class="params">colormap</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成标签编码，返回哈希表</span></span><br><span class="line"><span class="string">        key是像素值的编码，编码公式：(cm[0] * 256 + cm[1]) * 256 + cm[2]</span></span><br><span class="line"><span class="string">        value是类别，0,1,2,3,...,11</span></span><br><span class="line"><span class="string">        :param colormap:</span></span><br><span class="line"><span class="string">        :return: ndarray, shape =  (16777216,)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cm2lbl = np.zeros(<span class="number">256</span> ** <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i, cm <span class="keyword">in</span> <span class="built_in">enumerate</span>(colormap):</span><br><span class="line">            cm2lbl[(cm[<span class="number">0</span>] * <span class="number">256</span> + cm[<span class="number">1</span>]) * <span class="number">256</span> + cm[<span class="number">2</span>]] = i</span><br><span class="line">        <span class="keyword">return</span> cm2lbl</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_label_img</span>(<span class="params">self, img</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将rgb像素转换为 0-11 的标签形式</span></span><br><span class="line"><span class="string">        :param img:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = np.array(img, dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">        idx = (data[:, :, <span class="number">0</span>] * <span class="number">256</span> + data[:, :, <span class="number">1</span>]) * <span class="number">256</span> + data[:, :, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> np.array(self.cm2lbl[idx], dtype=<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CamvidDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dir_img, dir_l, path_csv, crop_size=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;para:</span></span><br><span class="line"><span class="string">            file_path(list): 数据和标签路径,列表元素第一个为图片路径，第二个为标签路径</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.img_path = dir_img</span><br><span class="line">        self.label_path = dir_l</span><br><span class="line">        <span class="comment"># 2 从路径中取出图片和标签数据的文件名保持到两个列表当中（程序中的数据来源）</span></span><br><span class="line">        self.imgs = self.read_file(self.img_path)</span><br><span class="line">        self.labels = self.read_file(self.label_path)</span><br><span class="line">        <span class="comment"># 3 初始化数据处理函数设置</span></span><br><span class="line">        self.crop_size = crop_size</span><br><span class="line">        <span class="comment"># 初始化标签处理器</span></span><br><span class="line">        self.label_processor = LabelProcessor(path_csv)</span><br><span class="line">        self.names = pd.read_csv(path_csv, sep=<span class="string">&#x27;,&#x27;</span>).name.tolist()</span><br><span class="line">        self.cls_num = <span class="built_in">len</span>(self.names)</span><br><span class="line">        <span class="comment"># 统计类别数量</span></span><br><span class="line">        self.nums_per_cls = self.cal_cls_nums()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img = self.imgs[index]</span><br><span class="line">        label = self.labels[index]</span><br><span class="line"></span><br><span class="line">        img = Image.<span class="built_in">open</span>(img)</span><br><span class="line">        label = Image.<span class="built_in">open</span>(label).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        img, label = self.center_crop(img, label, self.crop_size)</span><br><span class="line">        img, label = self.img_transform(img, label)</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.imgs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;\ndata_dir:&#123;&#125; is a empty dir! Please checkout your path to images!&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                self.dir_img))   <span class="comment"># 代码具有友好的提示功能，便于debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.imgs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从文件夹中读取数据&quot;&quot;&quot;</span></span><br><span class="line">        files_list = os.listdir(path)</span><br><span class="line">        file_path_list = [os.path.join(path, img) <span class="keyword">for</span> img <span class="keyword">in</span> files_list]</span><br><span class="line">        file_path_list.sort()</span><br><span class="line">        <span class="keyword">return</span> file_path_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center_crop</span>(<span class="params">self, data, label, crop_size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;裁剪输入的图片和标签大小&quot;&quot;&quot;</span></span><br><span class="line">        data = ff.center_crop(data, crop_size)</span><br><span class="line">        label = ff.center_crop(label, crop_size)</span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">img_transform</span>(<span class="params">self, img, label</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对图片和标签做一些数值处理&quot;&quot;&quot;</span></span><br><span class="line">        label = np.array(label)  <span class="comment"># 以防不是np格式的数据</span></span><br><span class="line">        label = Image.fromarray(label.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">        transform_img = transforms.Compose(</span><br><span class="line">            [</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">                transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        img = transform_img(img)</span><br><span class="line">        label = self.label_processor.encode_label_img(label)  <span class="comment"># RGB np.array --&gt;   label index</span></span><br><span class="line">        label = torch.from_numpy(label)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_cls_nums</span>(<span class="params">self</span>):</span><br><span class="line">        counter = np.zeros((<span class="number">12</span>,))</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> self.labels:</span><br><span class="line">            label_img = Image.<span class="built_in">open</span>(path).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">            label = self.label_processor.encode_label_img(label_img).flatten()</span><br><span class="line">            count = np.bincount(label, minlength=<span class="number">12</span>)</span><br><span class="line">            counter += count</span><br><span class="line">        <span class="keyword">return</span> counter.tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    camvid_dir = <span class="string">r&quot;G:\deep_learning_data\camvid_from_paper&quot;</span></span><br><span class="line">    path_to_dict = os.path.join(camvid_dir, <span class="string">&#x27;class_dict.csv&#x27;</span>)</span><br><span class="line">    TRAIN_ROOT = os.path.join(camvid_dir, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    TRAIN_LABEL = os.path.join(camvid_dir, <span class="string">&#x27;train_labels&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    crop_size = (<span class="number">360</span>, <span class="number">480</span>)</span><br><span class="line">    train_data = CamvidDataset(TRAIN_ROOT, TRAIN_LABEL, path_to_dict, crop_size)</span><br><span class="line">    train_loader = DataLoader(train_data, batch_size=<span class="number">1</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        img_data, img_label = data</span><br><span class="line">        <span class="built_in">print</span>(img_data.shape, img_data.dtype, <span class="built_in">type</span>(img_data))       <span class="comment"># torch.float32</span></span><br><span class="line">        <span class="built_in">print</span>(img_label.shape, img_label.dtype, <span class="built_in">type</span>(img_label))     <span class="comment"># torch.longint(int64)</span></span><br></pre></td></tr></table></figure><h3 id="src-x2F-camvid-train-py-1"><a href="#src-x2F-camvid-train-py-1" class="headerlink" title="src&#x2F;camvid_train.py"></a>src&#x2F;camvid_train.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : camvid_train.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-03-12</span></span><br><span class="line"><span class="string"># @brief      : 模型训练主代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;agg&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> datasets.camvid_dataset <span class="keyword">import</span> CamvidDataset</span><br><span class="line"><span class="keyword">from</span> tools.model_trainer <span class="keyword">import</span> ModelTrainer</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> config.camvid_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> models.unet <span class="keyword">import</span> UNet, UNetResnet</span><br><span class="line"><span class="keyword">from</span> models.deeplabv3_plus <span class="keyword">import</span> DeepLabV3Plus</span><br><span class="line"><span class="keyword">from</span> tools.evalution_segmentaion <span class="keyword">import</span> calc_semantic_segmentation_iou</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">setup_seed(<span class="number">12345</span>)  <span class="comment"># 先固定随机种子</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;learning rate&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--max_epoch&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--train_bs&#x27;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--data_root_dir&#x27;</span>, default=<span class="string">r&quot;G:\deep_learning_data\camvid_from_paper&quot;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;path to your dataset&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">cfg.lr_init = args.lr <span class="keyword">if</span> args.lr <span class="keyword">else</span> cfg.lr_init</span><br><span class="line">cfg.train_bs = args.train_bs <span class="keyword">if</span> args.train_bs <span class="keyword">else</span> cfg.train_bs</span><br><span class="line">cfg.max_epoch = args.max_epoch <span class="keyword">if</span> args.max_epoch <span class="keyword">else</span> cfg.max_epoch</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step0: setting path</span></span><br><span class="line">    path_model_101 = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;resnet101s-03a0f310.pth&quot;</span>)  <span class="comment"># deeplab</span></span><br><span class="line">    path_model_50 = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;resnet50s-a75c83cf.pth&quot;</span>)  <span class="comment"># unet</span></span><br><span class="line">    path_model_vgg = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;vgg16_bn-6c64b313.pth&quot;</span>)</span><br><span class="line">    res_dir = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>)</span><br><span class="line">    logger, log_dir = make_logger(res_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 1/4 : 加载数据------------------------------------</span></span><br><span class="line">    <span class="comment"># 构建Dataset实例</span></span><br><span class="line">    root_dir = args.data_root_dir</span><br><span class="line">    train_img_dir = os.path.join(root_dir, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    train_lable_dir = os.path.join(root_dir, <span class="string">&#x27;train_labels&#x27;</span>)</span><br><span class="line">    valid_img_dir = os.path.join(root_dir, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    valid_label_dir = os.path.join(root_dir, <span class="string">&#x27;val_labels&#x27;</span>)</span><br><span class="line">    path_to_dict = os.path.join(root_dir, <span class="string">&#x27;class_dict.csv&#x27;</span>)</span><br><span class="line">    check_data_dir(train_img_dir)</span><br><span class="line">    check_data_dir(train_lable_dir)</span><br><span class="line">    check_data_dir(valid_img_dir)</span><br><span class="line">    check_data_dir(valid_label_dir)</span><br><span class="line"></span><br><span class="line">    train_data = CamvidDataset(train_img_dir, train_lable_dir, path_to_dict, cfg.crop_size)</span><br><span class="line">    valid_data = CamvidDataset(valid_img_dir, valid_label_dir, path_to_dict, cfg.crop_size)</span><br><span class="line">    train_loader = DataLoader(train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">True</span>, num_workers=cfg.workers)</span><br><span class="line">    valid_loader = DataLoader(valid_data, batch_size=cfg.valid_bs, num_workers=cfg.workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 2/4 : 定义网络------------------------------------</span></span><br><span class="line">    model = DeepLabV3Plus(num_classes=train_data.cls_num, path_model=path_model_101)</span><br><span class="line">    <span class="comment"># model = UNet(num_classes=train_data.cls_num)</span></span><br><span class="line">    <span class="comment"># model = UNetResnet(num_classes=train_data.cls_num, backbone=&#x27;resnet50&#x27;, path_model=path_model_50)</span></span><br><span class="line">    model.to(cfg.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 3/4 : 定义损失函数和优化器 ------------------------------------</span></span><br><span class="line">    loss_f = nn.CrossEntropyLoss().to(cfg.device)</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=cfg.lr_init, momentum=cfg.momentum, weight_decay=cfg.weight_decay)</span><br><span class="line">    scheduler = optim.lr_scheduler.MultiStepLR(optimizer, gamma=cfg.factor, milestones=cfg.milestones)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step 4/4 : 训练 --------------------------------------------------</span></span><br><span class="line">    <span class="comment"># 记录训练配置信息</span></span><br><span class="line">    logger.info(<span class="string">&quot;cfg:\n&#123;&#125;\n loss_f:\n&#123;&#125;\n scheduler:\n&#123;&#125;\n optimizer:\n&#123;&#125;\n model name:\n&#123;&#125;\nmodel:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        cfg, loss_f, scheduler, optimizer, model._get_name(), model))</span><br><span class="line"></span><br><span class="line">    loss_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    acc_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    miou_rec = &#123;<span class="string">&quot;train&quot;</span>: [], <span class="string">&quot;valid&quot;</span>: []&#125;</span><br><span class="line">    best_miou, best_epoch = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(cfg.max_epoch):</span><br><span class="line"></span><br><span class="line">        loss_train, acc_train, mat_train, miou_train, grad_lst = ModelTrainer.train(</span><br><span class="line">            train_loader, model, loss_f, cfg, optimizer, epoch, logger)</span><br><span class="line">        loss_valid, acc_valid, mat_valid, miou_valid = ModelTrainer.valid(</span><br><span class="line">            valid_loader, model, loss_f, cfg)</span><br><span class="line"></span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Epoch[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Train Acc: &#123;:.2%&#125; Valid Acc:&#123;:.2%&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;Train loss:&#123;:.4f&#125; Train miou:&#123;:.4f&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;Valid loss:&#123;:.4f&#125; Valid miou:&#123;:.4f&#125;\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;LR:&#123;&#125;&quot;</span>. <span class="built_in">format</span>(epoch, cfg.max_epoch, acc_train, acc_valid, loss_train, miou_train,</span><br><span class="line">                                    loss_valid, miou_valid, optimizer.param_groups[<span class="number">0</span>][<span class="string">&quot;lr&quot;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练信息</span></span><br><span class="line">        loss_rec[<span class="string">&quot;train&quot;</span>].append(loss_train), loss_rec[<span class="string">&quot;valid&quot;</span>].append(loss_valid)</span><br><span class="line">        acc_rec[<span class="string">&quot;train&quot;</span>].append(acc_train), acc_rec[<span class="string">&quot;valid&quot;</span>].append(acc_valid)</span><br><span class="line">        miou_rec[<span class="string">&quot;train&quot;</span>].append(miou_train), miou_rec[<span class="string">&quot;valid&quot;</span>].append(miou_valid)</span><br><span class="line">        <span class="comment"># 保存混淆矩阵图</span></span><br><span class="line">        show_confMat(mat_train, train_data.names, <span class="string">&quot;train&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                     verbose=epoch == cfg.max_epoch - <span class="number">1</span>, perc=<span class="literal">True</span>)</span><br><span class="line">        show_confMat(mat_valid, valid_data.names, <span class="string">&quot;valid&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                     verbose=epoch == cfg.max_epoch - <span class="number">1</span>, perc=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 保存loss曲线， acc曲线， miou曲线</span></span><br><span class="line">        plt_x = np.arange(<span class="number">1</span>, epoch + <span class="number">2</span>)</span><br><span class="line">        plot_line(plt_x, loss_rec[<span class="string">&quot;train&quot;</span>], plt_x, loss_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;loss&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, acc_rec[<span class="string">&quot;train&quot;</span>], plt_x, acc_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;acc&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, miou_rec[<span class="string">&quot;train&quot;</span>], plt_x, miou_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;miou&quot;</span>, out_dir=log_dir)</span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">or</span> epoch == cfg.max_epoch-<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            best_epoch = epoch <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">else</span> best_epoch</span><br><span class="line">            best_miou = miou_valid <span class="keyword">if</span> best_miou &lt; miou_valid <span class="keyword">else</span> best_miou</span><br><span class="line">            checkpoint = &#123;<span class="string">&quot;model_state_dict&quot;</span>: model.state_dict(),</span><br><span class="line">                          <span class="string">&quot;optimizer_state_dict&quot;</span>: optimizer.state_dict(),</span><br><span class="line">                          <span class="string">&quot;epoch&quot;</span>: epoch,</span><br><span class="line">                          <span class="string">&quot;best_miou&quot;</span>: best_miou&#125;</span><br><span class="line">            pkl_name = <span class="string">&quot;checkpoint_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch-<span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;checkpoint_best.pkl&quot;</span></span><br><span class="line">            path_checkpoint = os.path.join(log_dir, pkl_name)</span><br><span class="line">            torch.save(checkpoint, path_checkpoint)</span><br><span class="line">            <span class="comment"># 观察各类别的iou：</span></span><br><span class="line">            iou_array = calc_semantic_segmentation_iou(mat_valid)</span><br><span class="line">            info = [<span class="string">&quot;&#123;&#125;_iou:&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(n, iou) <span class="keyword">for</span> n, iou <span class="keyword">in</span> <span class="built_in">zip</span>(train_data.names, iou_array)]</span><br><span class="line">            logger.info(<span class="string">&quot;Best mIoU in &#123;&#125;. &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, <span class="string">&quot;\n&quot;</span>.join(info)))</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;&#123;&#125; done, best_miou: &#123;:.4f&#125; in :&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        datetime.strftime(datetime.now(), <span class="string">&#x27;%m-%d_%H-%M&#x27;</span>), best_miou, best_epoch))</span><br></pre></td></tr></table></figure><h3 id="tools-x2F-common-tools-py"><a href="#tools-x2F-common-tools-py" class="headerlink" title="tools&#x2F;common_tools.py"></a>tools&#x2F;common_tools.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : common_tools.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-04-16</span></span><br><span class="line"><span class="string"># @brief      : 通用函数库</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_seed</span>(<span class="params">seed=<span class="number">12345</span></span>):</span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    torch.manual_seed(seed)     <span class="comment"># cpu</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(seed)</span><br><span class="line">        torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">        torch.backends.cudnn.benchmark = <span class="literal">True</span> <span class="comment"># 训练集变化不大时使训练加速，是固定cudnn最优配置，如卷积算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_confMat</span>(<span class="params">confusion_mat, classes, set_name, out_dir, epoch=<span class="number">999</span>, verbose=<span class="literal">False</span>, perc=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    混淆矩阵绘制并保存图片</span></span><br><span class="line"><span class="string">    :param confusion_mat:  nd.array</span></span><br><span class="line"><span class="string">    :param classes: list or tuple, 类别名称</span></span><br><span class="line"><span class="string">    :param set_name: str, 数据集名称 train or valid or test?</span></span><br><span class="line"><span class="string">    :param out_dir:  str, 图片要保存的文件夹</span></span><br><span class="line"><span class="string">    :param epoch:  int, 第几个epoch</span></span><br><span class="line"><span class="string">    :param verbose: bool, 是否打印精度信息</span></span><br><span class="line"><span class="string">    :param perc: bool, 是否采用百分比，图像分割时用，因分类数目过大</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cls_num = <span class="built_in">len</span>(classes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    confusion_mat_tmp = confusion_mat.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classes)):</span><br><span class="line">        confusion_mat_tmp[i, :] = confusion_mat[i, :] / confusion_mat[i, :].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置图像大小</span></span><br><span class="line">    <span class="keyword">if</span> cls_num &lt; <span class="number">10</span>:</span><br><span class="line">        figsize = <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> cls_num &gt;= <span class="number">100</span>:</span><br><span class="line">        figsize = <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        figsize = np.linspace(<span class="number">6</span>, <span class="number">30</span>, <span class="number">91</span>)[cls_num-<span class="number">10</span>]</span><br><span class="line">    plt.figure(figsize=(<span class="built_in">int</span>(figsize), <span class="built_in">int</span>(figsize*<span class="number">1.3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取颜色</span></span><br><span class="line">    cmap = plt.cm.get_cmap(<span class="string">&#x27;Greys&#x27;</span>)  <span class="comment"># 更多颜色: http://matplotlib.org/examples/color/colormaps_reference.html</span></span><br><span class="line">    plt.imshow(confusion_mat_tmp, cmap=cmap)</span><br><span class="line">    plt.colorbar(fraction=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置文字</span></span><br><span class="line">    xlocations = np.array(<span class="built_in">range</span>(<span class="built_in">len</span>(classes)))</span><br><span class="line">    plt.xticks(xlocations, <span class="built_in">list</span>(classes), rotation=<span class="number">60</span>)</span><br><span class="line">    plt.yticks(xlocations, <span class="built_in">list</span>(classes))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Predict label&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;True label&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Confusion_Matrix_&#123;&#125;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(set_name, epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印数字</span></span><br><span class="line">    <span class="keyword">if</span> perc:</span><br><span class="line"></span><br><span class="line">        cls_per_nums = confusion_mat.<span class="built_in">sum</span>(axis=<span class="number">1</span>).reshape((cls_num, <span class="number">1</span>))</span><br><span class="line">        conf_mat_per = confusion_mat / cls_per_nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                plt.text(x=j, y=i, s=<span class="string">&quot;&#123;:.0%&#125;&quot;</span>.<span class="built_in">format</span>(conf_mat_per[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                         fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                plt.text(x=j, y=i, s=<span class="built_in">int</span>(confusion_mat[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    plt.savefig(os.path.join(out_dir, <span class="string">&quot;Confusion_Matrix_&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(set_name)))</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cls_num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;class:&#123;:&lt;10&#125;, total num:&#123;:&lt;6&#125;, correct num:&#123;:&lt;5&#125;  Recall: &#123;:.2%&#125; Precision: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                classes[i], np.<span class="built_in">sum</span>(confusion_mat[i, :]), confusion_mat[i, i],</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">.1</span> + np.<span class="built_in">sum</span>(confusion_mat[i, :])),</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">.1</span> + np.<span class="built_in">sum</span>(confusion_mat[:, i]))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_line</span>(<span class="params">train_x, train_y, valid_x, valid_y, mode, out_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制训练和验证集的loss曲线/acc曲线</span></span><br><span class="line"><span class="string">    :param train_x: epoch</span></span><br><span class="line"><span class="string">    :param train_y: 标量值</span></span><br><span class="line"><span class="string">    :param valid_x:</span></span><br><span class="line"><span class="string">    :param valid_y:</span></span><br><span class="line"><span class="string">    :param mode:  &#x27;loss&#x27; or &#x27;acc&#x27;</span></span><br><span class="line"><span class="string">    :param out_dir:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    plt.plot(train_x, train_y, label=<span class="string">&#x27;Train&#x27;</span>)</span><br><span class="line">    plt.plot(valid_x, valid_y, label=<span class="string">&#x27;Valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.ylabel(<span class="built_in">str</span>(mode))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    location = <span class="string">&#x27;upper right&#x27;</span> <span class="keyword">if</span> mode == <span class="string">&#x27;loss&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;upper left&#x27;</span></span><br><span class="line">    plt.legend(loc=location)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;_&#x27;</span>.join([mode]))</span><br><span class="line">    plt.savefig(os.path.join(out_dir, mode + <span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path_log</span>):</span><br><span class="line">        log_name = os.path.basename(path_log)</span><br><span class="line">        self.log_name = log_name <span class="keyword">if</span> log_name <span class="keyword">else</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.out_path = path_log</span><br><span class="line"></span><br><span class="line">        log_dir = os.path.dirname(self.out_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">            os.makedirs(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_logger</span>(<span class="params">self</span>):</span><br><span class="line">        logger = logging.getLogger(self.log_name)</span><br><span class="line">        logger.setLevel(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置文件Handler</span></span><br><span class="line">        file_handler = logging.FileHandler(self.out_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        file_handler.setLevel(logging.INFO)</span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置屏幕Handler</span></span><br><span class="line">        console_handler = logging.StreamHandler()</span><br><span class="line">        console_handler.setLevel(logging.INFO)</span><br><span class="line">        <span class="comment"># console_handler.setFormatter(logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加handler</span></span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line">        logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_logger</span>(<span class="params">out_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在out_dir文件夹下以当前时间命名，创建日志文件夹，并创建logger用于记录信息</span></span><br><span class="line"><span class="string">    :param out_dir: str</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    time_str = datetime.strftime(now_time, <span class="string">&#x27;%m-%d_%H-%M&#x27;</span>)</span><br><span class="line">    log_dir = os.path.join(out_dir, time_str)  <span class="comment"># 根据config中的创建时间作为文件夹名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.makedirs(log_dir)</span><br><span class="line">    <span class="comment"># 创建logger</span></span><br><span class="line">    path_log = os.path.join(log_dir, <span class="string">&quot;log.log&quot;</span>)</span><br><span class="line">    logger = Logger(path_log)</span><br><span class="line">    logger = logger.init_logger()</span><br><span class="line">    <span class="keyword">return</span> logger, log_dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_data_dir</span>(<span class="params">path_tmp</span>):</span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(path_tmp), \</span><br><span class="line">        <span class="string">&quot;\n\n路径不存在，当前变量中指定的路径是：\n&#123;&#125;\n请检查相对路径的设置，或者文件是否存在&quot;</span>.<span class="built_in">format</span>(os.path.abspath(path_tmp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_logger</span>(<span class="params">BASE_DIR</span>):</span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    time_str = datetime.strftime(now_time, <span class="string">&#x27;%m-%d_%H-%M&#x27;</span>)</span><br><span class="line">    log_dir = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>, time_str)  <span class="comment"># 根据config中的创建时间作为文件夹名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.makedirs(log_dir)</span><br><span class="line">    path_log = os.path.join(log_dir, <span class="string">&quot;log.log&quot;</span>)</span><br><span class="line">    logger = Logger(path_log)</span><br><span class="line">    logger = logger.init_logger()</span><br><span class="line">    <span class="keyword">return</span> logger, log_dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_learning_rate</span>(<span class="params">optimizer, epoch, args, multiple</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 0.95 every 20 epochs&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># lr = args.lr * (0.95 ** (epoch // 4))</span></span><br><span class="line">    lr = args.lr * (<span class="number">0.95</span> ** (epoch // <span class="number">20</span>))</span><br><span class="line">    <span class="keyword">for</span> i, param_group <span class="keyword">in</span> <span class="built_in">enumerate</span>(optimizer.param_groups):</span><br><span class="line">        param_group[<span class="string">&#x27;lr&#x27;</span>] = lr * multiple[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    setup_seed(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="tools-x2F-evalution-segmentation-py"><a href="#tools-x2F-evalution-segmentation-py" class="headerlink" title="tools&#x2F;evalution_segmentation.py"></a>tools&#x2F;evalution_segmentation.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : evalution_segmention.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-04-16</span></span><br><span class="line"><span class="string"># @brief      : 设定分割任务的评价指标 具体的有 混淆矩阵 mIOU 评估矩阵等等</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_semantic_segmentation_confusion</span>(<span class="params">pred_labels, gt_labels, n_class</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Collect a confusion matrix.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The number of classes :math:`n\_class` is</span></span><br><span class="line"><span class="string">    :math:`max(pred\_labels, gt\_labels) + 1`, which is</span></span><br><span class="line"><span class="string">    the maximum class id of the inputs added by one.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pred_labels (iterable of numpy.ndarray): A collection of predicted</span></span><br><span class="line"><span class="string">            labels. The shape of a label array</span></span><br><span class="line"><span class="string">            is :math:`(H, W)`. :math:`H` and :math:`W`</span></span><br><span class="line"><span class="string">            are height and width of the label.</span></span><br><span class="line"><span class="string">        gt_labels (iterable of numpy.ndarray): A collection of ground</span></span><br><span class="line"><span class="string">            truth labels. The shape of a ground truth label array is</span></span><br><span class="line"><span class="string">            :math:`(H, W)`, and its corresponding prediction label should</span></span><br><span class="line"><span class="string">            have the same shape.</span></span><br><span class="line"><span class="string">            A pixel with value :obj:`-1` will be ignored during evaluation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        numpy.ndarray:</span></span><br><span class="line"><span class="string">        A confusion matrix. Its shape is :math:`(n\_class, n\_class)`.</span></span><br><span class="line"><span class="string">        The :math:`(i, j)` th element corresponds to the number of pixels</span></span><br><span class="line"><span class="string">        that are labeled as class :math:`i` by the ground truth and</span></span><br><span class="line"><span class="string">        class :math:`j` by the prediction.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pred_labels = <span class="built_in">iter</span>(pred_labels)  <span class="comment"># (352, 480)</span></span><br><span class="line">    gt_labels = <span class="built_in">iter</span>(gt_labels)  <span class="comment"># (352, 480)</span></span><br><span class="line"></span><br><span class="line">    confusion = np.zeros((n_class, n_class), dtype=np.int64)  <span class="comment"># (12, 12)</span></span><br><span class="line">    <span class="keyword">for</span> pred_label, gt_label <span class="keyword">in</span> six.moves.<span class="built_in">zip</span>(pred_labels, gt_labels):</span><br><span class="line">        <span class="keyword">if</span> pred_label.ndim != <span class="number">2</span> <span class="keyword">or</span> gt_label.ndim != <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;ndim of labels should be two. pred.ndim:&#123;&#125;, gt.ndim:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                pred_label.ndim, gt_label.ndim))</span><br><span class="line">        <span class="keyword">if</span> pred_label.shape != gt_label.shape:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Shape of ground truth and prediction should&#x27;</span></span><br><span class="line">                             <span class="string">&#x27; be same.&#x27;</span>)</span><br><span class="line">        pred_label = pred_label.flatten()  <span class="comment"># (168960, )</span></span><br><span class="line">        gt_label = gt_label.flatten()  <span class="comment"># (168960, )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Dynamically expand the confusion matrix if necessary.</span></span><br><span class="line">        lb_max = np.<span class="built_in">max</span>((pred_label, gt_label))</span><br><span class="line">        <span class="comment"># print(lb_max)</span></span><br><span class="line">        <span class="keyword">if</span> lb_max &gt;= n_class:</span><br><span class="line">            expanded_confusion = np.zeros(</span><br><span class="line">                (lb_max + <span class="number">1</span>, lb_max + <span class="number">1</span>), dtype=np.int64)</span><br><span class="line">            expanded_confusion[<span class="number">0</span>:n_class, <span class="number">0</span>:n_class] = confusion</span><br><span class="line"></span><br><span class="line">            n_class = lb_max + <span class="number">1</span></span><br><span class="line">            confusion = expanded_confusion</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Count statistics from valid pixels.  极度巧妙 × class_nums 正好使得每个ij能够对应.</span></span><br><span class="line">        <span class="comment"># 把2d矩阵变为1d进行编号排序，n_cls*gt 是确定在哪一行，+pred 表示真实标签在这一行，然后预测为第几个</span></span><br><span class="line">        <span class="comment"># 统计完成后再reshape回2d矩阵</span></span><br><span class="line">        mask = gt_label &gt;= <span class="number">0</span></span><br><span class="line">        confusion += np.bincount(</span><br><span class="line">            n_class * gt_label[mask].astype(<span class="built_in">int</span>) + pred_label[mask],</span><br><span class="line">            minlength=n_class ** <span class="number">2</span>) \</span><br><span class="line">            .reshape((n_class, n_class))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> iter_ <span class="keyword">in</span> (pred_labels, gt_labels):</span><br><span class="line">        <span class="comment"># This code assumes any iterator does not contain None as its items.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">next</span>(iter_, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Length of input iterables need to be same&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> confusion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_semantic_segmentation_iou</span>(<span class="params">confusion</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate Intersection over Union with a given confusion matrix.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The definition of Intersection over Union (IoU) is as follows,</span></span><br><span class="line"><span class="string">    where :math:`N_&#123;ij&#125;` is the number of pixels</span></span><br><span class="line"><span class="string">    that are labeled as class :math:`i` by the ground truth and</span></span><br><span class="line"><span class="string">    class :math:`j` by the prediction.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;IoU of the i-th class&#125; =  \</span></span><br><span class="line"><span class="string">        \\frac&#123;N_&#123;ii&#125;&#125;&#123;\\sum_&#123;j=1&#125;^k N_&#123;ij&#125; + \\sum_&#123;j=1&#125;^k N_&#123;ji&#125; - N_&#123;ii&#125;&#125;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        confusion (numpy.ndarray): A confusion matrix. Its shape is</span></span><br><span class="line"><span class="string">            :math:`(n\_class, n\_class)`.</span></span><br><span class="line"><span class="string">            The :math:`(i, j)` th element corresponds to the number of pixels</span></span><br><span class="line"><span class="string">            that are labeled as class :math:`i` by the ground truth and</span></span><br><span class="line"><span class="string">            class :math:`j` by the prediction.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        numpy.ndarray:</span></span><br><span class="line"><span class="string">        An array of IoUs for the :math:`n\_class` classes. Its shape is</span></span><br><span class="line"><span class="string">        :math:`(n\_class,)`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    iou_denominator = (confusion.<span class="built_in">sum</span>(axis=<span class="number">1</span>) + confusion.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">                       - np.diag(confusion))</span><br><span class="line">    <span class="comment"># 混淆矩阵 行和 + 列和- 中间出现过两次的值 ==&gt;&gt; 并集</span></span><br><span class="line">    <span class="comment"># 混淆矩阵 值 ==&gt;&gt; 交集</span></span><br><span class="line">    iou = np.diag(confusion) / iou_denominator  <span class="comment"># 预测正确的数量 / 真实的数量+预测为该类的数量，即  交集/并集</span></span><br><span class="line">    <span class="keyword">return</span> iou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_semantic_segmentation</span>(<span class="params">pred_labels, gt_labels, n_class</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate metrics used in Semantic Segmentation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This function calculates Intersection over Union (IoU), Pixel Accuracy</span></span><br><span class="line"><span class="string">    and Class Accuracy for the task of semantic segmentation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The definition of metrics calculated by this function is as follows,</span></span><br><span class="line"><span class="string">    where :math:`N_&#123;ij&#125;` is the number of pixels</span></span><br><span class="line"><span class="string">    that are labeled as class :math:`i` by the ground truth and</span></span><br><span class="line"><span class="string">    class :math:`j` by the prediction.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;IoU of the i-th class&#125; =  \</span></span><br><span class="line"><span class="string">        \\frac&#123;N_&#123;ii&#125;&#125;&#123;\\sum_&#123;j=1&#125;^k N_&#123;ij&#125; + \\sum_&#123;j=1&#125;^k N_&#123;ji&#125; - N_&#123;ii&#125;&#125;`</span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;mIoU&#125; = \\frac&#123;1&#125;&#123;k&#125; \</span></span><br><span class="line"><span class="string">        \\sum_&#123;i=1&#125;^k \</span></span><br><span class="line"><span class="string">        \\frac&#123;N_&#123;ii&#125;&#125;&#123;\\sum_&#123;j=1&#125;^k N_&#123;ij&#125; + \\sum_&#123;j=1&#125;^k N_&#123;ji&#125; - N_&#123;ii&#125;&#125;`</span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;Pixel Accuracy&#125; =  \</span></span><br><span class="line"><span class="string">        \\frac \</span></span><br><span class="line"><span class="string">        &#123;\\sum_&#123;i=1&#125;^k N_&#123;ii&#125;&#125; \</span></span><br><span class="line"><span class="string">        &#123;\\sum_&#123;i=1&#125;^k \\sum_&#123;j=1&#125;^k N_&#123;ij&#125;&#125;`</span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;Class Accuracy&#125; = \</span></span><br><span class="line"><span class="string">        \\frac&#123;N_&#123;ii&#125;&#125;&#123;\\sum_&#123;j=1&#125;^k N_&#123;ij&#125;&#125;`</span></span><br><span class="line"><span class="string">    * :math:`\\text&#123;Mean Class Accuracy&#125; = \\frac&#123;1&#125;&#123;k&#125; \</span></span><br><span class="line"><span class="string">        \\sum_&#123;i=1&#125;^k \</span></span><br><span class="line"><span class="string">        \\frac&#123;N_&#123;ii&#125;&#125;&#123;\\sum_&#123;j=1&#125;^k N_&#123;ij&#125;&#125;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The more detailed description of the above metrics can be found in a</span></span><br><span class="line"><span class="string">    review on semantic segmentation [#]_.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The number of classes :math:`n\_class` is</span></span><br><span class="line"><span class="string">    :math:`max(pred\_labels, gt\_labels) + 1`, which is</span></span><br><span class="line"><span class="string">    the maximum class id of the inputs added by one.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. [#] Alberto Garcia-Garcia, Sergio Orts-Escolano, Sergiu Oprea, \</span></span><br><span class="line"><span class="string">    Victor Villena-Martinez, Jose Garcia-Rodriguez. \</span></span><br><span class="line"><span class="string">    `A Review on Deep Learning Techniques Applied to Semantic Segmentation \</span></span><br><span class="line"><span class="string">    &lt;https://arxiv.org/abs/1704.06857&gt;`_. arXiv 2017.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pred_labels (iterable of numpy.ndarray): A collection of predicted</span></span><br><span class="line"><span class="string">            labels. The shape of a label array</span></span><br><span class="line"><span class="string">            is :math:`(H, W)`. :math:`H` and :math:`W`</span></span><br><span class="line"><span class="string">            are height and width of the label.</span></span><br><span class="line"><span class="string">            For example, this is a list of labels</span></span><br><span class="line"><span class="string">            :obj:`[label_0, label_1, ...]`, where</span></span><br><span class="line"><span class="string">            :obj:`label_i.shape = (H_i, W_i)`.</span></span><br><span class="line"><span class="string">        gt_labels (iterable of numpy.ndarray): A collection of ground</span></span><br><span class="line"><span class="string">            truth labels. The shape of a ground truth label array is</span></span><br><span class="line"><span class="string">            :math:`(H, W)`, and its corresponding prediction label should</span></span><br><span class="line"><span class="string">            have the same shape.</span></span><br><span class="line"><span class="string">            A pixel with value :obj:`-1` will be ignored during evaluation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The keys, value-types and the description of the values are listed</span></span><br><span class="line"><span class="string">        below.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        * **iou** (*numpy.ndarray*): An array of IoUs for the \</span></span><br><span class="line"><span class="string">            :math:`n\_class` classes. Its shape is :math:`(n\_class,)`.</span></span><br><span class="line"><span class="string">        * **miou** (*float*): The average of IoUs over classes.</span></span><br><span class="line"><span class="string">        * **pixel_accuracy** (*float*): The computed pixel accuracy.</span></span><br><span class="line"><span class="string">        * **class_accuracy** (*numpy.ndarray*): An array of class accuracies \</span></span><br><span class="line"><span class="string">            for the :math:`n\_class` classes. \</span></span><br><span class="line"><span class="string">            Its shape is :math:`(n\_class,)`.</span></span><br><span class="line"><span class="string">        * **mean_class_accuracy** (*float*): The average of class accuracies.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Evaluation code is based on</span></span><br><span class="line"><span class="string">    # https://github.com/shelhamer/fcn.berkeleyvision.org/blob/master/</span></span><br><span class="line"><span class="string">    # score.py#L37</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    confusion = calc_semantic_segmentation_confusion(pred_labels, gt_labels, n_class)</span><br><span class="line">    iou = calc_semantic_segmentation_iou(confusion)</span><br><span class="line">    pixel_accuracy = np.diag(confusion).<span class="built_in">sum</span>() / confusion.<span class="built_in">sum</span>()</span><br><span class="line">    class_accuracy = np.diag(confusion) / (np.<span class="built_in">sum</span>(confusion, axis=<span class="number">1</span>) + <span class="number">1e-10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;iou&#x27;</span>: iou, <span class="string">&#x27;miou&#x27;</span>: np.nanmean(iou), <span class="comment"># 取平均就是mIoU</span></span><br><span class="line">            <span class="string">&#x27;pixel_accuracy&#x27;</span>: pixel_accuracy,</span><br><span class="line">            <span class="string">&#x27;class_accuracy&#x27;</span>: class_accuracy,</span><br><span class="line">            <span class="string">&#x27;mean_class_accuracy&#x27;</span>: np.nanmean(class_accuracy),</span><br><span class="line">            <span class="string">&#x27;conf_mat&#x27;</span>: confusion&#125;</span><br><span class="line">    <span class="comment"># &#x27;mean_class_accuracy&#x27;: np.nanmean(class_accuracy)&#125;</span></span><br></pre></td></tr></table></figure><h3 id="tools-x2F-helpers-py"><a href="#tools-x2F-helpers-py" class="headerlink" title="tools&#x2F;helpers.py"></a>tools&#x2F;helpers.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dir_exists</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_weights</span>(<span class="params">*models</span>):</span><br><span class="line">    <span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> model.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight.data, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">                m.weight.data.fill_(<span class="number">1.</span>)</span><br><span class="line">                m.bias.data.fill_(<span class="number">1e-4</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                m.weight.data.normal_(<span class="number">0.0</span>, <span class="number">0.0001</span>)</span><br><span class="line">                m.bias.data.zero_()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_upsampling_weight</span>(<span class="params">in_channels, out_channels, kernel_size</span>):</span><br><span class="line">    factor = (kernel_size + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> kernel_size % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            center = factor - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            center = factor - <span class="number">0.5</span></span><br><span class="line">    og = np.ogrid[:kernel_size, :kernel_size]</span><br><span class="line">    filt = (<span class="number">1</span> - <span class="built_in">abs</span>(og[<span class="number">0</span>] - center) / factor) * (<span class="number">1</span> - <span class="built_in">abs</span>(og[<span class="number">1</span>] - center) / factor)</span><br><span class="line">    weight = np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)</span><br><span class="line">    weight[<span class="built_in">list</span>(<span class="built_in">range</span>(in_channels)), <span class="built_in">list</span>(<span class="built_in">range</span>(out_channels)), :, :] = filt</span><br><span class="line">    <span class="keyword">return</span> torch.from_numpy(weight).<span class="built_in">float</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">colorize_mask</span>(<span class="params">mask, palette</span>):</span><br><span class="line">    zero_pad = <span class="number">256</span> * <span class="number">3</span> - <span class="built_in">len</span>(palette)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(zero_pad):</span><br><span class="line">        palette.append(<span class="number">0</span>)</span><br><span class="line">    new_mask = PIL.Image.fromarray(mask.astype(np.uint8)).convert(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">    new_mask.putpalette(palette)</span><br><span class="line">    <span class="keyword">return</span> new_mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_trainable_attr</span>(<span class="params">m, b</span>):</span><br><span class="line">    m.trainable = b</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> m.parameters():</span><br><span class="line">        p.requires_grad = b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_leaf</span>(<span class="params">m, f</span>):</span><br><span class="line">    c = m <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)) <span class="keyword">else</span> <span class="built_in">list</span>(m.children())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Module):</span><br><span class="line">        f(m)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> c:</span><br><span class="line">            apply_leaf(l, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_trainable</span>(<span class="params">l, b</span>):</span><br><span class="line">    apply_leaf(l, <span class="keyword">lambda</span> m: set_trainable_attr(m, b))</span><br></pre></td></tr></table></figure><h3 id="tools-x2F-model-trainer-py"><a href="#tools-x2F-model-trainer-py" class="headerlink" title="tools&#x2F;model_trainer.py"></a>tools&#x2F;model_trainer.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : model_trainer.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2022-04-16</span></span><br><span class="line"><span class="string"># @brief      : 模型训练流程类</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> tools.evalution_segmentaion <span class="keyword">import</span> eval_semantic_segmentation</span><br><span class="line"><span class="keyword">from</span> torch.nn.utils <span class="keyword">import</span> clip_grad_value_</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelTrainer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">data_loader, model, loss_f, cfg, optimizer, epoch_idx, logger</span>):</span><br><span class="line">        model.train()</span><br><span class="line"></span><br><span class="line">        class_num = data_loader.dataset.cls_num</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line">        loss_sigma = []</span><br><span class="line">        train_acc = []</span><br><span class="line">        train_miou = []</span><br><span class="line">        grad_lst_iter = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(cfg.device), labels.to(cfg.device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># foward &amp; backward</span></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cfg.is_clip:</span><br><span class="line">                clip_grad_value_(model.parameters(), cfg.clip_value)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cfg.hist_grad:</span><br><span class="line">                grad_lst_tmp = []</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters():</span><br><span class="line">                    grad_lst_tmp.append(torch.<span class="built_in">max</span>(p.grad.<span class="built_in">abs</span>()).cpu().numpy())</span><br><span class="line">                grad_lst_iter.append(<span class="built_in">max</span>(grad_lst_tmp).flatten()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># eval</span></span><br><span class="line">            pre_label = outputs.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>].data.cpu().numpy()  <span class="comment"># (bs, 360, 480)</span></span><br><span class="line">            pre_label = [i <span class="keyword">for</span> i <span class="keyword">in</span> pre_label]  <span class="comment"># 一个元素是一个样本的预测。pre_label[0].shape = (360,480)</span></span><br><span class="line">            true_label = labels.data.cpu().numpy()</span><br><span class="line">            true_label = [i <span class="keyword">for</span> i <span class="keyword">in</span> true_label]  <span class="comment"># true_label[0].shape (360, 480)</span></span><br><span class="line"></span><br><span class="line">            eval_metrix = eval_semantic_segmentation(pre_label, true_label, class_num)</span><br><span class="line">            train_acc.append(eval_metrix[<span class="string">&#x27;mean_class_accuracy&#x27;</span>])</span><br><span class="line">            train_miou.append(eval_metrix[<span class="string">&#x27;miou&#x27;</span>])</span><br><span class="line">            conf_mat += eval_metrix[<span class="string">&quot;conf_mat&quot;</span>]</span><br><span class="line">            loss_sigma.append(loss.item())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 间隔 log_interval 个 iteration 打印一次训练信息</span></span><br><span class="line">            <span class="keyword">if</span> i % cfg.log_interval == cfg.log_interval - <span class="number">1</span>:</span><br><span class="line">                logger.info(<span class="string">&#x27;|Epoch[&#123;&#125;/&#123;&#125;]||batch[&#123;&#125;/&#123;&#125;]|batch_loss:&#123;:.4f&#125;||mIoU:&#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch_idx,</span><br><span class="line">                                    cfg.max_epoch, i + <span class="number">1</span>, <span class="built_in">len</span>(data_loader), loss.item(), eval_metrix[<span class="string">&#x27;miou&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        loss_mean = np.mean(loss_sigma)</span><br><span class="line">        acc_mean = np.mean(train_acc)</span><br><span class="line">        miou_mean = np.mean(train_miou)</span><br><span class="line">        <span class="keyword">return</span> loss_mean, acc_mean, conf_mat, miou_mean, grad_lst_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">data_loader, model, loss_f, cfg</span>):</span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">        class_num = data_loader.dataset.cls_num</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line">        loss_sigma = []</span><br><span class="line">        valid_acc = []</span><br><span class="line">        valid_miou = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(cfg.device), labels.to(cfg.device)</span><br><span class="line"></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计loss</span></span><br><span class="line">            loss_sigma.append(loss.item())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 评估 mIoU的计算</span></span><br><span class="line">            pre_label = outputs.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>].data.cpu().numpy()  <span class="comment"># (bs, 360, 480)</span></span><br><span class="line">            pre_label = [i <span class="keyword">for</span> i <span class="keyword">in</span> pre_label]  <span class="comment"># 一个元素是一个样本的预测。pre_label[0].shape = (360,480)</span></span><br><span class="line">            true_label = labels.data.cpu().numpy()</span><br><span class="line">            true_label = [i <span class="keyword">for</span> i <span class="keyword">in</span> true_label]  <span class="comment"># true_label[0].shape (360, 480)</span></span><br><span class="line"></span><br><span class="line">            eval_metrix = eval_semantic_segmentation(pre_label, true_label, class_num) <span class="comment"># 一系列指标的计算 主要是IoU的计算</span></span><br><span class="line">            valid_acc.append(eval_metrix[<span class="string">&#x27;mean_class_accuracy&#x27;</span>])</span><br><span class="line">            valid_miou.append(eval_metrix[<span class="string">&#x27;miou&#x27;</span>])</span><br><span class="line">            conf_mat += eval_metrix[<span class="string">&quot;conf_mat&quot;</span>]</span><br><span class="line">            loss_sigma.append(loss.item())</span><br><span class="line"></span><br><span class="line">        loss_mean = np.mean(loss_sigma)</span><br><span class="line">        acc_mean = np.mean(valid_acc)</span><br><span class="line">        miou_mean = np.mean(valid_miou)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss_mean, acc_mean, conf_mat, miou_mean</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="训练参数"><a href="#训练参数" class="headerlink" title="训练参数"></a>训练参数</h3><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>max_epoch</td><td>100</td></tr><tr><td>crop_size</td><td>[360, 480]</td></tr><tr><td>clip_value「梯度裁剪阈值」</td><td>1</td></tr><tr><td>train_bs</td><td>4</td></tr><tr><td>valid_bs</td><td>2</td></tr><tr><td>workers</td><td>4</td></tr><tr><td>lr_init</td><td>1</td></tr><tr><td>weight_decay</td><td>0.0001</td></tr><tr><td>momentum</td><td>0.9</td></tr><tr><td>milestones</td><td>[50, 85]</td></tr><tr><td>log_interval</td><td>10</td></tr><tr><td>loss_f</td><td>CrossEntropyLoss</td></tr><tr><td>optimizer</td><td>SGD</td></tr><tr><td>Backbone</td><td>ResNet-101</td></tr></tbody></table><h3 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h3><table><thead><tr><th></th><th>Train Acc</th><th>Valid Acc</th><th>Train loss</th><th>Train miou</th><th>Valid loss</th><th>Valid miou</th><th>LR</th><th align="left">max grad</th></tr></thead><tbody><tr><td><strong>裁剪前</strong></td><td>72.46%</td><td>57.25%</td><td>0.1807</td><td>0.6480</td><td>0.4784</td><td>0.4776</td><td>0.1</td><td align="left">in 0, is 13.799</td></tr><tr><td><strong>裁剪后</strong></td><td>71.02%</td><td>58.07%</td><td>0.1994</td><td>0.6318</td><td>0.4389</td><td>0.4875</td><td>0.1</td><td align="left">in 0, is 1.0</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 分割项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「分割项目」（一）分割评价指标与常用模型介绍</title>
      <link href="/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%86%E5%89%B2%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/22/%E3%80%8C%E5%88%86%E5%89%B2%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%86%E5%89%B2%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="图像分割指标评价"><a href="#图像分割指标评价" class="headerlink" title="图像分割指标评价"></a>图像分割指标评价</h2><p>$Accuracy$：逐像素分类计算准确率</p><p>$mIoU$（mean intersection over union，均交并比）：$mIoU$指对每个类的$IoU$取平均得到$mIoU$</p><p>其中$IoU$为：<br>$$<br>IoU &#x3D; \frac{target \wedge prediction}{target \cap prediction}<br>$$<br>其中，分子为像素分类正确的数量，分母为标签的数量与预测数量的和</p><span id="more"></span><h2 id="常用分割模型"><a href="#常用分割模型" class="headerlink" title="常用分割模型"></a>常用分割模型</h2><h3 id="FCN"><a href="#FCN" class="headerlink" title="FCN"></a><a href="https://arxiv.org/abs/1411.4038">FCN</a></h3><p>利用全卷积神经网络完成Pixel Wise Prediction</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2haoqx9lij20zk0istaw.jpg"></p><h3 id="U-Net"><a href="#U-Net" class="headerlink" title="U-Net"></a><a href="https://arxiv.org/abs/1505.04597">U-Net</a></h3><p>U-Net系列分割模型的基本结构 ——编码器与解码器的特征融合</p><table><thead><tr><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2harru1xij20hi0ebdgx.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2harbvu4zj20hi0eawfv.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2has4a0k6j20hh0e9wfx.jpg"></th><th><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hasg2enrj20hf0eaq4m.jpg"></th></tr></thead></table><h3 id="DeepLab系列-V1"><a href="#DeepLab系列-V1" class="headerlink" title="DeepLab系列-V1"></a><a href="https://arxiv.org/abs/1412.7062">DeepLab系列-V1</a></h3><p>主要特点： </p><p>孔洞卷积：借助孔洞卷积，增大感受野</p><p>CRF：采用CRF进行mask后处理</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hatwc3jaj20zk0e2jsd.jpg"></p><h3 id="DeepLab系列—V2"><a href="#DeepLab系列—V2" class="headerlink" title="DeepLab系列—V2"></a><a href="https://arxiv.org/abs/1606.00915">DeepLab系列—V2</a></h3><p>主要特点：</p><p>ASPP(Atrous spatial pyramid pooling)——解决多尺度问题</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hb6wq507j20zk0imq54.jpg"></p><h3 id="DeepLab系列—V3"><a href="#DeepLab系列—V3" class="headerlink" title="DeepLab系列—V3"></a><a href="https://arxiv.org/abs/1706.05587">DeepLab系列—V3</a></h3><p>主要特点有：孔洞卷积的串行  ASPP的并行</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbbjgk1mj20zk0am3zy.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbc0gaatj20zk0dv76f.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbcbfssoj20zk0af3zt.jpg"></p><h3 id="DeepLab系列—V3-1"><a href="#DeepLab系列—V3-1" class="headerlink" title="DeepLab系列—V3+"></a><a href="https://arxiv.org/abs/1802.02611">DeepLab系列—V3+</a></h3><p>主要特点：  在deeplabv3基础上加上Encoder-Decoder思想</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbe6jxkfj20zk0i640v.jpg"></p><h3 id="SegNet"><a href="#SegNet" class="headerlink" title="SegNet"></a><a href="https://arxiv.org/abs/1511.00561">SegNet</a></h3><p>主要特点：</p><p>Backbone：vgg16</p><p>Encoder-Decoder结构</p><p>带索引的最大池化上采样</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hcl21zxaj20zk0bkdig.jpg"></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="U-Net网络中的数据形状变化-「Batch-size-x3D-1」"><a href="#U-Net网络中的数据形状变化-「Batch-size-x3D-1」" class="headerlink" title="U-Net网络中的数据形状变化 「Batch_size&#x3D;1」"></a>U-Net网络中的数据形状变化 「Batch_size&#x3D;1」</h3><table><thead><tr><th>步骤</th><th>类属性</th><th>具体网络层</th><th>数据输入形状</th><th>数据输出形状</th></tr></thead><tbody><tr><td>1</td><td>self.start_conv</td><td>(Conv+BN+ReLU)*2</td><td>x &#x3D; [1, 3, 360, 480]</td><td>x1 &#x3D; [1, 3, 360, 480]</td></tr><tr><td>2</td><td>self.down1</td><td>(Conv+BN+ReLU)*2+pool</td><td>x1 &#x3D; [1, 3, 360, 480]</td><td>x2 &#x3D; [1,128,180,240]</td></tr><tr><td>3</td><td>self.down2</td><td>(Conv+BN+ReLU)*2+pool</td><td>x2 &#x3D; [1,128,180,240]</td><td>x3 &#x3D; [1,256,90,120]</td></tr><tr><td>4</td><td>self.down3</td><td>(Conv+BN+ReLU)*2+pool</td><td>x3 &#x3D; [1,256,90,120]</td><td>x4 &#x3D; [1,512,45,60]</td></tr><tr><td>5</td><td>self.down4</td><td>(Conv+BN+ReLU)*2+pool</td><td>x4 &#x3D; [1,512,45,60]</td><td>x_ &#x3D; [1,1024,23,30]</td></tr><tr><td>6</td><td>self.middle_conv</td><td>(Conv+BN+ReLU)*2</td><td>x_ &#x3D; [1,1024,23,30]</td><td>x &#x3D; [1,1024,23,30]</td></tr><tr><td>7</td><td>self.up1</td><td>ConvT +(Conv+BN+ReLU)*2</td><td>x4 &#x3D; [1,512,45,60]x &#x3D; [1,1024,23,30]</td><td>x &#x3D; [1,512,45,60]</td></tr><tr><td>8</td><td>self.up2</td><td>ConvT +(Conv+BN+ReLU)*2</td><td>x3 &#x3D; [1,256,90,120]x &#x3D; [1,512,45,60]</td><td>x &#x3D; [1,256,90,120]</td></tr><tr><td>9</td><td>self.up3</td><td>ConvT +(Conv+BN+ReLU)*2</td><td>x2 &#x3D; [1,128,180,240]x &#x3D; [1,256,90,120]</td><td>x &#x3D; [1,128,180,240]</td></tr><tr><td>10</td><td>self.up4</td><td>ConvT +(Conv+BN+ReLU)*2</td><td>x1&#x3D; [1,64,360,480]x &#x3D; [1,128,180,240]</td><td>x &#x3D; [1,64,360,480]</td></tr><tr><td>11</td><td>self.final_conv</td><td>Conv2d</td><td>x &#x3D; [1,64,360,480]</td><td>x &#x3D; [1,12,360,480]</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 分割项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「目标追踪系列」（四）训练DeepSort目标追踪算法</title>
      <link href="/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%AD%E7%BB%83DeepSort%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%AE%97%E6%B3%95/"/>
      <url>/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%AD%E7%BB%83DeepSort%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数据集-「MOT17-Tiny」"><a href="#数据集-「MOT17-Tiny」" class="headerlink" title="数据集 「MOT17 Tiny」"></a>数据集 「MOT17 Tiny」</h2><h3 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 下载 MOT17 数据集压缩包</span><br><span class="line">wget https://download.openmmlab.com/mmtracking/data/MOT17_tiny.zip -P ./data</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">rm -rf data/MOT17_tiny</span><br><span class="line">unzip ./data/MOT17_tiny.zip -d ./data</span><br></pre></td></tr></table></figure><h3 id="将-txt-格式的标注文件，转换为-coco-格式的-json-文件"><a href="#将-txt-格式的标注文件，转换为-coco-格式的-json-文件" class="headerlink" title="将 txt 格式的标注文件，转换为 coco 格式的 json 文件"></a>将 txt 格式的标注文件，转换为 coco 格式的 json 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./tools/convert_datasets/mot/mot2coco.py -i ./data/MOT17_tiny/ -o ./data/MOT17_tiny/annotations --split-train --convert-det</span><br></pre></td></tr></table></figure><h3 id="从数据集中把行人的图块裁剪出来，用于训练-ReID-重识别模型"><a href="#从数据集中把行人的图块裁剪出来，用于训练-ReID-重识别模型" class="headerlink" title="从数据集中把行人的图块裁剪出来，用于训练 ReID 重识别模型"></a>从数据集中把行人的图块裁剪出来，用于训练 ReID 重识别模型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除已有的 reid 目录（如有）</span><br><span class="line">rm -rf ./data/MOT17_tiny/reid</span><br><span class="line"></span><br><span class="line"># 大概需要 20 分钟</span><br><span class="line">python ./tools/convert_datasets/mot/mot2reid.py -i ./data/MOT17_tiny/ -o ./data/MOT17_tiny/reid --val-split 0.9 --vis-threshold 0.8</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="分别训练-DeepSORT-模型中的不同模块"><a href="#分别训练-DeepSORT-模型中的不同模块" class="headerlink" title="分别训练 DeepSORT 模型中的不同模块"></a>分别训练 DeepSORT 模型中的不同模块</h2><h3 id="配置-DeepSORT-中的目标检测算法模块"><a href="#配置-DeepSORT-中的目标检测算法模块" class="headerlink" title="配置 DeepSORT 中的目标检测算法模块"></a>配置 DeepSORT 中的目标检测算法模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> set_random_seed</span><br><span class="line"></span><br><span class="line">cfg = mmcv.Config.fromfile(<span class="string">&#x27;./configs/det/faster-rcnn_r50_fpn_4e_mot17-half.py&#x27;</span>)</span><br><span class="line">cfg.data_root = <span class="string">&#x27;data/MOT17_tiny/&#x27;</span></span><br><span class="line">cfg.data.test.ann_file = cfg.data.test.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.ann_file = cfg.data.train.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.val.ann_file = cfg.data.val.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cfg.data.test.img_prefix = cfg.data.test.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.img_prefix = cfg.data.train.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.val.img_prefix = cfg.data.val.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cfg.work_dir = <span class="string">&#x27;./tutorial_exps/detector&#x27;</span></span><br><span class="line">cfg.seed = <span class="number">0</span></span><br><span class="line">set_random_seed(<span class="number">0</span>, deterministic=<span class="literal">False</span>)</span><br><span class="line">cfg.gpu_ids = <span class="built_in">range</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg.pretty_text)</span><br></pre></td></tr></table></figure><h3 id="训练-DeepSORT-中的目标检测算法模块"><a href="#训练-DeepSORT-中的目标检测算法模块" class="headerlink" title="训练 DeepSORT 中的目标检测算法模块"></a>训练 DeepSORT 中的目标检测算法模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model.init_weights()</span></span><br><span class="line">train_model(model, datasets, cfg)</span><br></pre></td></tr></table></figure><h3 id="配置-DeepSORT-中的-ReID-重识别算法模块"><a href="#配置-DeepSORT-中的-ReID-重识别算法模块" class="headerlink" title="配置 DeepSORT 中的 ReID 重识别算法模块"></a>配置 DeepSORT 中的 ReID 重识别算法模块</h3><p>ReID 重识别算法本质上是一个多分类图像分类模型，输入行人的 patch 图，提取图中特征，输出 ID 号</p><p>用来从图像特征中判断当前行人是否是新人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> set_random_seed</span><br><span class="line"></span><br><span class="line">cfg = mmcv.Config.fromfile(<span class="string">&#x27;./configs/reid/resnet50_b32x8_MOT17.py&#x27;</span>)</span><br><span class="line">cfg.data_root = <span class="string">&#x27;data/MOT17_tiny/&#x27;</span></span><br><span class="line">cfg.data.test.ann_file = cfg.data.test.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.ann_file = <span class="string">&#x27;data/MOT17_tiny/reid/meta/train_9.txt&#x27;</span></span><br><span class="line">cfg.data.val.ann_file = cfg.data.val.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cfg.data.test.data_prefix = cfg.data.test.data_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.data_prefix = cfg.data.train.data_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.val.data_prefix = cfg.data.val.data_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习率策略</span></span><br><span class="line">cfg.lr_config = <span class="built_in">dict</span>(</span><br><span class="line">    policy=<span class="string">&#x27;step&#x27;</span>,</span><br><span class="line">    warmup=<span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    warmup_iters=<span class="number">200</span>,</span><br><span class="line">    warmup_ratio=<span class="number">1.0</span> / <span class="number">200</span>,</span><br><span class="line">    step=[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">cfg.total_epochs = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">cfg.work_dir = <span class="string">&#x27;./tutorial_exps/reid&#x27;</span></span><br><span class="line">cfg.seed = <span class="number">0</span></span><br><span class="line">set_random_seed(<span class="number">0</span>, deterministic=<span class="literal">False</span>)</span><br><span class="line">cfg.gpu_ids = <span class="built_in">range</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg.pretty_text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmtrack.datasets <span class="keyword">import</span> build_dataset</span><br><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> train_detector <span class="keyword">as</span> train_model</span><br><span class="line"><span class="keyword">from</span> mmtrack.models <span class="keyword">import</span> build_reid <span class="keyword">as</span> build_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = build_model(cfg.model.reid)</span><br><span class="line">model.init_weights()</span><br><span class="line">datasets = [build_dataset(cfg.data.train)]</span><br><span class="line">model.CLASSES = datasets[<span class="number">0</span>].CLASSES</span><br></pre></td></tr></table></figure><h3 id="训练-DeepSORT-中的-ReID-重识别算法模块"><a href="#训练-DeepSORT-中的-ReID-重识别算法模块" class="headerlink" title="训练 DeepSORT 中的 ReID 重识别算法模块"></a>训练 DeepSORT 中的 ReID 重识别算法模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_model(model, datasets, cfg)</span><br></pre></td></tr></table></figure><h2 id="测试训练得到的-DeepSORT-多目标追踪算法"><a href="#测试训练得到的-DeepSORT-多目标追踪算法" class="headerlink" title="测试训练得到的 DeepSORT 多目标追踪算法"></a>测试训练得到的 DeepSORT 多目标追踪算法</h2><h3 id="生成-config-配置文件"><a href="#生成-config-配置文件" class="headerlink" title="生成 config 配置文件"></a>生成 config 配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> set_random_seed</span><br><span class="line"></span><br><span class="line">cfg = mmcv.Config.fromfile(<span class="string">&#x27;./configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-private-half.py&#x27;</span>)</span><br><span class="line">cfg.data_root = <span class="string">&#x27;data/MOT17_tiny/&#x27;</span></span><br><span class="line">cfg.data.test.ann_file = cfg.data.test.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.ann_file = cfg.data.test.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.val.ann_file = cfg.data.val.ann_file.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cfg.data.test.img_prefix = cfg.data.test.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.train.img_prefix = cfg.data.train.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line">cfg.data.val.img_prefix = cfg.data.val.img_prefix.replace(<span class="string">&#x27;data/MOT17/&#x27;</span>,<span class="string">&#x27;data/MOT17_tiny/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定训练好的目标检测模块和 ReID 重识别模块</span></span><br><span class="line">cfg.model.detector.init_cfg.checkpoint = <span class="string">&#x27;./tutorial_exps/detector/epoch_4.pth&#x27;</span></span><br><span class="line">cfg.model.reid.init_cfg.checkpoint = <span class="string">&#x27;./tutorial_exps/reid/epoch_2.pth&#x27;</span></span><br><span class="line"></span><br><span class="line">cfg.work_dir = <span class="string">&#x27;./tutorial_exps&#x27;</span></span><br><span class="line">cfg.seed = <span class="number">0</span></span><br><span class="line">set_random_seed(<span class="number">0</span>, deterministic=<span class="literal">False</span>)</span><br><span class="line">cfg.gpu_ids = <span class="built_in">range</span>(<span class="number">1</span>)</span><br><span class="line">cfg.data.test.test_mode = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg.pretty_text)</span><br></pre></td></tr></table></figure><h3 id="保存config配置文件"><a href="#保存config配置文件" class="headerlink" title="保存config配置文件"></a>保存config配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://zihao-openmmlab.obs.cn-east-3.myhuaweicloud.com/20220418-mmtracking/deepsort_faster-rcnn_fpn_4e_mot17-new.py -O configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-new.py</span><br></pre></td></tr></table></figure><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmtrack.datasets <span class="keyword">import</span> build_dataloader</span><br><span class="line"><span class="keyword">from</span> mmtrack.models <span class="keyword">import</span> build_model</span><br><span class="line"><span class="keyword">from</span> mmcv.parallel <span class="keyword">import</span> MMDataParallel</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> single_gpu_test</span><br><span class="line"><span class="keyword">from</span> mmtrack.datasets <span class="keyword">import</span> build_dataset</span><br><span class="line"></span><br><span class="line">dataset = build_dataset(cfg.data.test)</span><br><span class="line">data_loader = build_dataloader(</span><br><span class="line">    dataset,</span><br><span class="line">    samples_per_gpu=<span class="number">1</span>,</span><br><span class="line">    workers_per_gpu=cfg.data.workers_per_gpu,</span><br><span class="line">    dist=<span class="literal">False</span>,</span><br><span class="line">    shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型，载入 checkpoint 权重文件</span></span><br><span class="line">model = build_model(cfg.model)</span><br><span class="line">model.init_weights()</span><br><span class="line"></span><br><span class="line">model = MMDataParallel(model, device_ids=cfg.gpu_ids)</span><br></pre></td></tr></table></figure><h3 id="在测试集上预测"><a href="#在测试集上预测" class="headerlink" title="在测试集上预测"></a>在测试集上预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputs = single_gpu_test(model, data_loader)</span><br></pre></td></tr></table></figure><h3 id="在测试集上评估"><a href="#在测试集上评估" class="headerlink" title="在测试集上评估"></a>在测试集上评估</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eval_kwargs = cfg.get(<span class="string">&#x27;evaluation&#x27;</span>, &#123;&#125;).copy()</span><br><span class="line"><span class="comment"># hard-code way to remove EvalHook args</span></span><br><span class="line">eval_hook_args = [</span><br><span class="line">    <span class="string">&#x27;interval&#x27;</span>, <span class="string">&#x27;tmpdir&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;gpu_collect&#x27;</span>, <span class="string">&#x27;save_best&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rule&#x27;</span>, <span class="string">&#x27;by_epoch&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> eval_hook_args:</span><br><span class="line">    eval_kwargs.pop(key, <span class="literal">None</span>)</span><br><span class="line">eval_kwargs.update(<span class="built_in">dict</span>(metric=[<span class="string">&#x27;track&#x27;</span>]))</span><br><span class="line">metric = dataset.evaluate(outputs, **eval_kwargs)</span><br><span class="line"><span class="built_in">print</span>(metric)</span><br></pre></td></tr></table></figure><h3 id="对新视频预测"><a href="#对新视频预测" class="headerlink" title="对新视频预测"></a>对新视频预测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 命令行方式实现</span><br><span class="line"># Deepsort算法仅需指定 config 文件，不需指定 checkpoint 文件</span><br><span class="line">python demo/demo_mot_vis.py \</span><br><span class="line">        configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-new.py \</span><br><span class="line">        --input data/mot_people_short.mp4 \</span><br><span class="line">        --output outputs/I1_MOT_people_short.mp4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python API 方式实现</span></span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/I2_MOT_people_short.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-new.py&#x27;</span></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">mot_model = init_model(mot_config, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_mot(mot_model, img, frame_id=i)</span><br><span class="line">    </span><br><span class="line">    mot_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            show=<span class="literal">False</span>,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 目标追踪系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「目标追踪系列」（三）基于目标追踪的人流量计数与足迹绘制</title>
      <link href="/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8E%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%9A%84%E4%BA%BA%E6%B5%81%E9%87%8F%E8%AE%A1%E6%95%B0%E4%B8%8E%E8%B6%B3%E8%BF%B9%E7%BB%98%E5%88%B6/"/>
      <url>/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E4%BA%8E%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%9A%84%E4%BA%BA%E6%B5%81%E9%87%8F%E8%AE%A1%E6%95%B0%E4%B8%8E%E8%B6%B3%E8%BF%B9%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="人流量计数与足迹绘制"><a href="#人流量计数与足迹绘制" class="headerlink" title="人流量计数与足迹绘制"></a>人流量计数与足迹绘制</h2><h3 id="单帧绘制"><a href="#单帧绘制" class="headerlink" title="单帧绘制"></a>单帧绘制</h3><h4 id="导入工具包"><a href="#导入工具包" class="headerlink" title="导入工具包"></a>导入工具包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 opencv-python</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入可视化工具包 matplotlib，并让绘制的图像嵌入在 notebook 中</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义可视化图像函数，输入图像 array，可视化图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_img_from_array</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入 array，matplotlib 可视化格式为 RGB，因此需将 BGR 转 RGB，最后可视化出来&#x27;&#x27;&#x27;</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="从视频中获取某一帧图像"><a href="#从视频中获取某一帧图像" class="headerlink" title="从视频中获取某一帧图像"></a>从视频中获取某一帧图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/output_G1_MOT_people_short.mp4&#x27;</span></span><br><span class="line"><span class="comment"># 读入视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频第i帧画面</span></span><br><span class="line">frame_id = <span class="number">0</span></span><br><span class="line">img = imgs[frame_id]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line">show_img_from_arrat(img)</span><br></pre></td></tr></table></figure><h4 id="导入多目标追踪模型"><a href="#导入多目标追踪模型" class="headerlink" title="导入多目标追踪模型"></a>导入多目标追踪模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/bytetrack/bytetrack_yolox_x_crowdhuman_mot17-private-half.py&#x27;</span></span><br><span class="line">mot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/mot/bytetrack/bytetrack_yolox_x/bytetrack_yolox_x_crowdhuman_mot17-private-half_20211218_205500-1985c9f0.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">mot_model = init_model(mot_config, mot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="执行多目标追踪"><a href="#执行多目标追踪" class="headerlink" title="执行多目标追踪"></a>执行多目标追踪</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = inference_mot(mot_model, img, frame_id=frame_id)</span><br></pre></td></tr></table></figure><h4 id="解析多目标追踪result结果"><a href="#解析多目标追踪result结果" class="headerlink" title="解析多目标追踪result结果"></a>解析多目标追踪result结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(result.keys())</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;det_bboxes&#x27;</span>][<span class="number">0</span>][:<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(result[<span class="string">&#x27;det_bboxes&#x27;</span>][<span class="number">0</span>]),<span class="built_in">len</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>每个目标检测框的左上角坐标、右下角坐标、置信度</p><p>[0]表示只看行人类别</p><p>ID、左上角x、左上角y、右下角x、右下角y、置信度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 当前帧各目标的ID</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>][:,<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="整理多目标追踪result结果"><a href="#整理多目标追踪result结果" class="headerlink" title="整理多目标追踪result结果"></a>整理多目标追踪result结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from mmtrack.core import imshow_tracks, results2outs</span><br><span class="line">outs_track = results2outs(bbox_results=result.get(&#x27;track_bboxes&#x27;, None))</span><br><span class="line">print(outs_track)</span><br><span class="line"># 取出结果</span><br><span class="line">bboxes = outs_track.get(&#x27;bboxes&#x27;, None)</span><br><span class="line">labels = outs_track.get(&#x27;labels&#x27;, None)</span><br><span class="line">ids = outs_track.get(&#x27;ids&#x27;, None)</span><br><span class="line">print(labels, ids)</span><br></pre></td></tr></table></figure><h4 id="可视化配置-调色板"><a href="#可视化配置-调色板" class="headerlink" title="可视化配置-调色板"></a>可视化配置-调色板</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成调色板</span></span><br><span class="line">palette = sns.color_palette(<span class="string">&#x27;hls&#x27;</span>, <span class="number">25</span>)</span><br><span class="line"><span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">random.seed(<span class="number">3</span>)</span><br><span class="line">bbox_color = random.choice(palette)</span><br><span class="line">bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(bbox_color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入追踪ID，生成专属颜色</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">    bbox_color = random.choice(palette)</span><br><span class="line">    bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> bbox_color</span><br><span class="line"><span class="built_in">print</span>(get_color(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="可视化配置-目标检测矩形框"><a href="#可视化配置-目标检测矩形框" class="headerlink" title="可视化配置-目标检测矩形框"></a>可视化配置-目标检测矩形框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标检测框线宽</span></span><br><span class="line">thickness = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轨迹线粗细</span></span><br><span class="line">trace_radius = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测置信度阈值</span></span><br><span class="line">score_thr = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体大小</span></span><br><span class="line">font_scale = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 置信度和 ID 单个数字的宽高</span></span><br><span class="line">text_width = <span class="number">9</span></span><br><span class="line">text_height = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别信息</span></span><br><span class="line">classes = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测框的 x坐标 不超过图像宽度</span></span><br><span class="line">bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]] = np.clip(bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]], <span class="number">0</span>, img.shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 目标检测框的 y坐标 不超过图像高度</span></span><br><span class="line">bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]] = np.clip(bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]], <span class="number">0</span>, img.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选出目标检测置信度大于指定阈值的目标，并取出其索引、目标检测、类别、ID信息</span></span><br><span class="line">inds = np.where(bboxes[:, -<span class="number">1</span>] &gt; score_thr)[<span class="number">0</span>]</span><br><span class="line">bboxes = bboxes[inds]</span><br><span class="line">labels = labels[inds]</span><br><span class="line">ids = ids[inds]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历当前帧中的每个目标，可视化</span></span><br><span class="line"><span class="keyword">for</span> i, (bbox, label, <span class="built_in">id</span>) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(bboxes, labels, ids)):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取目标检测框的左上角、右下角坐标，及置信度</span></span><br><span class="line">    x1, y1, x2, y2 = bbox[:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">    score = <span class="built_in">float</span>(bbox[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制目标检测矩形框</span></span><br><span class="line">    bbox_color = get_color(<span class="built_in">id</span>)</span><br><span class="line">    cv2.rectangle(img, (x1, y1), (x2, y2), bbox_color, thickness=thickness)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 置信度文字</span></span><br><span class="line">    text = <span class="string">&#x27;&#123;:.02f&#125;&#x27;</span>.<span class="built_in">format</span>(score)</span><br><span class="line">    <span class="keyword">if</span> classes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="comment"># 类别信息</span></span><br><span class="line">        text += <span class="string">f&#x27;|<span class="subst">&#123;classes[label]&#125;</span>&#x27;</span></span><br><span class="line">    <span class="comment"># 绘制置信度文字的背景</span></span><br><span class="line">    width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">    img[y1:y1 + text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">    <span class="comment"># 写置信度文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">    cv2.putText(img, text, (x1, y1 + text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标 ID 文字</span></span><br><span class="line">    text = <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">    <span class="comment"># 绘制 ID 文字的背景</span></span><br><span class="line">    width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">    img[y1 + text_height:y1 + <span class="number">2</span> * text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">    <span class="comment"># 写 ID 文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">    cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">id</span>), (x1, y1 + <span class="number">2</span> * text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">     </span><br><span class="line">show_img_from_array(img)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h6u851brj20ma0cswfp.jpg"></p><h3 id="多帧绘制「封装函数-人流量计数与足迹绘制」"><a href="#多帧绘制「封装函数-人流量计数与足迹绘制」" class="headerlink" title="多帧绘制「封装函数-人流量计数与足迹绘制」"></a>多帧绘制「封装函数-人流量计数与足迹绘制」</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 opencv-python</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 导入可视化工具包 matplotlib，并让绘制的图像嵌入在 notebook 中</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"><span class="keyword">from</span> mmtrack.core <span class="keyword">import</span> imshow_tracks, results2outs</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义可视化图像函数，输入图像 array，可视化图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_img_from_array</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入 array，matplotlib 可视化格式为 RGB，因此需将 BGR 转 RGB，最后可视化出来&#x27;&#x27;&#x27;</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入追踪ID，生成专属颜色</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">    bbox_color = random.choice(palette)</span><br><span class="line">    bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> bbox_color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理单帧函数，输入MOT多目标追踪结果，输出 MOT多目标追踪可视化图像、所有目标轨迹中心点坐标&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 整理多目标追踪结果</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 进一步整理result结果</span></span><br><span class="line">    outs_track = results2outs(bbox_results=result.get(<span class="string">&#x27;track_bboxes&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出结果</span></span><br><span class="line">    bboxes = outs_track.get(<span class="string">&#x27;bboxes&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    labels = outs_track.get(<span class="string">&#x27;labels&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    ids = outs_track.get(<span class="string">&#x27;ids&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标检测框的 x坐标 不超过图像宽度</span></span><br><span class="line">    bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]] = np.clip(bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]], <span class="number">0</span>, img.shape[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 目标检测框的 y坐标 不超过图像高度</span></span><br><span class="line">    bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]] = np.clip(bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]], <span class="number">0</span>, img.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 筛选出目标检测置信度大于指定阈值的目标，并取出其索引、目标检测、类别、ID信息</span></span><br><span class="line">    inds = np.where(bboxes[:, -<span class="number">1</span>] &gt; score_thr)[<span class="number">0</span>]</span><br><span class="line">    bboxes = bboxes[inds]</span><br><span class="line">    labels = labels[inds]</span><br><span class="line">    ids = ids[inds]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 遍历每个目标，可视化</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    trace_coords_frame = [] <span class="comment"># 存放当前帧画面中 所有目标轨迹中心点坐标</span></span><br><span class="line">    <span class="keyword">for</span> i, (bbox, label, <span class="built_in">id</span>) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(bboxes, labels, ids)):</span><br><span class="line">        <span class="comment"># 获取目标检测框的左上角、右下角坐标，及置信度</span></span><br><span class="line">        x1, y1, x2, y2 = bbox[:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">        score = <span class="built_in">float</span>(bbox[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制目标检测矩形框</span></span><br><span class="line">        bbox_color = get_color(<span class="built_in">id</span>)</span><br><span class="line">        cv2.rectangle(img, (x1, y1), (x2, y2), bbox_color, thickness=thickness)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制矩形框中心点轨迹点，指定圆心坐标和半径，红色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">        <span class="comment"># trace_coord = &#123;id:[[(x1+x2)//2, (y1+y2)//2], bbox_color]&#125;</span></span><br><span class="line">        <span class="comment"># trace_coord_obj = [id, [(x1+x2)//2, (y1+y2)//2, bbox_color]] # 目标检测框中心点作为轨迹点</span></span><br><span class="line">        trace_coord_obj = [<span class="built_in">id</span>, [(x1+x2)//<span class="number">2</span>, y2, bbox_color]]           <span class="comment"># 目标检测框底边中点作为轨迹点</span></span><br><span class="line">        trace_coords_frame.append(trace_coord_obj)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 置信度文字</span></span><br><span class="line">        text = <span class="string">&#x27;&#123;:.02f&#125;&#x27;</span>.<span class="built_in">format</span>(score)</span><br><span class="line">        <span class="keyword">if</span> classes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="comment"># 类别信息</span></span><br><span class="line">            text += <span class="string">f&#x27;|<span class="subst">&#123;classes[label]&#125;</span>&#x27;</span></span><br><span class="line">        <span class="comment"># 绘制置信度文字的背景</span></span><br><span class="line">        width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">        img[y1:y1 + text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">        <span class="comment"># 写置信度文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">        cv2.putText(img, text, (x1, y1 + text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID</span></span><br><span class="line">        text = <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">        <span class="comment"># 绘制ID文字的背景</span></span><br><span class="line">        width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">        img[y1 + text_height:y1 + <span class="number">2</span> * text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">        <span class="comment"># 写 ID文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">        cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">id</span>), (x1, y1 + <span class="number">2</span> * text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img, trace_coords_frame</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">thickness = <span class="number">2</span>  <span class="comment"># 目标检测框线宽</span></span><br><span class="line">trace_radius = <span class="number">10</span>  <span class="comment"># 轨迹线粗细</span></span><br><span class="line">score_thr = <span class="number">0.0</span>  <span class="comment"># 目标检测置信度阈值</span></span><br><span class="line">font_scale = <span class="number">0.4</span>  <span class="comment"># 字体大小</span></span><br><span class="line">text_width = <span class="number">9</span></span><br><span class="line">text_height = <span class="number">13</span>  <span class="comment"># 置信度和 ID 单个数字的宽高</span></span><br><span class="line">classes = <span class="literal">None</span>  <span class="comment"># 类别信息</span></span><br><span class="line">palette = sns.color_palette(<span class="string">&#x27;hls&#x27;</span>,<span class="number">30</span>)  <span class="comment"># 生成调色板</span></span><br><span class="line">thickness = <span class="number">2</span>  <span class="comment"># 目标检测框线宽</span></span><br><span class="line">trace_radius = <span class="number">10</span>  <span class="comment"># 轨迹线粗细</span></span><br><span class="line">score_thr=<span class="number">0.0</span>  <span class="comment"># 目标检测置信度阈值</span></span><br><span class="line">font_scale=<span class="number">0.4</span>  <span class="comment"># 字体大小</span></span><br><span class="line">text_width = <span class="number">9</span></span><br><span class="line">text_height = <span class="number">13</span>  <span class="comment"># 置信度和 ID 单个数字的宽高</span></span><br><span class="line">classes = <span class="literal">None</span>  <span class="comment"># 类别信息 </span></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/G1_MOT_people_short.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ByteTrack算法</span></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/bytetrack/bytetrack_yolox_x_crowdhuman_mot17-private-half.py&#x27;</span></span><br><span class="line">mot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/mot/bytetrack/bytetrack_yolox_x/bytetrack_yolox_x_crowdhuman_mot17-private-half_20211218_205500-1985c9f0.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">mot_model = init_model(mot_config, mot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Deepsort算法</span></span><br><span class="line"><span class="comment"># # 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line"><span class="comment"># mot_config = &#x27;./configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-private-half.py&#x27;</span></span><br><span class="line"><span class="comment"># # 初始化模型</span></span><br><span class="line"><span class="comment"># mot_model = init_model(mot_config, device=&#x27;cuda:0&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line"></span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人数计数</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录每一帧的各目标轨迹点坐标</span></span><br><span class="line">trace_coord_video = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对视频逐帧处理</span></span><br><span class="line"><span class="keyword">for</span> frame_id, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 运行多目标追踪</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    result = inference_mot(mot_model, img, frame_id=frame_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取当前帧目标检测可视化效果，及各目标轨迹点坐标</span></span><br><span class="line">    img, trace_coord_frame = process_result(result)</span><br><span class="line">    trace_coord_video.append(trace_coord_frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 绘制轨迹点：从第一帧到当前帧 所有目标的轨迹点</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="keyword">for</span> trace_coord_frame <span class="keyword">in</span> trace_coord_video: <span class="comment"># 遍历每一帧</span></span><br><span class="line">        <span class="keyword">for</span> trace_coord_obj <span class="keyword">in</span> trace_coord_frame: <span class="comment"># 遍历每一个目标</span></span><br><span class="line">            <span class="comment"># 绘制圆，指定圆心坐标和半径，颜色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">            cv2.circle(img, (trace_coord_obj[<span class="number">1</span>][<span class="number">0</span>], trace_coord_obj[<span class="number">1</span>][<span class="number">1</span>]),<span class="number">5</span>, trace_coord_obj[<span class="number">1</span>][<span class="number">2</span>], -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment">#  获取人数</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 用当前最大的 ID 号作为人数值</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>][:,<span class="number">0</span>].<span class="built_in">any</span>(): <span class="comment"># 检测出行人</span></span><br><span class="line">        num = <span class="built_in">max</span>(num, <span class="number">1</span>+<span class="built_in">max</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>][:,<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 没有检测出行人</span></span><br><span class="line">        num = num</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可视化总人数：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">    img = cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">int</span>(num)), (<span class="number">25</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 可视化当前人数</span></span><br><span class="line">    img = cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">len</span>(trace_coord_frame)), (<span class="number">25</span>, <span class="number">350</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">5</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将处理后的该帧画面图像文件，保存至 /tmp 目录下</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;frame_id:06d&#125;</span>.jpg&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新进度条</span></span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由每一帧的图像文件，生成视频</span></span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;帧图像保存路径&#x27;</span>,out_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总人数&#x27;</span>, <span class="built_in">int</span>(num))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(trace_coord_video))</span><br><span class="line"><span class="comment"># 第一帧的目标ID、轨迹坐标、颜色</span></span><br><span class="line"><span class="built_in">print</span>(trace_coord_video[<span class="number">70</span>])</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><iframe src="//player.bilibili.com/player.html?aid=811756893&bvid=BV1W34y1E7kY&cid=726748462&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="人流量计数图表可视化与足迹绘制"><a href="#人流量计数图表可视化与足迹绘制" class="headerlink" title="人流量计数图表可视化与足迹绘制"></a>人流量计数图表可视化与足迹绘制</h2><h3 id="导入工具包-1"><a href="#导入工具包-1" class="headerlink" title="导入工具包"></a>导入工具包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 opencv-python</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入可视化工具包 matplotlib，并让绘制的图像嵌入在 notebook 中</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"><span class="keyword">from</span> mmtrack.core <span class="keyword">import</span> imshow_tracks, results2outs</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义可视化图像函数，输入图像 array，可视化图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_img_from_array</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入 array，matplotlib 可视化格式为 RGB，因此需将 BGR 转 RGB，最后可视化出来&#x27;&#x27;&#x27;</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入追踪ID，生成专属颜色</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">    bbox_color = random.choice(palette)</span><br><span class="line">    bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> bbox_color</span><br></pre></td></tr></table></figure><h3 id="基础可视化设置"><a href="#基础可视化设置" class="headerlink" title="基础可视化设置"></a>基础可视化设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmtrack.core <span class="keyword">import</span> imshow_tracks, results2outs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测框线宽</span></span><br><span class="line">thickness = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轨迹线粗细</span></span><br><span class="line">trace_radius = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测置信度阈值</span></span><br><span class="line">score_thr = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体大小</span></span><br><span class="line">font_scale = <span class="number">0.4</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 置信度和 ID 单个数字的宽高</span></span><br><span class="line">text_width = <span class="number">9</span></span><br><span class="line">text_height = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别信息</span></span><br><span class="line">classes = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成调色板</span></span><br><span class="line">palette = sns.color_palette(<span class="string">&#x27;hls&#x27;</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测框线宽</span></span><br><span class="line">thickness = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轨迹线粗细</span></span><br><span class="line">trace_radius = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标检测置信度阈值</span></span><br><span class="line">score_thr=<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体大小</span></span><br><span class="line">font_scale=<span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 置信度和 ID 单个数字的宽高</span></span><br><span class="line">text_width = <span class="number">9</span></span><br><span class="line">text_height = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别信息</span></span><br><span class="line">classes = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">seed</span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">    bbox_color = random.choice(palette)</span><br><span class="line">    bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> bbox_color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理单帧函数，输入MOT多目标追踪结果，输出 MOT多目标追踪可视化图像、所有目标轨迹中心点坐标&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 整理多目标追踪结果</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 进一步整理result结果</span></span><br><span class="line">    outs_track = results2outs(bbox_results=result.get(<span class="string">&#x27;track_bboxes&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出结果</span></span><br><span class="line">    bboxes = outs_track.get(<span class="string">&#x27;bboxes&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    labels = outs_track.get(<span class="string">&#x27;labels&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    ids = outs_track.get(<span class="string">&#x27;ids&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标检测框的 x坐标 不超过图像宽度</span></span><br><span class="line">    bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]] = np.clip(bboxes[:, [<span class="number">0</span>,<span class="number">2</span>]], <span class="number">0</span>, img.shape[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 目标检测框的 y坐标 不超过图像高度</span></span><br><span class="line">    bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]] = np.clip(bboxes[:, [<span class="number">1</span>,<span class="number">3</span>]], <span class="number">0</span>, img.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 筛选出目标检测置信度大于指定阈值的目标，并取出其索引、目标检测、类别、ID信息</span></span><br><span class="line">    inds = np.where(bboxes[:, -<span class="number">1</span>] &gt; score_thr)[<span class="number">0</span>]</span><br><span class="line">    bboxes = bboxes[inds]</span><br><span class="line">    labels = labels[inds]</span><br><span class="line">    ids = ids[inds]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 遍历每个目标，可视化</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    trace_coords_frame = [] <span class="comment"># 存放当前帧画面中 所有目标轨迹中心点坐标</span></span><br><span class="line">    <span class="keyword">for</span> i, (bbox, label, <span class="built_in">id</span>) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(bboxes, labels, ids)):</span><br><span class="line">        <span class="comment"># 获取目标检测框的左上角、右下角坐标，及置信度</span></span><br><span class="line">        x1, y1, x2, y2 = bbox[:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">        score = <span class="built_in">float</span>(bbox[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制目标检测矩形框</span></span><br><span class="line">        bbox_color = get_color(<span class="built_in">id</span>)</span><br><span class="line">        cv2.rectangle(img, (x1, y1), (x2, y2), bbox_color, thickness=thickness)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制矩形框中心点轨迹点，指定圆心坐标和半径，红色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">        <span class="comment"># trace_coord = &#123;id:[[(x1+x2)//2, (y1+y2)//2], bbox_color]&#125;</span></span><br><span class="line">        <span class="comment"># trace_coord_obj = [id, [(x1+x2)//2, (y1+y2)//2, bbox_color]] # 目标检测框中心点作为轨迹点</span></span><br><span class="line">        trace_coord_obj = [<span class="built_in">id</span>, [(x1+x2)//<span class="number">2</span>, y2, bbox_color]]           <span class="comment"># 目标检测框底边中点作为轨迹点</span></span><br><span class="line">        trace_coords_frame.append(trace_coord_obj)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 置信度文字</span></span><br><span class="line">        text = <span class="string">&#x27;&#123;:.02f&#125;&#x27;</span>.<span class="built_in">format</span>(score)</span><br><span class="line">        <span class="keyword">if</span> classes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="comment"># 类别信息</span></span><br><span class="line">            text += <span class="string">f&#x27;|<span class="subst">&#123;classes[label]&#125;</span>&#x27;</span></span><br><span class="line">        <span class="comment"># 绘制置信度文字的背景</span></span><br><span class="line">        width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">        img[y1:y1 + text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">        <span class="comment"># 写置信度文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">        cv2.putText(img, text, (x1, y1 + text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID</span></span><br><span class="line">        text = <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">        <span class="comment"># 绘制ID文字的背景</span></span><br><span class="line">        width = <span class="built_in">len</span>(text) * text_width</span><br><span class="line">        img[y1 + text_height:y1 + <span class="number">2</span> * text_height, x1:x1 + width, :] = bbox_color</span><br><span class="line">        <span class="comment"># 写 ID文字：图像，文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">        cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">id</span>), (x1, y1 + <span class="number">2</span> * text_height - <span class="number">2</span>), cv2.FONT_HERSHEY_COMPLEX, font_scale, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img, trace_coords_frame</span><br></pre></td></tr></table></figure><h3 id="创建存放图像的临时文件夹"><a href="#创建存放图像的临时文件夹" class="headerlink" title="创建存放图像的临时文件夹"></a>创建存放图像的临时文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">temp_dir = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(temp_dir):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    os.mkdir(temp_dir)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建文件夹 &#123;&#125; 用于存放每帧图像&#x27;</span>.<span class="built_in">format</span>(temp_dir))</span><br><span class="line">    os.mkdir(temp_dir+<span class="string">&#x27;-plot&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建文件夹 &#123;&#125; 用于存放每帧图像&#x27;</span>.<span class="built_in">format</span>(temp_dir+<span class="string">&#x27;-plot&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="多目标追踪视频处理"><a href="#多目标追踪视频处理" class="headerlink" title="多目标追踪视频处理"></a>多目标追踪视频处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_medium.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/G2_MOT_people_medium.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ByteTrack算法</span></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/bytetrack/bytetrack_yolox_x_crowdhuman_mot17-private-half.py&#x27;</span></span><br><span class="line">mot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/mot/bytetrack/bytetrack_yolox_x/bytetrack_yolox_x_crowdhuman_mot17-private-half_20211218_205500-1985c9f0.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">mot_model = init_model(mot_config, mot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Deepsort算法</span></span><br><span class="line"><span class="comment"># # 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line"><span class="comment"># mot_config = &#x27;./configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-private-half.py&#x27;</span></span><br><span class="line"><span class="comment"># # 初始化模型</span></span><br><span class="line"><span class="comment"># mot_model = init_model(mot_config, device=&#x27;cuda:0&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line"></span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = temp_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人数计数</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录每一帧的总人数、当前人数</span></span><br><span class="line">num_per_frame = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录每一帧的各目标轨迹点坐标</span></span><br><span class="line">trace_coord_video = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对视频逐帧处理</span></span><br><span class="line"><span class="keyword">for</span> frame_id, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 运行多目标追踪</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    result = inference_mot(mot_model, img, frame_id=frame_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取当前帧目标检测可视化效果，及各目标轨迹点坐标</span></span><br><span class="line">    img, trace_coord_frame = process_result(result)</span><br><span class="line">    trace_coord_video.append(trace_coord_frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 绘制轨迹点：从第一帧到当前帧 所有目标的轨迹点</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="keyword">for</span> trace_coord_frame <span class="keyword">in</span> trace_coord_video: <span class="comment"># 遍历每一帧</span></span><br><span class="line">        <span class="keyword">for</span> trace_coord_obj <span class="keyword">in</span> trace_coord_frame: <span class="comment"># 遍历每一个目标</span></span><br><span class="line">            <span class="comment"># 绘制圆，指定圆心坐标和半径，颜色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">            cv2.circle(img, (trace_coord_obj[<span class="number">1</span>][<span class="number">0</span>], trace_coord_obj[<span class="number">1</span>][<span class="number">1</span>]),<span class="number">5</span>, trace_coord_obj[<span class="number">1</span>][<span class="number">2</span>], -<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment">#  获取人数</span></span><br><span class="line">    <span class="comment">#######################</span></span><br><span class="line">    <span class="comment"># 用当前最大的 ID 号作为人数值</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>][:,<span class="number">0</span>].<span class="built_in">any</span>(): <span class="comment"># 检测出行人</span></span><br><span class="line">        num = <span class="built_in">max</span>(num, <span class="number">1</span>+<span class="built_in">max</span>(result[<span class="string">&#x27;track_bboxes&#x27;</span>][<span class="number">0</span>][:,<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 没有检测出行人</span></span><br><span class="line">        num = num</span><br><span class="line">    num_per_frame.append([frame_id, num, <span class="built_in">len</span>(trace_coord_frame)])</span><br><span class="line">    <span class="comment"># 可视化总人数：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">    img = cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">int</span>(num)), (<span class="number">25</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 可视化当前人数</span></span><br><span class="line">    img = cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">len</span>(trace_coord_frame)), (<span class="number">25</span>, <span class="number">350</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">5</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将处理后的该帧画面图像文件，保存至 /tmp 目录下</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;frame_id:06d&#125;</span>.jpg&#x27;</span>, img)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新进度条</span></span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由每一帧的图像文件，生成视频</span></span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;帧图像保存路径&#x27;</span>,out_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总人数&#x27;</span>, <span class="built_in">int</span>(num))</span><br></pre></td></tr></table></figure><h3 id="绘制人流量折线图"><a href="#绘制人流量折线图" class="headerlink" title="绘制人流量折线图"></a>绘制人流量折线图</h3><h4 id="解析多目标追踪结果"><a href="#解析多目标追踪结果" class="headerlink" title="解析多目标追踪结果"></a>解析多目标追踪结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(num_per_frame[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><h4 id="单张折线图绘制"><a href="#单张折线图绘制" class="headerlink" title="单张折线图绘制"></a>单张折线图绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间</span></span><br><span class="line">X_frames = np.array(num_per_frame)[:,<span class="number">0</span>] / imgs.fps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总人流量</span></span><br><span class="line">Y_people = np.array(num_per_frame)[:,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前画面人数</span></span><br><span class="line">Z_people = np.array(num_per_frame)[:,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(X_frames[:frame_id+<span class="number">1</span>], Y_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;total&#x27;</span>)</span><br><span class="line">plt.plot(X_frames[:frame_id+<span class="number">1</span>], Z_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;current&#x27;</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="built_in">int</span>(num))</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="built_in">int</span>(X_frames.<span class="built_in">max</span>()))</span><br><span class="line">plt.legend(fontsize=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">20</span>) <span class="comment"># 设置坐标文字大小</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Num&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Pedestrian Count&#x27;</span>,fontsize=<span class="number">30</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h8ke0gcqj210g0n6abb.jpg" style="zoom:50%;" /><h4 id="绘制单张人流量折线图叠加视频图"><a href="#绘制单张人流量折线图叠加视频图" class="headerlink" title="绘制单张人流量折线图叠加视频图"></a>绘制单张人流量折线图叠加视频图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(temp_dir)</span><br><span class="line"></span><br><span class="line">each = os.listdir()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 绘制左图-折线图</span></span><br><span class="line">ax1 = plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax1.plot(X_frames[:frame_id+<span class="number">1</span>], Y_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;total&#x27;</span>)</span><br><span class="line">ax1.plot(X_frames[:frame_id+<span class="number">1</span>], Z_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;current&#x27;</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="built_in">int</span>(num))</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="built_in">int</span>(X_frames.<span class="built_in">max</span>()))</span><br><span class="line">ax1.legend(fontsize=<span class="number">20</span>)</span><br><span class="line">ax1.tick_params(labelsize=<span class="number">20</span>) <span class="comment"># 设置坐标文字大小</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Num&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Pedestrian Count&#x27;</span>,fontsize=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 绘制右图-视频图</span></span><br><span class="line">ax2 = plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">im = plt.imread(each)</span><br><span class="line">ax2.imshow(im)</span><br><span class="line">ax2.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line">fig.savefig(<span class="string">&#x27;../test.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;../&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h8lflm97j21b80fo0w8.jpg"></p><h4 id="生成折线图和视频的同步视频"><a href="#生成折线图和视频的同步视频" class="headerlink" title="生成折线图和视频的同步视频"></a>生成折线图和视频的同步视频</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(temp_dir)</span><br><span class="line">total_frames = np.array(num_per_frame)[:,<span class="number">0</span>].<span class="built_in">max</span>()</span><br><span class="line"><span class="keyword">with</span> tqdm(total=total_frames) <span class="keyword">as</span> pbar:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> frame_id, each <span class="keyword">in</span> <span class="built_in">enumerate</span>(os.listdir()):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fig = plt.figure(figsize=(<span class="number">18</span>,<span class="number">6</span>))</span><br><span class="line">            <span class="comment"># 绘制左图-折线图</span></span><br><span class="line">            ax1 = plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">            ax1.plot(X_frames[:frame_id+<span class="number">1</span>], Y_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;total&#x27;</span>)</span><br><span class="line">            ax1.plot(X_frames[:frame_id+<span class="number">1</span>], Z_people[:frame_id+<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;current&#x27;</span>)</span><br><span class="line">            plt.ylim(<span class="number">0</span>, <span class="built_in">int</span>(num))</span><br><span class="line">            plt.xlim(<span class="number">0</span>, <span class="built_in">int</span>(X_frames.<span class="built_in">max</span>()))</span><br><span class="line">            ax1.legend(fontsize=<span class="number">20</span>)</span><br><span class="line">            ax1.tick_params(labelsize=<span class="number">20</span>) <span class="comment"># 设置坐标文字大小</span></span><br><span class="line">            plt.xlabel(<span class="string">&#x27;Time&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">            plt.ylabel(<span class="string">&#x27;Num&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">            plt.title(<span class="string">&#x27;Pedestrian Count&#x27;</span>,fontsize=<span class="number">30</span>)</span><br><span class="line">            <span class="comment"># 绘制右图-视频图</span></span><br><span class="line">            ax2 = plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">            im = plt.imread(each)</span><br><span class="line">            ax2.imshow(im)</span><br><span class="line">            ax2.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            plt.tight_layout()</span><br><span class="line">            fig.savefig(<span class="string">f&quot;../<span class="subst">&#123;temp_dir+<span class="string">&#x27;-plot&#x27;</span>&#125;</span>/<span class="subst">&#123;frame_id:06d&#125;</span>.jpg&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        pbar.update()</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;../&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由每一帧的图像文件，生成视频</span></span><br><span class="line">mmcv.frames2video(temp_dir+<span class="string">&#x27;-plot&#x27;</span>, <span class="string">&#x27;outputs/test2_plot.mp4&#x27;</span>, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h3><iframe src="//player.bilibili.com/player.html?aid=684374174&bvid=BV1xU4y127ka&cid=726776816&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 目标追踪系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「目标追踪系列」（二）基于mmTracking的目标追踪实现</title>
      <link href="/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8EmmTracking%E7%9A%84%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E4%BA%8EmmTracking%E7%9A%84%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="mmTracking介绍"><a href="#mmTracking介绍" class="headerlink" title="mmTracking介绍"></a>mmTracking介绍</h2><p>MMTracking是一款基于PyTorch的视频目标感知开源工具箱，是<a href="http://openmmlab.org/">OpenMMLab</a>项目的一部分。</p><p>主分支代码目前支持<strong>PyTorch 1.5以上</strong>的版本。</p><p><img src="https://user-images.githubusercontent.com/24663779/103343312-c724f480-4ac6-11eb-9c22-b56f1902584e.gif"></p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li><p><strong>首个开源一体化视频目标感知平台</strong></p><p>MMTracking 是首个开源一体化视频目标感知工具箱，同时支持视频目标检测，多目标跟踪，单目标跟踪和视频个例分割等多种任务和算法。</p></li><li><p><strong>模块化设计</strong></p><p>MMTracking将统一的视频目标感知框架解耦成不同的模块组件，通过组合不同模块组件，用户可以便捷地构建自定义视频目标感知模型。</p></li><li><p><strong>简洁、高效、强大</strong></p><p><strong>简洁</strong>：MMTracking与其他OpenMMLab平台充分交互。MMTracking充分复用<a href="https://github.com/open-mmlab/mmdetection">MMDetection</a>中的已有模块，我们只需要修改配置文件就可以使用任何检测器。</p><p><strong>高效</strong>：MMTracking所有操作都在GPU上运行。相比其他开源库的实现，MMTracking的训练和推理更加高效。</p><p><strong>强大</strong>：MMTracking复现了SOTA性能的模型。受益于<a href="https://github.com/open-mmlab/mmdetection">MMDetection</a>的持续推进，部分实现精度超出官方版本。</p></li></ul><span id="more"></span><h3 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h311r24vj20u70eqq50.jpg"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="在恒源云下-新建Pytorch1-11-CUDA-1-10-0的环境"><a href="#在恒源云下-新建Pytorch1-11-CUDA-1-10-0的环境" class="headerlink" title="在恒源云下 新建Pytorch1.11 CUDA 1.10.0的环境"></a>在恒源云下 新建Pytorch1.11 CUDA 1.10.0的环境</h3><h3 id="安装VOT数据集测试评估库"><a href="#安装VOT数据集测试评估库" class="headerlink" title="安装VOT数据集测试评估库"></a>安装VOT数据集测试评估库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/votchallenge/toolkit.git</span><br></pre></td></tr></table></figure><h3 id="安装mmcv-full"><a href="#安装mmcv-full" class="headerlink" title="安装mmcv-full"></a>安装mmcv-full</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv-full==1.5.0 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span><br></pre></td></tr></table></figure><h3 id="安装mmdet"><a href="#安装mmdet" class="headerlink" title="安装mmdet"></a>安装mmdet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmdet</span><br></pre></td></tr></table></figure><h3 id="将mmtracking克隆到本地"><a href="#将mmtracking克隆到本地" class="headerlink" title="将mmtracking克隆到本地"></a>将mmtracking克隆到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/open-mmlab/mmtracking.git</span><br><span class="line">cd mmtracking</span><br></pre></td></tr></table></figure><h3 id="安装必备依赖"><a href="#安装必备依赖" class="headerlink" title="安装必备依赖"></a>安装必备依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install setuptools==58.2.0 # 这步非常重要 新版本不再支持easy_install </span><br><span class="line">pip install -v -e .  # or &quot;python setup.py develop&quot;</span><br><span class="line">sudo apt-get install libglib2.0-0</span><br></pre></td></tr></table></figure><h3 id="安装额外的依赖"><a href="#安装额外的依赖" class="headerlink" title="安装额外的依赖"></a>安装额外的依赖</h3><h4 id="为-MOTChallenge-评估"><a href="#为-MOTChallenge-评估" class="headerlink" title="为 MOTChallenge 评估"></a>为 MOTChallenge 评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/JonathonLuiten/TrackEval.git</span><br></pre></td></tr></table></figure><h4 id="为LVIS评估"><a href="#为LVIS评估" class="headerlink" title="为LVIS评估"></a>为LVIS评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/lvis-dataset/lvis-api.git</span><br></pre></td></tr></table></figure><h4 id="为TAO评估"><a href="#为TAO评估" class="headerlink" title="为TAO评估"></a>为TAO评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/TAO-Dataset/tao.git</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo/demo_mot_vis.py configs/mot/deepsort/sort_faster-rcnn_fpn_4e_mot17-private.py --input demo/demo.mp4 --output mot.mp4</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>如下内容基于B站up主「<a href="https://space.bilibili.com/1900783?spm_id_from=333.337.0.0">同济子豪兄</a>」相关视频</p><iframe src="//player.bilibili.com/player.html?aid=213458941&bvid=BV1za411Y7Zm&cid=582146771&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="测试视频源文件获取"><a href="#测试视频源文件获取" class="headerlink" title="测试视频源文件获取"></a>测试视频源文件获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 checkpoints 文件夹，用于存放预训练模型权重文件</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;checkpoints&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 outputs 文件夹，用于存放预测结果</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;outputs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 data 文件夹，用于存放视频</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment"># 蜜蜂视频，来源：https://www.youtube.com/watch?v=45mKyCpoDBo</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/bee.mp4 -O data/bee.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 花式台球视频，来源：https://www.youtube.com/watch?v=l1KzjjKxqaA</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/billiards1.mp4 -O data/billiards1.mp4</span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/billiards2.mp4 -O data/billiards2.mp4</span><br><span class="line"><span class="comment"># 花式台球视频，来源：https://www.youtube.com/watch?v=QfKEyPtbVas</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/billiards3.mp4 -O data/billiards3.mp4</span><br><span class="line"><span class="comment"># 花式台球视频，来源：https://www.bilibili.com/video/BV1Es41187Y4</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/billiards4.mp4 -O data/billiards4.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人流量检测视频，来源：https://www.bilibili.com/video/BV1fE411w7ac</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/mot_people_short.mp4 -O data/mot_people_short.mp4</span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/mot_people_medium.mp4 -O data/mot_people_medium.mp4</span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/mot_people_long.mp4 -O data/mot_people_long.mp4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单目标检测 gt_box_file.txt 文件</span></span><br><span class="line">!wget https://zihao-openmmlab.obs.cn-east-<span class="number">3.</span>myhuaweicloud.com/<span class="number">20220418</span>-mmtracking/data/gt_box_file.txt -O data/gt_box_file.txt</span><br></pre></td></tr></table></figure><h3 id="单目标追踪-「SOT」"><a href="#单目标追踪-「SOT」" class="headerlink" title="单目标追踪 「SOT」"></a>单目标追踪 「SOT」</h3><h4 id="目标坐标获取"><a href="#目标坐标获取" class="headerlink" title="目标坐标获取"></a>目标坐标获取</h4><p>使用Jupyter本地运行如下文件 获得<strong>追踪框坐标</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencv-python</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入python绘图matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 使用ipython的魔法方法，将绘制出的图像直接嵌入在notebook单元格中</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义可视化图像函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_img_from_array</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;opencv读入图像格式为BGR，matplotlib可视化格式为RGB，因此需将BGR转RGB&#x27;&#x27;&#x27;</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()   </span><br><span class="line"><span class="comment"># 获取视频第一帧</span></span><br><span class="line">input_path = <span class="string">&#x27;bee.mp4&#x27;</span></span><br><span class="line">cap = cv2.VideoCapture(input_path)</span><br><span class="line"><span class="keyword">if</span> cap.isOpened():</span><br><span class="line">    success, frame = cap.read()</span><br><span class="line">cap.release()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================</span></span><br><span class="line">frame.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================</span></span><br><span class="line">show_img_from_array(frame)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================</span></span><br><span class="line"><span class="comment"># 选取初始框区域，按回车键完成</span></span><br><span class="line">r = cv2.selectROI(<span class="string">&quot;initial_bbox&quot;</span>, frame)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================</span></span><br><span class="line"><span class="comment"># 输入结果</span></span><br><span class="line">r </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="追踪单个飞机「单目标」"><a href="#追踪单个飞机「单目标」" class="headerlink" title="追踪单个飞机「单目标」"></a>追踪单个飞机「单目标」</h4><h5 id="Jupyter与命令行运行"><a href="#Jupyter与命令行运行" class="headerlink" title="Jupyter与命令行运行"></a>Jupyter与命令行运行</h5><blockquote><p>所有程序全程在云端mmtracking目录下 执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencv-python</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入python绘图matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 使用ipython的魔法方法，将绘制出的图像直接嵌入在notebook单元格中</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义可视化图像函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_img_from_array</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;opencv读入图像格式为BGR，matplotlib可视化格式为RGB，因此需将BGR转RGB&#x27;&#x27;&#x27;</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.imshow(img_RGB)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>将结果<strong>r</strong>传入<strong>gt_box_file.txt</strong>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python ./demo/demo_sot.py \</span><br><span class="line">        ./configs/sot/siamese_rpn/siamese_rpn_r50_20e_lasot.py \</span><br><span class="line">        --checkpoint https://download.openmmlab.com/mmtracking/sot/siamese_rpn/siamese_rpn_r50_1x_lasot/siamese_rpn_r50_1x_lasot_20211203_151612-da4b3c66.pth \</span><br><span class="line">        --input data/air_edit.mp4 \</span><br><span class="line">        --output outputs/C1_SOT_air.mp4 \</span><br><span class="line">        --thickness 2 \</span><br><span class="line">        --gt_bbox_file data/gt_box_file.txt</span><br></pre></td></tr></table></figure><h5 id="Python-API运行"><a href="#Python-API运行" class="headerlink" title="Python API运行"></a>Python API运行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_sot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/air_eidt.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/C2_SOT_air.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单目标追踪算法 config 配置文件</span></span><br><span class="line">sot_config = <span class="string">&#x27;./configs/sot/siamese_rpn/siamese_rpn_r50_20e_lasot.py&#x27;</span></span><br><span class="line"><span class="comment"># 指定单目标检测算法的模型权重文件</span></span><br><span class="line">sot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/sot/siamese_rpn/siamese_rpn_r50_1x_lasot/siamese_rpn_r50_1x_lasot_20211203_151612-da4b3c66.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化单目标追踪模型</span></span><br><span class="line">sot_model = init_model(sot_config, sot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定初始框的坐标 [x, y, w, h]</span></span><br><span class="line">init_bbox = [<span class="number">684</span>, <span class="number">357</span>, <span class="number">92</span>, <span class="number">39</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成 [x1, y1, x2, y2 ]</span></span><br><span class="line">init_bbox = [init_bbox[<span class="number">0</span>], init_bbox[<span class="number">1</span>], init_bbox[<span class="number">0</span>]+init_bbox[<span class="number">2</span>], init_bbox[<span class="number">1</span>]+init_bbox[<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_sot(sot_model, img, init_bbox, frame_id=i)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制矩形框中心点构成的轨迹</span></span><br><span class="line">    result_int = result[<span class="string">&#x27;track_bboxes&#x27;</span>].astype(<span class="string">&#x27;uint32&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    sot_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h5 id="轨迹绘制"><a href="#轨迹绘制" class="headerlink" title="轨迹绘制"></a>轨迹绘制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_sot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/air_edit.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/C3_SOT_bee_trace.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单目标追踪算法 config 配置文件</span></span><br><span class="line">sot_config = <span class="string">&#x27;./configs/sot/siamese_rpn/siamese_rpn_r50_20e_lasot.py&#x27;</span></span><br><span class="line"><span class="comment"># 指定单目标检测算法的模型权重文件</span></span><br><span class="line">sot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/sot/siamese_rpn/siamese_rpn_r50_1x_lasot/siamese_rpn_r50_1x_lasot_20211203_151612-da4b3c66.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化单目标追踪模型</span></span><br><span class="line">sot_model = init_model(sot_config, sot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定初始框的坐标 [x, y, w, h]</span></span><br><span class="line">init_bbox = [<span class="number">684</span>, <span class="number">357</span>, <span class="number">92</span>, <span class="number">39</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成 [x1, y1, x2, y2 ]</span></span><br><span class="line">init_bbox = [init_bbox[<span class="number">0</span>], init_bbox[<span class="number">1</span>], init_bbox[<span class="number">0</span>]+init_bbox[<span class="number">2</span>], init_bbox[<span class="number">1</span>]+init_bbox[<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line">circle_coord_list = []</span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_sot(sot_model, img, init_bbox, frame_id=i)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制矩形框中心点构成的轨迹</span></span><br><span class="line">    result_int = result[<span class="string">&#x27;track_bboxes&#x27;</span>].astype(<span class="string">&#x27;uint32&#x27;</span>)</span><br><span class="line">    circle_x = <span class="built_in">int</span>((result_int[<span class="number">0</span>] + result_int[<span class="number">2</span>]) / <span class="number">2</span>)</span><br><span class="line">    circle_y = <span class="built_in">int</span>((result_int[<span class="number">1</span>] + result_int[<span class="number">3</span>]) / <span class="number">2</span>)</span><br><span class="line">    circle_coord_list.append([circle_x, circle_y])</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> circle_coord_list:</span><br><span class="line">        <span class="comment"># 绘制圆，指定圆心坐标和半径，红色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">        cv2.circle(img,(each[<span class="number">0</span>],each[<span class="number">1</span>]), <span class="number">5</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    sot_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h5 id="轨迹绘制「OpenCV」"><a href="#轨迹绘制「OpenCV」" class="headerlink" title="轨迹绘制「OpenCV」"></a>轨迹绘制「OpenCV」</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_sot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/air.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/C4_SOT_bee_trace.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单目标追踪算法 config 配置文件</span></span><br><span class="line">sot_config = <span class="string">&#x27;./configs/sot/siamese_rpn/siamese_rpn_r50_20e_lasot.py&#x27;</span></span><br><span class="line"><span class="comment"># 指定单目标检测算法的模型权重文件</span></span><br><span class="line">sot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/sot/siamese_rpn/siamese_rpn_r50_1x_lasot/siamese_rpn_r50_1x_lasot_20211203_151612-da4b3c66.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化单目标追踪模型</span></span><br><span class="line">sot_model = init_model(sot_config, sot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定初始目标矩形框坐标 [x, y, w, h]</span></span><br><span class="line">init_bbox_xywh = [<span class="number">684</span>, <span class="number">357</span>, <span class="number">92</span>, <span class="number">39</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成 [x1, y1, x2, y2 ]</span></span><br><span class="line">init_bbox_xyxy = [init_bbox_xywh[<span class="number">0</span>], init_bbox_xywh[<span class="number">1</span>], init_bbox_xywh[<span class="number">0</span>]+init_bbox_xywh[<span class="number">2</span>], init_bbox_xywh[<span class="number">1</span>]+init_bbox_xywh[<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line">circle_coord_list = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始逐帧处理&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    img_draw = img.copy()</span><br><span class="line">    </span><br><span class="line">    result = inference_sot(sot_model, img, init_bbox_xyxy, frame_id=i)</span><br><span class="line">    <span class="comment"># 目标检测矩形框坐标</span></span><br><span class="line">    result_bbox = result[<span class="string">&#x27;track_bboxes&#x27;</span>][:<span class="number">4</span>].astype(<span class="string">&#x27;uint32&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制目标检测矩形框：图像，左上角坐标，右下角坐标，颜色，线宽</span></span><br><span class="line">    img_draw = cv2.rectangle(img_draw, (result_bbox[<span class="number">0</span>], result_bbox[<span class="number">1</span>]), (result_bbox[<span class="number">2</span>], result_bbox[<span class="number">3</span>]), (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">2</span>)    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取矩形框中心点轨迹点坐标</span></span><br><span class="line">    circle_x = <span class="built_in">int</span>((result_bbox[<span class="number">0</span>] + result_bbox[<span class="number">2</span>]) / <span class="number">2</span>)</span><br><span class="line">    circle_y = <span class="built_in">int</span>((result_bbox[<span class="number">1</span>] + result_bbox[<span class="number">3</span>]) / <span class="number">2</span>)</span><br><span class="line">    circle_coord_list.append([circle_x, circle_y])</span><br><span class="line">    <span class="comment"># 绘制从第一帧到当前帧的轨迹</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> circle_coord_list:</span><br><span class="line">        <span class="comment"># 绘制圆，指定圆心坐标和半径，红色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">        img_draw = cv2.circle(img_draw, (each[<span class="number">0</span>],each[<span class="number">1</span>]), <span class="number">5</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将当前帧的可视化效果保存为图片文件</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>, img_draw)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将保存下来的各帧图片文件串成视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导出视频，FPS &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(imgs.fps))</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;已成功导出视频 至 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(output))</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h5 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h5><blockquote><p>r &#x3D; (684, 357, 92, 39)</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=769371401&bvid=BV13r4y1t7NG&cid=726124186&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=596873058&bvid=BV1nB4y1R79k&cid=726124185&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h4 id="追踪多个飞机「多个单目标」"><a href="#追踪多个飞机「多个单目标」" class="headerlink" title="追踪多个飞机「多个单目标」"></a>追踪多个飞机「多个单目标」</h4><p>多次调用 「目标坐标获取」程序本地运行 获得<strong>多个追踪框坐标</strong>，将坐标传入如下程序</p><h5 id="Python-API运行-轨迹绘制"><a href="#Python-API运行-轨迹绘制" class="headerlink" title="Python API运行 轨迹绘制"></a>Python API运行 轨迹绘制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_sot, init_model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 生成调色板</span></span><br><span class="line">palette = sns.color_palette(<span class="string">&#x27;hls&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入追踪ID，生成专属颜色</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="comment"># 从调色板中随机挑选一种颜色</span></span><br><span class="line">    bbox_color = random.choice(palette)</span><br><span class="line">    bbox_color = [<span class="built_in">int</span>(<span class="number">255</span> * c) <span class="keyword">for</span> c <span class="keyword">in</span> bbox_color][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> bbox_color</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/air_eidt.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/output_C4_SOT_air_edit_trace.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单目标追踪算法 config 配置文件</span></span><br><span class="line">sot_config = <span class="string">&#x27;./configs/sot/siamese_rpn/siamese_rpn_r50_20e_lasot.py&#x27;</span></span><br><span class="line"><span class="comment"># 指定单目标检测算法的模型权重文件</span></span><br><span class="line">sot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/sot/siamese_rpn/siamese_rpn_r50_1x_lasot/siamese_rpn_r50_1x_lasot_20211203_151612-da4b3c66.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化单目标追踪模型</span></span><br><span class="line">sot_model = init_model(sot_config, sot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 指定多个目标的初始矩形框坐标 [x, y, w, h]</span></span><br><span class="line">init_bbox_xywh = [[<span class="number">871</span>, <span class="number">355</span>, <span class="number">94</span>, <span class="number">46</span>], [<span class="number">684</span>, <span class="number">357</span>, <span class="number">92</span>, <span class="number">39</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标个数</span></span><br><span class="line">ID_num = <span class="built_in">len</span>(init_bbox_xywh)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;共有&#123;&#125;个待追踪目标&#x27;</span>.<span class="built_in">format</span>(ID_num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成 [x1, y1, x2, y2 ]</span></span><br><span class="line">init_bbox_xyxy = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> init_bbox_xywh:</span><br><span class="line">    init_bbox_xyxy.append([each[<span class="number">0</span>], each[<span class="number">1</span>], each[<span class="number">0</span>]+each[<span class="number">2</span>], each[<span class="number">1</span>]+each[<span class="number">3</span>]])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line"><span class="comment"># prog_bar = mmcv.ProgressBar(len(imgs))</span></span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取每帧的追踪结果</span></span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line">circle_coord_list = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始逐帧处理&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ID <span class="keyword">in</span> <span class="built_in">range</span>(ID_num): <span class="comment"># 遍历每个待追踪目标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;追踪第&#123;&#125;个目标&#x27;</span>.<span class="built_in">format</span>(ID+<span class="number">1</span>))</span><br><span class="line">    circle_coord_list[ID] = &#123;&#125;</span><br><span class="line">    circle_coord_list[ID][<span class="string">&#x27;bbox&#x27;</span>] = []</span><br><span class="line">    circle_coord_list[ID][<span class="string">&#x27;trace&#x27;</span>] = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动进度条</span></span><br><span class="line">    prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs): <span class="comment"># 遍历视频每一帧</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 执行单目标追踪</span></span><br><span class="line">        result = inference_sot(sot_model, img, init_bbox_xyxy[ID], frame_id=i)</span><br><span class="line">        <span class="comment"># 目标检测矩形框坐标</span></span><br><span class="line">        result_bbox = np.array(result[<span class="string">&#x27;track_bboxes&#x27;</span>][:<span class="number">4</span>].astype(<span class="string">&#x27;uint32&#x27;</span>))</span><br><span class="line">        <span class="comment"># 保存矩形框坐标</span></span><br><span class="line">        circle_coord_list[ID][<span class="string">&#x27;bbox&#x27;</span>].append(result_bbox)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取矩形框中心点轨迹点坐标</span></span><br><span class="line">        circle_x = <span class="built_in">int</span>((result_bbox[<span class="number">0</span>] + result_bbox[<span class="number">2</span>]) / <span class="number">2</span>)</span><br><span class="line">        circle_y = <span class="built_in">int</span>((result_bbox[<span class="number">1</span>] + result_bbox[<span class="number">3</span>]) / <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 保存轨迹点坐标</span></span><br><span class="line">        circle_coord_list[ID][<span class="string">&#x27;trace&#x27;</span>].append(np.array([circle_x, circle_y]))</span><br><span class="line">        </span><br><span class="line">        prog_bar.update()</span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment">## 可视化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进度条</span></span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs): <span class="comment"># 遍历视频每一帧</span></span><br><span class="line">    img_draw = img.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ID <span class="keyword">in</span> <span class="built_in">range</span>(ID_num): <span class="comment"># 遍历每个待追踪目标</span></span><br><span class="line">        <span class="comment"># 获取该目标的专属颜色</span></span><br><span class="line">        ID_color = get_color(ID)</span><br><span class="line">        </span><br><span class="line">        result_bbox = circle_coord_list[ID][<span class="string">&#x27;bbox&#x27;</span>][i]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制目标检测矩形框：图像，左上角坐标，右下角坐标，颜色，线宽</span></span><br><span class="line">        img_draw = cv2.rectangle(img_draw, (result_bbox[<span class="number">0</span>], result_bbox[<span class="number">1</span>]), (result_bbox[<span class="number">2</span>], result_bbox[<span class="number">3</span>]), ID_color, <span class="number">2</span>)  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制从第一帧到当前帧的轨迹</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> circle_coord_list[ID][<span class="string">&#x27;trace&#x27;</span>][:i]:</span><br><span class="line">            <span class="comment"># 绘制圆，指定圆心坐标和半径，红色，最后一个参数为线宽，-1表示填充</span></span><br><span class="line">            img_draw = cv2.circle(img_draw, (each[<span class="number">0</span>],each[<span class="number">1</span>]), <span class="number">2</span>,  ID_color, -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将当前帧的可视化效果保存为图片文件</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>, img_draw)</span><br><span class="line">    prog_bar.update()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将保存下来的各帧图片文件串成视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导出视频，FPS &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(imgs.fps))</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;已成功导出视频 至 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(output))</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h5 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h5><blockquote><p>右侧 &#x3D; (684, 357, 92, 39)</p><p>左侧&#x3D; (871, 355, 94, 46)</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=426819833&bvid=BV113411G7Yv&cid=726189994&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="多目标追踪「MOT」"><a href="#多目标追踪「MOT」" class="headerlink" title="多目标追踪「MOT」"></a>多目标追踪「MOT」</h3><blockquote><p>不需要人去框选和标注任何目标 ｜ 算法知道每个人的类别 目前只能一个类别进行计数 ｜ 每个目标分配一个ID号 </p><p>叠加速度信息 卡尔曼滤波+匈牙利匹配实现 代表方法有「<a href="https://arxiv.org/abs/1703.07402">DeepSort</a>」「<a href="https://arxiv.org/abs/2110.06864">ByteTrack</a>」</p></blockquote><h4 id="DeepSort-命令行实现"><a href="#DeepSort-命令行实现" class="headerlink" title="DeepSort 命令行实现"></a>DeepSort 命令行实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deepsort算法仅需指定 config 文件，不需指定 checkpoint 文件</span><br><span class="line">!python demo/demo_mot_vis.py \</span><br><span class="line">        configs/mot/deepsort/sort_faster-rcnn_fpn_4e_mot17-private.py \</span><br><span class="line">        --input data/mot_people_short.mp4 \</span><br><span class="line">        --output outputs/F2_MOT_people_short.mp4</span><br></pre></td></tr></table></figure><h4 id="DeepSort-Python-API实现"><a href="#DeepSort-Python-API实现" class="headerlink" title="DeepSort Python API实现"></a>DeepSort Python API实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/F4_MOT_people_short.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/deepsort/deepsort_faster-rcnn_fpn_4e_mot17-private-half.py&#x27;</span></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">mot_model = init_model(mot_config, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_mot(mot_model, img, frame_id=i)</span><br><span class="line">    mot_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            show=<span class="literal">False</span>,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h4 id="ByteTrack-命令行实现"><a href="#ByteTrack-命令行实现" class="headerlink" title="ByteTrack 命令行实现"></a>ByteTrack 命令行实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python demo/demo_mot_vis.py \</span><br><span class="line">        configs/mot/bytetrack/bytetrack_yolox_x_crowdhuman_mot17-private-half.py \</span><br><span class="line">        --checkpoint https://download.openmmlab.com/mmtracking/mot/bytetrack/bytetrack_yolox_x/bytetrack_yolox_x_crowdhuman_mot17-private-half_20211218_205500-1985c9f0.pth \</span><br><span class="line">        --input data/mot_people_short.mp4 \</span><br><span class="line">        --output outputs/F1_MOT_people_short.mp4</span><br></pre></td></tr></table></figure><h4 id="ByteTrack-Python-API实现"><a href="#ByteTrack-Python-API实现" class="headerlink" title="ByteTrack Python API实现"></a>ByteTrack Python API实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/F3_MOT_people_short.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">mot_config = <span class="string">&#x27;./configs/mot/bytetrack/bytetrack_yolox_x_crowdhuman_mot17-private-half.py&#x27;</span></span><br><span class="line">mot_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/mot/bytetrack/bytetrack_yolox_x/bytetrack_yolox_x_crowdhuman_mot17-private-half_20211218_205500-1985c9f0.pth&#x27;</span></span><br><span class="line"><span class="comment"># 初始化多目标追踪模型</span></span><br><span class="line">mot_model = init_model(mot_config, mot_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_mot(mot_model, img, frame_id=i)</span><br><span class="line">    </span><br><span class="line">    mot_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            show=<span class="literal">False</span>,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h2 id="mmtracking的其他功能"><a href="#mmtracking的其他功能" class="headerlink" title="mmtracking的其他功能"></a>mmtracking的其他功能</h2><h3 id="视频目标检测「VID」"><a href="#视频目标检测「VID」" class="headerlink" title="视频目标检测「VID」"></a>视频目标检测「VID」</h3><p><strong>视频目标检测相比于单帧目标检测，在时间维度捕获更多信息用于检测任务，比如用上一帧的特征辅助预测下一帧，但最后实际效果并不比单帧目标检测更好。原因之一是数据集标注难度更大</strong></p><p><a href="https://github.com/open-mmlab/mmtracking/blob/master/docs/en/quick_run.md">参考文档</a> mmtracking预训练模型库<a href="https://mmtracking.readthedocs.io/en/latest/model_zoo.html">Model Zoo</a></p><p>模型的 config 文件需和 checkpoint 权重文件一一对应，比如下面这样：</p><table><thead><tr><th align="center">模型</th><th align="left">config文件</th><th align="left">checkpoint权重文件</th></tr></thead><tbody><tr><td align="center">SELSA (ICCV 2019)</td><td align="left">configs&#x2F;vid&#x2F;selsa&#x2F;selsa_faster_rcnn_r101_dc5_1x_imagenetvid.py</td><td align="left"><a href="https://download.openmmlab.com/mmtracking/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid/selsa_faster_rcnn_r101_dc5_1x_imagenetvid_20201218_172724-aa961bcc.pth">https://download.openmmlab.com/mmtracking/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid/selsa_faster_rcnn_r101_dc5_1x_imagenetvid_20201218_172724-aa961bcc.pth</a></td></tr><tr><td align="center">Temporal RoI Align (AAAI 2021)</td><td align="left">configs&#x2F;vid&#x2F;temporal_roi_align&#x2F;selsa_troialign_faster_rcnn_x101_dc5_7e_imagenetvid.py</td><td align="left"><a href="https://download.openmmlab.com/mmtracking/vid/temporal_roi_align/selsa_troialign_faster_rcnn_x101_dc5_7e_imagenetvid/selsa_troialign_faster_rcnn_x101_dc5_7e_imagenetvid_20210822_164036-4471ac42.pth">https://download.openmmlab.com/mmtracking/vid/temporal_roi_align/selsa_troialign_faster_rcnn_x101_dc5_7e_imagenetvid/selsa_troialign_faster_rcnn_x101_dc5_7e_imagenetvid_20210822_164036-4471ac42.pth</a></td></tr></tbody></table><h4 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python ./demo/demo_vid.py \</span><br><span class="line">    ./configs/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid.py \</span><br><span class="line">    --checkpoint https://download.openmmlab.com/mmtracking/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid/selsa_faster_rcnn_r101_dc5_1x_imagenetvid_20201218_172724-aa961bcc.pth \</span><br><span class="line">    --input data/mot_people_short.mp4 \</span><br><span class="line">    --output outputs/B1_VID_SELSA.mp4 \</span><br><span class="line">    --score-thr 0.4 \</span><br><span class="line">    --thickness 2</span><br></pre></td></tr></table></figure><h4 id="Python-API运行-1"><a href="#Python-API运行-1" class="headerlink" title="Python API运行"></a>Python API运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_vid, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/B2_VID_SELSA.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">vid_config = <span class="string">&#x27;./configs/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid.py&#x27;</span></span><br><span class="line">vid_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/vid/selsa/selsa_faster_rcnn_r101_dc5_1x_imagenetvid/selsa_faster_rcnn_r101_dc5_1x_imagenetvid_20201218_172724-aa961bcc.pth&#x27;</span></span><br><span class="line">vid_model = init_model(vid_config, vid_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_vid(vid_model, img, frame_id=i)</span><br><span class="line">    vid_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成预测视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h3 id="视频实例分割「VIS」"><a href="#视频实例分割「VIS」" class="headerlink" title="视频实例分割「VIS」"></a>视频实例分割「VIS」</h3><p><strong>和视频目标检测类似的，相比于单帧实例分割，视频实例分割在时间维度捕获更多信息用于分割任务，但实际效果并不比单帧实例分割更好「甚至更差」。原因之一是数据集标注难度更大</strong></p><h4 id="命令行运行-1"><a href="#命令行运行-1" class="headerlink" title="命令行运行"></a>命令行运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python demo/demo_mot_vis.py \</span><br><span class="line">        configs/vis/masktrack_rcnn/masktrack_rcnn_r50_fpn_12e_youtubevis2019.py \</span><br><span class="line">        --checkpoint https://download.openmmlab.com/mmtracking/vis/masktrack_rcnn/masktrack_rcnn_r50_fpn_12e_youtubevis2019/masktrack_rcnn_r50_fpn_12e_youtubevis2019_20211022_194830-6ca6b91e.pth \</span><br><span class="line">        --input data/mot_people_short.mp4 \</span><br><span class="line">        --output outputs/B3_VIS_masktrack_rcnn.mp4</span><br></pre></td></tr></table></figure><h4 id="Python-API运行-2"><a href="#Python-API运行-2" class="headerlink" title="Python API运行"></a>Python API运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> mmtrack.apis <span class="keyword">import</span> inference_mot, init_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出视频路径</span></span><br><span class="line">input_video = <span class="string">&#x27;data/mot_people_short.mp4&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;outputs/B4_VIS_masktrack_rcnn.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 config 配置文件 和 模型权重文件，创建模型</span></span><br><span class="line">vis_config = <span class="string">&#x27;./configs/vis/masktrack_rcnn/masktrack_rcnn_r50_fpn_12e_youtubevis2019.py&#x27;</span></span><br><span class="line">vis_checkpoint = <span class="string">&#x27;https://download.openmmlab.com/mmtracking/vis/masktrack_rcnn/masktrack_rcnn_r50_fpn_12e_youtubevis2019/masktrack_rcnn_r50_fpn_12e_youtubevis2019_20211022_194830-6ca6b91e.pth&#x27;</span></span><br><span class="line">vis_model = init_model(vis_config, vis_checkpoint, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line">prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line">out_dir = tempfile.TemporaryDirectory()</span><br><span class="line">out_path = out_dir.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐帧输入模型预测</span></span><br><span class="line"><span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    result = inference_mot(vis_model, img, frame_id=i)</span><br><span class="line">    vis_model.show_result(</span><br><span class="line">            img,</span><br><span class="line">            result,</span><br><span class="line">            wait_time=<span class="built_in">int</span>(<span class="number">1000.</span> / imgs.fps),</span><br><span class="line">            out_file=<span class="string">f&#x27;<span class="subst">&#123;out_path&#125;</span>/<span class="subst">&#123;i:06d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    prog_bar.update()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\n making the output video at <span class="subst">&#123;output&#125;</span> with a FPS of <span class="subst">&#123;imgs.fps&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成预测视频</span></span><br><span class="line">mmcv.frames2video(out_path, output, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">out_dir.cleanup()</span><br></pre></td></tr></table></figure><h3 id="数据集上评估模型效果"><a href="#数据集上评估模型效果" class="headerlink" title="数据集上评估模型效果"></a>数据集上评估模型效果</h3><h4 id="测试VID模型"><a href="#测试VID模型" class="headerlink" title="测试VID模型"></a>测试VID模型</h4><p>在ImageNet VID数据集上，评估DFF模型的bbox mAP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python tools/test.py  \</span><br><span class="line">    configs/vid/dff/dff_faster_rcnn_r101_dc5_1x_imagenetvid.py \</span><br><span class="line">    --checkpoint checkpoints/dff_faster_rcnn_r101_dc5_1x_imagenetvid_20201218_172720-ad732e17.pth \</span><br><span class="line">    --out results.pkl \</span><br><span class="line">    --eval bbox</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 目标追踪系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「环境配置」（二）在云服务器上配置mmtracking环境</title>
      <link href="/2022/05/22/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AEmmtracking%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/05/22/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AEmmtracking%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>参考文章「<a href="https://mmtracking.readthedocs.io/zh_CN/latest/"><strong>mmtrack文档</strong></a>」</p><h3 id="在恒源云下-新建Pytorch1-11-CUDA-1-10-0的环境"><a href="#在恒源云下-新建Pytorch1-11-CUDA-1-10-0的环境" class="headerlink" title="在恒源云下 新建Pytorch1.11 CUDA 1.10.0的环境"></a>在恒源云下 新建Pytorch1.11 CUDA 1.10.0的环境</h3><h3 id="安装VOT数据集测试评估库"><a href="#安装VOT数据集测试评估库" class="headerlink" title="安装VOT数据集测试评估库"></a>安装VOT数据集测试评估库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/votchallenge/toolkit.git</span><br></pre></td></tr></table></figure><h3 id="安装mmcv-full"><a href="#安装mmcv-full" class="headerlink" title="安装mmcv-full"></a>安装mmcv-full</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv-full==1.5.0 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span><br></pre></td></tr></table></figure><h3 id="安装mmdet"><a href="#安装mmdet" class="headerlink" title="安装mmdet"></a>安装mmdet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmdet</span><br></pre></td></tr></table></figure><h3 id="将mmtracking克隆到本地"><a href="#将mmtracking克隆到本地" class="headerlink" title="将mmtracking克隆到本地"></a>将mmtracking克隆到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/open-mmlab/mmtracking.git</span><br><span class="line">cd mmtracking</span><br></pre></td></tr></table></figure><h3 id="安装必备依赖"><a href="#安装必备依赖" class="headerlink" title="安装必备依赖"></a>安装必备依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install setuptools==58.2.0 # 这步非常重要 新版本不再支持easy_install </span><br><span class="line">pip install -v -e .  # or &quot;python setup.py develop&quot;</span><br><span class="line">sudo apt-get install libglib2.0-0</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="安装额外的依赖"><a href="#安装额外的依赖" class="headerlink" title="安装额外的依赖"></a>安装额外的依赖</h3><h4 id="为-MOTChallenge-评估"><a href="#为-MOTChallenge-评估" class="headerlink" title="为 MOTChallenge 评估"></a>为 MOTChallenge 评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/JonathonLuiten/TrackEval.git</span><br></pre></td></tr></table></figure><h4 id="为LVIS评估"><a href="#为LVIS评估" class="headerlink" title="为LVIS评估"></a>为LVIS评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/lvis-dataset/lvis-api.git</span><br></pre></td></tr></table></figure><h4 id="为TAO评估"><a href="#为TAO评估" class="headerlink" title="为TAO评估"></a>为TAO评估</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/TAO-Dataset/tao.git</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo/demo_mot_vis.py configs/mot/deepsort/sort_faster-rcnn_fpn_4e_mot17-private.py --input demo/demo.mp4 --output mot.mp4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「目标追踪系列」（一）初识目标追踪</title>
      <link href="/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E8%AF%86%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA/"/>
      <url>/2022/05/22/%E3%80%8C%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E8%AF%86%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是目标追踪"><a href="#什么是目标追踪" class="headerlink" title="什么是目标追踪"></a>什么是目标追踪</h2><blockquote><p>转自知乎「<a href="https://zhuanlan.zhihu.com/p/148516834">链接</a>」「<a href="https://kns.cnki.net/KCMS/detail/11.2109.TP.20190104.1506.016.html?uid=WEEvREcwSlJHSldRa1FhdXNXaEd1OFVOaDdwQ0tCckFuaHBIcFFIbUxkbz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&v=MDU3Nzk0WXc5TXptUm42ajU3VDNmbHFXTTBDTEw3UjdxZWJ1WnNGaUhrVzd6QkpGWT1LQ0xmWWJHNEg5ak1ybzlHWk90">论文原文</a>」</p></blockquote><p>目标追踪是计算机视觉领域的一个重要问题，目前广泛应用在体育赛事转播、安防监控和无人机、无人车、机器人等领域。下面是一些应用的例子</p><p><img src="https://pic1.zhimg.com/80/v2-531de42fb6687921041aa8a8e6cd2ce8_720w.jpg" alt="田径比赛"></p><p><img src="https://pic3.zhimg.com/80/v2-9b8f472d7c98a1a91b4b93d0d8886b36_720w.jpg" alt="足球比赛"></p><p><img src="https://pic1.zhimg.com/80/v2-deee3ca02a16a4ac0d098acb2390cfac_720w.jpg" alt="车辆追踪"></p><h2 id="目标追踪任务分类"><a href="#目标追踪任务分类" class="headerlink" title="目标追踪任务分类"></a>目标追踪任务分类</h2><h3 id="从目标追踪的用途出发，目标追踪可以分为以下几种任务"><a href="#从目标追踪的用途出发，目标追踪可以分为以下几种任务" class="headerlink" title="从目标追踪的用途出发，目标追踪可以分为以下几种任务"></a>从目标追踪的用途出发，目标追踪可以分为以下几种任务</h3><p><strong>单目标追踪</strong> - 给定一个目标，追踪这个目标的位置。</p><p><strong>多目标追踪</strong> - 追踪多个目标的位置</p><p><strong>Person Re-ID</strong> - 行人重识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补固定的摄像头的视觉局限，并可与行人检测&#x2F;行人追踪技术相结合。</p><p><strong>MTMCT</strong> - 多目标多摄像头追踪（Multi-target Multi-camera Tracking），追踪多个摄像头拍摄的多个人</p><p><strong>姿态追踪</strong> - 追踪人的姿态</p><h3 id="按照任务计算类型又可以分为以下2类"><a href="#按照任务计算类型又可以分为以下2类" class="headerlink" title="按照任务计算类型又可以分为以下2类"></a>按照任务计算类型又可以分为以下2类</h3><p><strong>在线追踪</strong> - 在线追踪需要实时处理任务，通过过去和现在帧来追踪未来帧中物体的位置。</p><p><strong>离线追踪</strong> - 离线追踪是离线处理任务，可以通过过去、现在和未来的帧来推断物体的位置，因此准确率会在线追踪高。</p><span id="more"></span><h2 id="目标追踪的困难点"><a href="#目标追踪的困难点" class="headerlink" title="目标追踪的困难点"></a>目标追踪的困难点</h2><h3 id="形态变化"><a href="#形态变化" class="headerlink" title="形态变化"></a><strong>形态变化</strong></h3><p> 姿态变化是目标追踪中常见的干扰问题。运动目标发生姿态变化时, 会导致它的特征以及外观模型发生改变, 容易导致追踪失败。例如:体育比赛中的运动员、马路上的行人。</p><h3 id="尺度变化"><a href="#尺度变化" class="headerlink" title="尺度变化"></a><strong>尺度变化</strong></h3><p>尺度的自适应也是目标追踪中的关键问题。当目标尺度缩小时, 由于追踪框不能自适应追踪, 会将很多背景信息包含在内, 导致目标模型的更新错误:当目标尺度增大时, 由于追踪框不能将目标完全包括在内, 追踪框内目标信息不全, 也会导致目标模型的更新错误。因此, 实现尺度自适应追踪是十分必要的。</p><h3 id="遮挡与消失"><a href="#遮挡与消失" class="headerlink" title="遮挡与消失"></a><strong>遮挡与消失</strong></h3><p>目标在运动过程中可能出现被遮挡或者短暂的消失情况。当这种情况发生时, 追踪框容易将遮挡物以及背景信息包含在追踪框内, 会导致后续帧中的追踪目标漂移到遮挡物上面。若目标被完全遮挡时, 由于找不到目标的对应模型, 会导致追踪失败。</p><h3 id="图像模糊"><a href="#图像模糊" class="headerlink" title="图像模糊"></a><strong>图像模糊</strong></h3><p>光照强度变化, 目标快速运动, 低分辨率等情况会导致图像模型, 尤其是在运动目标与背景相似的情况下更为明显。因此, 选择有效的特征对目标和背景进行区分非常必要。</p><h3 id="实例图"><a href="#实例图" class="headerlink" title="实例图"></a>实例图</h3><p><img src="https://pic1.zhimg.com/80/v2-522e7bad45da314edb03ea3c7b26f260_720w.jpg" alt="光照以及模糊"></p><p><img src="https://pic3.zhimg.com/80/v2-46f38d9ee2dd149639774ee598e4456a_720w.jpg" alt="形变以及遮挡"></p><h2 id="目标追踪方法"><a href="#目标追踪方法" class="headerlink" title="目标追踪方法"></a>目标追踪方法</h2><h3 id="按照模式划分可以分为2类"><a href="#按照模式划分可以分为2类" class="headerlink" title="按照模式划分可以分为2类"></a>按照模式划分可以分为2类</h3><h4 id="生成式模型"><a href="#生成式模型" class="headerlink" title="生成式模型"></a><strong>生成式模型</strong></h4><p>早期的工作主要集中于生成式模型追踪算法的研究, 如光流法、粒子滤波、Meanshift算法、Camshift算法等.<strong>此类方法首先建立目标模型或者提取目标特征, 在后续帧中进行相似特征搜索.逐步迭代实现目标定位</strong>.但是这类方法也存在明显的缺点, 就是图像的背景信息没有得到全面的利用.且目标本身的外观变化有随机性和多样性特点, 因此, 通过单一的数学模型描述待追踪目标具有很大的局限性.具体表现为在光照变化, 运动模糊, 分辨率低, 目标旋转形变等情况下, 模型的建立会受到巨大的影响, 从而影响追踪的准确性; 模型的建立没有有效地预测机制, 当出现目标遮挡情况时, 不能够很好地解决。</p><h4 id="鉴别式模型"><a href="#鉴别式模型" class="headerlink" title="鉴别式模型"></a><strong>鉴别式模型</strong></h4><p>鉴别式模型是指, 将目标模型和背景信息同时考虑在内, 通过对比目标模型和背景信息的差异, 将目标模型提取出来, 从而得到当前帧中的目标位置,在对追踪算法的评估中发现, 通过将背景信息引入追踪模型, 可以很好地实现目标追踪.因此鉴别式模型具有很大的优势. 2000年以来, 人们逐渐尝试使用经典的机器学习方法训练分类器, 例如MIL、TLD、支持向量机、结构化学习、随机森林、多实例学习、度量学习. 2010年, 首次将通信领域的相关滤波方法引入到目标追踪中.作为鉴别式方法的一种, 相关滤波无论在速度上还是准确率上, 都显示出更优越的性能.然而, 相关滤波器用于目标追踪是在2014年之后.自2015年以后, 随着深度学习技术的广泛应用, 人们开始将深度学习技术用于目标追踪。</p><h3 id="按照时间顺序"><a href="#按照时间顺序" class="headerlink" title="按照时间顺序"></a>按照时间顺序</h3><p>目标追踪的方法经历了从<strong>经典追踪算法</strong>到<strong>基于核相关滤波算法</strong>，再到<strong>基于深度学习的追踪算法</strong>的过程</p><h4 id="经典追踪算法"><a href="#经典追踪算法" class="headerlink" title="经典追踪算法"></a>经典追踪算法</h4><p>早期的目标追踪算法主要是根据目标建模或者对目标特征进行追踪</p><ol><li>基于目标模型建模的方法 通过对目标外观模型进行建模, 然后在之后的帧中找到目标.例如, 区域匹配、特征点追踪、基于主动轮廓的追踪算法、光流法等.最常用的是特征匹配法, 首先提取目标特征, 然后在后续的帧中找到最相似的特征进行目标定位, 常用的特征有: SIFT特征、SURF特征、Harris角点等。</li><li>基于搜索的方法 随着研究的深入, 人们发现基于目标模型建模的方法对整张图片进行处理, 实时性差.人们将预测算法加入追踪中, 在预测值附近进行目标搜索, 减少了搜索的范围.常见一类的预测算法有Kalman滤波、粒子滤波[8]方法.另一种减小搜索范围的方法是内核方法:运用最速下降法的原理, 向梯度下降方向对目标模板逐步迭代, 直到迭代到最优位置.诸如, Meanshift、Camshift算法</li></ol><h5 id="光流法"><a href="#光流法" class="headerlink" title="光流法"></a><strong>光流法</strong></h5><p>光流法(Lucas-Kanade)的概念首先在1950年提出, 它是针对外观模型对视频序列中的像素进行操作.通过利用视频序列在相邻帧之间的像素关系, 寻找像素的位移变化来判断目标的运动状态, 实现对运动目标的追踪.但是, 光流法适用的范围较小, 需要满足三种假设:图像的光照强度保持不变; 空间一致性, 即每个像素在不同帧中相邻点的位置不变, 这样便于求得最终的运动矢量; 时间连续.光流法适用于目标运动相对于帧率是缓慢的, 也就是两帧之间的目标位移不能太大.</p><h5 id="Meanshift"><a href="#Meanshift" class="headerlink" title="Meanshift"></a><strong>Meanshift</strong></h5><p>Meanshift 方法是一种基于概率密度分布的追踪方法，使目标的搜索一直沿着概率梯度上升的方向，迭代收敛到概率密度分布的局部峰值上。首先 Meanshift 会对目标进行建模，比如利用目标的颜色分布来描述目标，然后计算目标在下一帧图像上的概率分布，从而迭代得到局部最密集的区域。Meanshift 适用于目标的色彩模型和背景差异比较大的情形，早期也用于人脸追踪。由于 Meanshift 方法的快速计算，它的很多改进方法也一直适用至今。</p><h5 id="粒子滤波"><a href="#粒子滤波" class="headerlink" title="粒子滤波"></a><strong>粒子滤波</strong></h5><p>粒子滤波（Particle Filter）方法是一种基于粒子分布统计的方法。以追踪为例，首先对追踪目标进行建模，并定义一种相似度度量确定粒子与目标的匹配程度。在目标搜索的过程中，它会按照一定的分布（比如均匀分布或高斯分布）撒一些粒子，统计这些粒子的相似度，确定目标可能的位置。在这些位置上，下一帧加入更多新的粒子，确保在更大概率上追踪上目标。Kalman Filter 常被用于描述目标的运动模型，它不对目标的特征建模，而是对目标的运动模型进行了建模，常用于估计目标在下一帧的位置。</p><p>可以看到，传统的目标追踪算法存在两个致命的缺陷:</p><ol><li>没有将背景信息考虑在内, 导致在目标遮挡, 光照变化以及运动模糊等干扰下容易出现追踪失败.</li><li>追踪算法执行速度慢(每秒10帧左右), 无法满足实时性的要求.</li></ol><h4 id="基于核相关滤波的追踪算法"><a href="#基于核相关滤波的追踪算法" class="headerlink" title="基于核相关滤波的追踪算法"></a>基于核相关滤波的追踪算法</h4><p>接着，<strong>人们将通信领域的相关滤波(衡量两个信号的相似程度)引入到了目标追踪中</strong>.一些基于相关滤波的追踪算法(MOSSE、CSK、KCF、BACF、SAMF)等, 也随之产生, 速度可以达到数百帧每秒, 可以广泛地应用于实时追踪系统中.其中不乏一些追踪性能优良的追踪器, 诸如SAMF、BACF在OTB数据集和VOT2015竞赛中取得优异成绩。</p><h5 id="MOSSE"><a href="#MOSSE" class="headerlink" title="MOSSE"></a><strong>MOSSE</strong></h5><p>本文提出的相关滤波器（Correlation Filter）通过MOSSE（Minimum Output Sum of Squared Error (MOSSE) filter）算法实现，基本思想：越是相似的两个目标相关值越大，也就是视频帧中与初始化目标越相似，得到的相应也就越大。下图所示通过对比UMACE,ASEF，MOSSE等相关滤波算法，使输出目标中心最大化。</p><h4 id="基于深度学习的追踪算法"><a href="#基于深度学习的追踪算法" class="headerlink" title="基于深度学习的追踪算法"></a><strong>基于深度学习的追踪算法</strong></h4><p>随着深度学习方法的广泛应用, 人们开始考虑将其应用到目标追踪中.人们开始使用深度特征并取得了很好的效果.之后, 人们开始考虑用深度学习建立全新的追踪框架, 进行目标追踪.</p><p>在大数据背景下，利用深度学习训练网络模型，得到的卷积特征输出表达能力更强。在目标追踪上，初期的应用方式是把网络学习到的特征，直接应用到相关滤波或 Struck 的追踪框架里面，从而得到更好的追踪结果，比如前面提到的 DeepSRDCF 方法。本质上卷积输出得到的特征表达，更优于 HOG 或 CN 特征，这也是深度学习的优势之一，但同时也带来了计算量的增加。</p><h2 id="目标追踪方法总结"><a href="#目标追踪方法总结" class="headerlink" title="目标追踪方法总结"></a>目标追踪方法总结</h2><p>目标追踪的方法主要分为2大类，一类是相关滤波、一类是深度学习。</p><p><img src="https://pic2.zhimg.com/80/v2-632a3a08c0f30f0abcdb8b06afbe346d_720w.jpg"></p><ol><li>相比于光流法、Kalman、Meanshift等传统算法，相关滤波类算法追踪速度更快，深度学习类方法精度高.</li><li>具有多特征融合以及深度特征的追踪器在追踪精度方面的效果更好.</li><li>使用强大的分类器是实现良好追踪的基础.</li><li>尺度的自适应以及模型的更新机制也影响着追踪的精度.</li></ol><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>主要的数据集数据对比如下</p><p><img src="https://pic2.zhimg.com/80/v2-469a0d48774e9346242a5fa8e5bd1a39_720w.jpg" alt="数据集对比"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 目标追踪系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「花朵分类项目」（五）长尾分布情况处理</title>
      <link href="/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%94%EF%BC%89%E9%95%BF%E5%B0%BE%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%94%EF%BC%89%E9%95%BF%E5%B0%BE%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="长尾分布-不均衡数据集"><a href="#长尾分布-不均衡数据集" class="headerlink" title="长尾分布-不均衡数据集"></a>长尾分布-不均衡数据集</h2><p>长尾效应：源自统计学概念，其中有头(Head)和尾(Tail)两个统计学名词，突起部分叫“头”；两边相对平缓的部分叫“尾”。二八法则就是典型的长尾效应，20%的品牌占据了80%的市场</p><p>真实世界中的物体类别是符合长尾分布的 ，更广义的说，是数据不均衡</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f7dgbe7vj20zk0eit9j.jpg" style="zoom: 50%;" /><p>针对数据不均衡问题，常通过采样方法改善其中有：「<strong>过采样</strong>：样本少的多采样几次」「<strong>欠采样</strong>：样本多的少采样几次」</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f7gfivx3j20zk0awjs0.jpg"></p><p>这里采用Cifar-10的长尾数据集版本「CifarLTDataset」<a href="https://www.cs.toronto.edu/~kriz/cifar.html">下载链接</a></p><h2 id="PB-Sampling"><a href="#PB-Sampling" class="headerlink" title="PB Sampling"></a>PB Sampling</h2><p>「<a href="https://arxiv.org/abs/1910.09217">Decoupling Representation and Classifier for Long-Tailed Recognition</a>」</p><p>Progressively-Balanced Sampling （渐进式采样策略）：采样权重随着$Epoch$的增加渐进式的变化</p><span id="more"></span><p>从原始分布逐渐变为分类均衡，有效提升不均衡分类精度<br>$$<br>p_j &#x3D; \frac{n_j^q}{\sum_{i&#x3D;1}^Cn_i^q}<br>$$</p><p>$$<br>p_j^{PB}(t) &#x3D; (1 - \frac{t}{T})p_j^{IB} + \frac{t}{T}p_j^{CB}<br>$$</p><p>$p_j$：第 $j$类采样概率，$n_j$：第 $j$类样本数量，$C$：总类别数，$q$：超参数，用于控制概率$p_j$，值域$[0, 1]$</p><p>$t, T$：第$t$个$Epoch$，$T$表示总共有多少个$Epoch$</p><p>$P_j^{IB}$：当第一个公式的$q$取1时得到的策略；样本多，采样概率高</p><p>$P_j^{CB}$：当第一个公式的$q$取0时得到的策略；$p_j$全都相等，都是$1&#x2F;C$</p><p>$P_j^{IB}$是原始分布「$IB(Instance-Balanced)$」，$P_j^{CB}$是均衡分布「$CB(Class-Balanced)$」</p><p>第二个公式表示「一开始是原始分布，随着$t$增加逐渐均衡」</p><h2 id="Dataset-与-Dataloader"><a href="#Dataset-与-Dataloader" class="headerlink" title="Dataset 与 Dataloader"></a>Dataset 与 Dataloader</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f8jhk5stj20ib0bkjrw.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f8mzha9dj20g5070aac.jpg"></p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f99551p8j20of0h5t9k.jpg" style="zoom:67%;" /><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="datasets-x2F-cifar-longtail-py"><a href="#datasets-x2F-cifar-longtail-py" class="headerlink" title="datasets&#x2F;cifar_longtail.py"></a>datasets&#x2F;cifar_longtail.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :cifar_longtail.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-11</span></span><br><span class="line"><span class="string"># @brief        :cifar-10长尾数据集的读取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CifarDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    names = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line">    cls_num = <span class="built_in">len</span>(names)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, transform=<span class="literal">None</span></span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.img_info = []      <span class="comment"># 定义list用于存储样本路径、标签</span></span><br><span class="line">        self._get_img_info()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        path_img, label = self.img_info[index]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(path_img).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img, label, path_img</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.img_info) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;\ndata_dir:&#123;&#125; is a empty dir! Please checkout your path to images!&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                self.root_dir))   <span class="comment"># 代码具有友好的提示功能，便于debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_img_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> root, dirs, _ <span class="keyword">in</span> os.walk(self.root_dir):</span><br><span class="line">            <span class="comment"># 遍历类别</span></span><br><span class="line">            <span class="keyword">for</span> sub_dir <span class="keyword">in</span> dirs:</span><br><span class="line">                img_names = os.listdir(os.path.join(root, sub_dir))</span><br><span class="line">                img_names = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.endswith(<span class="string">&#x27;.png&#x27;</span>), img_names))</span><br><span class="line">                <span class="comment"># 遍历图片</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_names)):</span><br><span class="line">                    img_name = img_names[i]</span><br><span class="line">                    path_img = os.path.abspath(os.path.join(root, sub_dir, img_name))</span><br><span class="line">                    label = <span class="built_in">int</span>(sub_dir)</span><br><span class="line">                    self.img_info.append((path_img, <span class="built_in">int</span>(label)))</span><br><span class="line">        random.shuffle(self.img_info)   <span class="comment"># 将数据顺序打乱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CifarLTDataset</span>(<span class="title class_ inherited__">CifarDataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, transform=<span class="literal">None</span>, imb_factor=<span class="number">0.01</span>, isTrain=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param root_dir:</span></span><br><span class="line"><span class="string">        :param transform:</span></span><br><span class="line"><span class="string">        :param imb_type:</span></span><br><span class="line"><span class="string">        :param imb_factor: float, 值越小，数量下降越快,0.1表示最少的类是最多的类的0.1倍，如500：5000</span></span><br><span class="line"><span class="string">        :param isTrain:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(CifarLTDataset, self).__init__(root_dir, transform=transform)</span><br><span class="line">        self.imb_factor = imb_factor</span><br><span class="line">        <span class="keyword">if</span> isTrain:</span><br><span class="line">            self.nums_per_cls = self._get_img_num_per_cls()     <span class="comment"># 计算每个类的样本数</span></span><br><span class="line">            self._select_img()      <span class="comment"># 采样获得符合长尾分布的数据量</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 非训练状态，可采用均衡数据集测试</span></span><br><span class="line">            self.nums_per_cls = []</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.cls_num):</span><br><span class="line">                label_list = [label <span class="keyword">for</span> p, label <span class="keyword">in</span> self.img_info]  <span class="comment"># 获取每个标签</span></span><br><span class="line">                self.nums_per_cls.append(label_list.count(n))       <span class="comment"># 统计每个类别数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_select_img</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据每个类需要的样本数进行挑选</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_lst = []</span><br><span class="line">        <span class="keyword">for</span> n, img_num <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.nums_per_cls):</span><br><span class="line">            lst_tmp = [info <span class="keyword">for</span> info <span class="keyword">in</span> self.img_info <span class="keyword">if</span> info[<span class="number">1</span>] == n]  <span class="comment"># 获取第n类别数据信息</span></span><br><span class="line">            random.shuffle(lst_tmp)</span><br><span class="line">            lst_tmp = lst_tmp[:img_num]</span><br><span class="line">            new_lst.extend(lst_tmp)</span><br><span class="line">        random.shuffle(new_lst)</span><br><span class="line">        self.img_info = new_lst</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_img_num_per_cls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        依长尾分布计算每个类别应有多少张样本</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        img_max = <span class="built_in">len</span>(self.img_info) / self.cls_num</span><br><span class="line">        img_num_per_cls = []</span><br><span class="line">        <span class="keyword">for</span> cls_idx <span class="keyword">in</span> <span class="built_in">range</span>(self.cls_num):</span><br><span class="line">            num = img_max * (self.imb_factor ** (cls_idx / (self.cls_num - <span class="number">1.0</span>)))  <span class="comment"># 列出公式就知道了</span></span><br><span class="line">            img_num_per_cls.append(<span class="built_in">int</span>(num))</span><br><span class="line">        <span class="keyword">return</span> img_num_per_cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root_dir = <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/cifar-10/cifar10_train&quot;</span></span><br><span class="line">    train_dataset = CifarLTDataset(root_dir, imb_factor=<span class="number">0.01</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(train_dataset))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataset)))</span><br><span class="line">    <span class="built_in">print</span>(train_dataset.nums_per_cls)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    y = train_dataset.nums_per_cls</span><br><span class="line">    x = <span class="built_in">range</span>(<span class="built_in">len</span>(y))</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><h3 id="bins-x2F-parse-cifar-to-png-py"><a href="#bins-x2F-parse-cifar-to-png-py" class="headerlink" title="bins&#x2F;parse_cifar_to_png.py"></a>bins&#x2F;parse_cifar_to_png.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name  : parse_cifar10_to_png.py</span></span><br><span class="line"><span class="string"># @author     : zz0320</span></span><br><span class="line"><span class="string"># @date       : 2021-04-11</span></span><br><span class="line"><span class="string"># @brief      : 将cifar10数据pickle形式解析成png格式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imwrite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpickle</span>(<span class="params">file</span>):</span><br><span class="line">    fo = <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> sys.version_info &lt; (<span class="number">3</span>, <span class="number">0</span>):</span><br><span class="line">        dict_ = pickle.load(fo)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dict_ = pickle.load(fo, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">    fo.close()</span><br><span class="line">    <span class="keyword">return</span> dict_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_mkdir</span>(<span class="params">my_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(my_dir):</span><br><span class="line">        os.makedirs(my_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pasre_pickle_img</span>(<span class="params">pkl_data</span>):</span><br><span class="line">    img = np.reshape(pkl_data[<span class="string">b&#x27;data&#x27;</span>][i], (<span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    label_n = <span class="built_in">str</span>(pkl_data[<span class="string">b&#x27;labels&#x27;</span>][i])</span><br><span class="line">    img = img.transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))  <span class="comment"># c*h*w --&gt; h*w*c</span></span><br><span class="line">    <span class="keyword">return</span> img, label_n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_data_dir</span>(<span class="params">path_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_data):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件夹不存在，请检查数据是否存放到data_dir变量:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(path_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    BASE_DIR = os.path.dirname(__file__)</span><br><span class="line">    cifar_dir = <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/cifar-10&quot;</span>    <span class="comment"># 数据目录</span></span><br><span class="line">    data_dir = os.path.join(cifar_dir, <span class="string">&quot;cifar-10-batches-py&quot;</span>)           <span class="comment"># 源数据目录</span></span><br><span class="line">    check_data_dir(data_dir)</span><br><span class="line">    train_o_dir = os.path.join(cifar_dir, <span class="string">&quot;cifar10_train&quot;</span>)              <span class="comment"># 输出的目录</span></span><br><span class="line">    test_o_dir = os.path.join(cifar_dir, <span class="string">&quot;cifar10_test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train data</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        data_path = os.path.join(data_dir,  <span class="string">&quot;data_batch_&quot;</span> + <span class="built_in">str</span>(j))  <span class="comment"># data_batch_12345</span></span><br><span class="line">        train_data = unpickle(data_path)</span><br><span class="line">        <span class="built_in">print</span>(data_path + <span class="string">&quot; is loading...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">            <span class="comment"># 解析图片及标签</span></span><br><span class="line">            img, label_num = pasre_pickle_img(train_data)</span><br><span class="line">            <span class="comment"># 创建文件夹</span></span><br><span class="line">            o_dir = os.path.join(train_o_dir, label_num)</span><br><span class="line">            my_mkdir(o_dir)</span><br><span class="line">            <span class="comment"># 保存图片</span></span><br><span class="line">            img_name = label_num + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(i + (j - <span class="number">1</span>)*<span class="number">10000</span>) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">            img_path = os.path.join(o_dir, img_name)</span><br><span class="line">            imwrite(img_path, img)</span><br><span class="line">        <span class="built_in">print</span>(data_path + <span class="string">&quot; loaded.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test data</span></span><br><span class="line">    test_data_path = os.path.join(data_dir, <span class="string">&quot;test_batch&quot;</span>)</span><br><span class="line">    test_data = unpickle(test_data_path)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="comment"># 解析图片及标签</span></span><br><span class="line">        img, label_num = pasre_pickle_img(test_data)</span><br><span class="line">        <span class="comment"># 创建文件夹</span></span><br><span class="line">        o_dir = os.path.join(test_o_dir, label_num)</span><br><span class="line">        my_mkdir(o_dir)</span><br><span class="line">        <span class="comment"># 保存图片</span></span><br><span class="line">        img_name = label_num + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">        img_path = os.path.join(o_dir, img_name)</span><br><span class="line">        imwrite(img_path, img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="models-x2F-resnet-cifar10-py"><a href="#models-x2F-resnet-cifar10-py" class="headerlink" title="models&#x2F;resnet_cifar10.py"></a>models&#x2F;resnet_cifar10.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Properly implemented ResNet-s for CIFAR10 as described in paper [1].</span></span><br><span class="line"><span class="string">The implementation and structure of this file is hugely influenced by [2]</span></span><br><span class="line"><span class="string">which is implemented for ImageNet and doesn&#x27;t have option A for identity.</span></span><br><span class="line"><span class="string">Moreover, most of the implementations on the web is copy-paste from</span></span><br><span class="line"><span class="string">torchvision&#x27;s resnet and has wrong number of params.</span></span><br><span class="line"><span class="string">Proper ResNet-s for CIFAR10 (for fair comparision and etc.) has following</span></span><br><span class="line"><span class="string">number of layers and parameters:</span></span><br><span class="line"><span class="string">name      | layers | params</span></span><br><span class="line"><span class="string">ResNet20  |    20  | 0.27M</span></span><br><span class="line"><span class="string">ResNet32  |    32  | 0.46M</span></span><br><span class="line"><span class="string">ResNet44  |    44  | 0.66M</span></span><br><span class="line"><span class="string">ResNet56  |    56  | 0.85M</span></span><br><span class="line"><span class="string">ResNet110 |   110  |  1.7M</span></span><br><span class="line"><span class="string">ResNet1202|  1202  | 19.4m</span></span><br><span class="line"><span class="string">which this implementation indeed has.</span></span><br><span class="line"><span class="string">Reference:</span></span><br><span class="line"><span class="string">[1] Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun</span></span><br><span class="line"><span class="string">    Deep Residual Learning for Image Recognition. arXiv:1512.03385</span></span><br><span class="line"><span class="string">[2] https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py</span></span><br><span class="line"><span class="string">If you use this implementation in you work, please don&#x27;t forget to mention the</span></span><br><span class="line"><span class="string">author, Yerlan Idelbayev.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;ResNet&#x27;</span>, <span class="string">&#x27;resnet20&#x27;</span>, <span class="string">&#x27;resnet32&#x27;</span>, <span class="string">&#x27;resnet44&#x27;</span>, <span class="string">&#x27;resnet56&#x27;</span>, <span class="string">&#x27;resnet110&#x27;</span>, <span class="string">&#x27;resnet1202&#x27;</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__all__ 是针对模块公开接口的一种约定，以提供了”白名单“的形式暴露接口</span></span><br><span class="line"><span class="string">使用from xxx import *导入该文件时，只会导入 __all__ 列出的成员</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_weights_init</span>(<span class="params">m</span>):</span><br><span class="line">    classname = m.__class__.__name__</span><br><span class="line">    <span class="comment">#print(classname)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear) <span class="keyword">or</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        init.kaiming_normal_(m.weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LambdaLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, lambd</span>):</span><br><span class="line">        <span class="built_in">super</span>(LambdaLayer, self).__init__()</span><br><span class="line">        self.lambd = lambd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lambd(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicBlock</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_planes, planes, stride=<span class="number">1</span>, option=<span class="string">&#x27;A&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicBlock, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv2 = nn.Conv2d(planes, planes, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line"></span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line">        <span class="keyword">if</span> stride != <span class="number">1</span> <span class="keyword">or</span> in_planes != planes:</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                For CIFAR10 ResNet paper uses option A.</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                self.shortcut = LambdaLayer(<span class="keyword">lambda</span> x:</span><br><span class="line">                                            F.pad(x[:, :, ::<span class="number">2</span>, ::<span class="number">2</span>], (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, planes//<span class="number">4</span>, planes//<span class="number">4</span>), <span class="string">&quot;constant&quot;</span>, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                self.shortcut = nn.Sequential(</span><br><span class="line">                     nn.Conv2d(in_planes, self.expansion * planes, kernel_size=<span class="number">1</span>, stride=stride, bias=<span class="literal">False</span>),</span><br><span class="line">                     nn.BatchNorm2d(self.expansion * planes)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.bn2(self.conv2(out))</span><br><span class="line">        out += self.shortcut(x)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, block, num_blocks, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.in_planes = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">16</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(<span class="number">16</span>)</span><br><span class="line">        self.layer1 = self._make_layer(block, <span class="number">16</span>, num_blocks[<span class="number">0</span>], stride=<span class="number">1</span>)  <span class="comment"># 原版16</span></span><br><span class="line">        self.layer2 = self._make_layer(block, <span class="number">32</span>, num_blocks[<span class="number">1</span>], stride=<span class="number">2</span>)  <span class="comment"># 原版32</span></span><br><span class="line">        self.layer3 = self._make_layer(block, <span class="number">64</span>, num_blocks[<span class="number">2</span>], stride=<span class="number">2</span>)  <span class="comment"># 原版64</span></span><br><span class="line">        self.linear = nn.Linear(<span class="number">64</span>, num_classes)</span><br><span class="line"></span><br><span class="line">        self.apply(_weights_init)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_layer</span>(<span class="params">self, block, planes, num_blocks, stride</span>):</span><br><span class="line">        strides = [stride] + [<span class="number">1</span>]*(num_blocks-<span class="number">1</span>)</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="keyword">for</span> stride <span class="keyword">in</span> strides:</span><br><span class="line">            layers.append(block(self.in_planes, planes, stride))</span><br><span class="line">            self.in_planes = planes * block.expansion</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.layer1(out)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = self.layer3(out)</span><br><span class="line">        out = F.avg_pool2d(out, out.size()[<span class="number">3</span>])</span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        out = self.linear(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet8</span>(<span class="params">num_classes=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], num_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet20</span>(<span class="params">num_classes=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], num_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet32</span>(<span class="params">num_classes=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], num_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet44</span>():</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet56</span>(<span class="params">num_classes=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>], num_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet110</span>():</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet1202</span>():</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fake_img = torch.randn((<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    <span class="keyword">for</span> net_name <span class="keyword">in</span> __all__:</span><br><span class="line">        <span class="keyword">if</span> net_name.startswith(<span class="string">&#x27;resnet&#x27;</span>):</span><br><span class="line">            model = <span class="built_in">globals</span>()[net_name]()  <span class="comment"># globals()以字典形式返回全局变量</span></span><br><span class="line">            output = model(fake_img)</span><br><span class="line">            <span class="built_in">print</span>(net_name, output.shape)</span><br></pre></td></tr></table></figure><h3 id="tools-x2F-progressively-balance-py"><a href="#tools-x2F-progressively-balance-py" class="headerlink" title="tools&#x2F;progressively_balance.py"></a>tools&#x2F;progressively_balance.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :progressively_balance.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-12</span></span><br><span class="line"><span class="string"># @brief        :渐进式平衡采样 progressive_balance功能实现</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;agg&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, WeightedRandomSampler</span><br><span class="line"><span class="keyword">from</span> datasets.cifar_longtail <span class="keyword">import</span> CifarLTDataset</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> check_data_dir</span><br><span class="line"><span class="keyword">from</span> config.cifar_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressiveSampler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dataset, max_epoch</span>):</span><br><span class="line">        self.max_epoch = max_epoch</span><br><span class="line">        self.dataset = dataset      <span class="comment"># dataset</span></span><br><span class="line">        self.train_targets = [<span class="built_in">int</span>(info[<span class="number">1</span>]) <span class="keyword">for</span> info <span class="keyword">in</span> dataset.img_info]    <span class="comment">#  hard code，记录各个样本的标签</span></span><br><span class="line">        self.nums_per_cls = dataset.nums_per_cls        <span class="comment"># 记录每个类别的样本数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cal_class_prob</span>(<span class="params">self, q</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据q值计算每个类的采样概率，公式中的 p_j</span></span><br><span class="line"><span class="string">        :param q: float , [0, 1]</span></span><br><span class="line"><span class="string">        :return: list,</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num_pow = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">pow</span>(x, q), self.nums_per_cls))</span><br><span class="line">        sigma_num_pow = <span class="built_in">sum</span>(num_pow)</span><br><span class="line">        cls_prob = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x/sigma_num_pow, num_pow))</span><br><span class="line">        <span class="keyword">return</span> cls_prob</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cal_pb_prob</span>(<span class="params">self, t</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        progressively-balanced 概率计算</span></span><br><span class="line"><span class="string">        :param t: 当前epoch数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p_ib = self._cal_class_prob(q=<span class="number">1</span>)</span><br><span class="line">        p_cb = self._cal_class_prob(q=<span class="number">0</span>)</span><br><span class="line">        p_pb = (<span class="number">1</span> - t/self.max_epoch) * np.array(p_ib) + (t/self.max_epoch) * np.array(p_cb)</span><br><span class="line"></span><br><span class="line">        p_pb /= np.array(self.nums_per_cls)  <span class="comment"># very important！由于pytorch的sampler机制是按每个样本采样，所以要除以样本总数</span></span><br><span class="line">        <span class="keyword">return</span> p_pb.tolist()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, epoch</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成sampler</span></span><br><span class="line"><span class="string">        :param epoch:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p_pb = self._cal_pb_prob(t=epoch)</span><br><span class="line">        p_pb = torch.tensor(p_pb, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">        samples_weights = p_pb[self.train_targets]  <span class="comment"># 计算每个样本被采样的权重，这里是依据样本的类别来赋权，self.train_targets是标签</span></span><br><span class="line">        <span class="comment"># weights：要求是每个样本赋予weight</span></span><br><span class="line">        <span class="comment"># num_samples：该sampler一个epoch采样数量</span></span><br><span class="line">        sampler = WeightedRandomSampler(weights=samples_weights, num_samples=<span class="built_in">len</span>(samples_weights))</span><br><span class="line">        <span class="comment"># sampler = WeightedRandomSampler(weights=samples_weights, num_samples=1000)</span></span><br><span class="line">        <span class="keyword">return</span> sampler, p_pb</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plot_line</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.max_epoch):</span><br><span class="line">            _, weights = self(i)</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">20</span> == <span class="number">19</span>:</span><br><span class="line">                x = <span class="built_in">range</span>(<span class="built_in">len</span>(weights))</span><br><span class="line">                plt.plot(x, weights, label=<span class="string">&quot;t=&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.title(<span class="string">&quot;max epoch=&quot;</span>+<span class="built_in">str</span>(self.max_epoch))</span><br><span class="line">        plt.xlabel(<span class="string">&quot;class index sorted by numbers&quot;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&quot;weights&quot;</span>)</span><br><span class="line">        <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置路径</span></span><br><span class="line">    train_dir = <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/cifar-10/cifar10_train&quot;</span></span><br><span class="line">    check_data_dir(train_dir)</span><br><span class="line">    train_data = CifarLTDataset(root_dir=train_dir, transform=cfg.transforms_train, isTrain=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    max_epoch = <span class="number">200</span></span><br><span class="line">    sampler_generator = ProgressiveSampler(train_data, max_epoch)</span><br><span class="line">    sampler_generator.plot_line()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(max_epoch):</span><br><span class="line">        <span class="keyword">if</span> epoch % <span class="number">20</span> != <span class="number">19</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        sampler, _ = sampler_generator(epoch)</span><br><span class="line">        train_loader = DataLoader(dataset=train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">False</span>, num_workers=cfg.workers,</span><br><span class="line">                                  sampler=sampler)</span><br><span class="line">        labels = []</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_loader:</span><br><span class="line">            _, label, _ = data</span><br><span class="line">            labels.extend(label.tolist())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Epoch:&#123;&#125;, Counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, Counter(labels)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="config-x2F-cifar-config-py"><a href="#config-x2F-cifar-config-py" class="headerlink" title="config&#x2F;cifar_config.py"></a>config&#x2F;cifar_config.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :cifar_config.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-12</span></span><br><span class="line"><span class="string"># @brief        :cifar网络参数配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> datasets.flower102 <span class="keyword">import</span> FlowerDataset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> easydict <span class="keyword">import</span> EasyDict</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfg = EasyDict() <span class="comment"># 访问属性的方式去使用key-value 即通过key 或者 value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cfg.model_name = &quot;resnet&quot;</span></span><br><span class="line"><span class="comment"># cfg.model_name = &quot;vgg16_bn&quot;</span></span><br><span class="line"><span class="comment"># cfg.model_name = &quot;se_resnet50&quot;</span></span><br><span class="line"></span><br><span class="line">cfg.pb = <span class="literal">True</span></span><br><span class="line">cfg.mixup = <span class="literal">False</span>  <span class="comment"># 是否采用mixup</span></span><br><span class="line">cfg.mixup_alpha = <span class="number">1.</span>  <span class="comment"># beta分布的参数. beta分布是一组定义在(0,1) 区间的连续概率分布。</span></span><br><span class="line">cfg.label_smooth = <span class="literal">False</span>  <span class="comment"># 是否采用标签平滑</span></span><br><span class="line">cfg.label_smooth_eps = <span class="number">0.01</span>  <span class="comment"># 标签平滑超参数 eps</span></span><br><span class="line"></span><br><span class="line">data_dir = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset&quot;</span></span><br><span class="line">cfg.path_resnet18 = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;resnet18-f37072fd.pth&quot;</span>)</span><br><span class="line">cfg.path_vgg16bn = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;vgg16_bn-6c64b313.pth&quot;</span>)</span><br><span class="line">cfg.path_se_res50 = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;seresnet50-60a8950a85b2b.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">cfg.train_bs = <span class="number">128</span> <span class="comment"># batchsize</span></span><br><span class="line">cfg.valid_bs = <span class="number">128</span></span><br><span class="line">cfg.workers = <span class="number">4</span> <span class="comment">#线程个数</span></span><br><span class="line"></span><br><span class="line">cfg.lr_init = <span class="number">0.1</span></span><br><span class="line">cfg.momentum = <span class="number">0.9</span></span><br><span class="line">cfg.weight_decay = <span class="number">1e-4</span> <span class="comment"># 权重衰减</span></span><br><span class="line"></span><br><span class="line">cfg.factor = <span class="number">0.1</span>  <span class="comment"># 权重更新的比例</span></span><br><span class="line">cfg.milestones = [<span class="number">160</span>, <span class="number">180</span>]  <span class="comment"># 什么时候下降学习率</span></span><br><span class="line">cfg.max_epoch = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">cfg.log_interval = <span class="number">20</span>  <span class="comment"># 日志打印间隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 数据集</span></span><br><span class="line">norm_mean = [<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>]</span><br><span class="line">norm_std = [<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>] <span class="comment"># cifar-10统计得到的</span></span><br><span class="line">normTransform = transforms.Normalize(norm_mean, norm_std)</span><br><span class="line"></span><br><span class="line">cfg.transforms_train = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">32</span>)),</span><br><span class="line">    <span class="comment"># transforms.CenterCrop(256),</span></span><br><span class="line">    transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),</span><br><span class="line">    transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normTransform,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">cfg.transforms_valid = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normTransform,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="src-x2F-cifar-train-py"><a href="#src-x2F-cifar-train-py" class="headerlink" title="src&#x2F;cifar_train.py"></a>src&#x2F;cifar_train.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :cifar_train.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-12</span></span><br><span class="line"><span class="string"># @brief        :cifar-10训练代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> tools.model_trainer <span class="keyword">import</span> ModelTrainer</span><br><span class="line"><span class="keyword">from</span> tools.mixup <span class="keyword">import</span> mixup_data, mixup_criterion</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tools.my_loss <span class="keyword">import</span> LabelSmoothLoss</span><br><span class="line"><span class="keyword">from</span> models.resnet_cifar10 <span class="keyword">import</span> resnet20</span><br><span class="line"><span class="keyword">from</span> config.cifar_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datasets.cifar_longtail <span class="keyword">import</span> CifarLTDataset</span><br><span class="line"><span class="keyword">from</span> tools.progressively_balance <span class="keyword">import</span> ProgressiveSampler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup_seed(<span class="number">12345</span>) <span class="comment"># 先固定随机种子</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析命令行的参数</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&#x27;learning rate&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--bs&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;training batch size&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--max_epoch&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--data_root_dir&#x27;</span>,default=<span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/cifar-10&quot;</span>,</span><br><span class="line">                    <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;path to your dataset&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收参数</span></span><br><span class="line">cfg.lr_init = args.lr <span class="keyword">if</span> args.lr <span class="keyword">else</span> cfg.lr_init</span><br><span class="line">cfg.train_bs = args.bs <span class="keyword">if</span> args.bs <span class="keyword">else</span> cfg.train_bs</span><br><span class="line">cfg.max_epoch = args.max_epoch <span class="keyword">if</span> args.bs <span class="keyword">else</span> cfg.max_epoch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step 0: config</span></span><br><span class="line">    <span class="comment"># 数据路径</span></span><br><span class="line">    train_dir = os.path.join(args.data_root_dir, <span class="string">&quot;cifar10_train&quot;</span>)</span><br><span class="line">    valid_dir = os.path.join(args.data_root_dir, <span class="string">&quot;cifar10_test&quot;</span>)</span><br><span class="line">    <span class="comment"># path_state_dict = &quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet18-f37072fd.pth&quot; # 预训练模型所在位置</span></span><br><span class="line">    check_data_dir(train_dir) <span class="comment"># 验证路径是否存在</span></span><br><span class="line">    check_data_dir(valid_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建logger</span></span><br><span class="line">    res_dir = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>)</span><br><span class="line">    logger, log_dir = make_logger(res_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 1: 数据集</span></span><br><span class="line">    <span class="comment"># 构建Dataset实例，构建DataLoader</span></span><br><span class="line">    train_data = CifarLTDataset(root_dir=train_dir, transform=cfg.transforms_train,isTrain=<span class="literal">True</span>)</span><br><span class="line">    valid_data = CifarLTDataset(root_dir=valid_dir, transform=cfg.transforms_valid,isTrain=<span class="literal">False</span>)</span><br><span class="line">    train_loader = DataLoader(dataset=train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">True</span>, num_workers=cfg.workers)</span><br><span class="line">    valid_loader = DataLoader(dataset=valid_data, batch_size=cfg.valid_bs, num_workers=cfg.workers)</span><br><span class="line">    <span class="keyword">if</span> cfg.pb:</span><br><span class="line">        sampler_generator = ProgressiveSampler(train_data, cfg.max_epoch)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 模型</span></span><br><span class="line">    model = resnet20()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # 加载预训练模型的参数 state_dict</span></span><br><span class="line"><span class="string">    if os.path.exists(path_state_dict):</span></span><br><span class="line"><span class="string">        pretrained_state_dict = torch.load(path_state_dict, map_location=&#x27;cpu&#x27;)</span></span><br><span class="line"><span class="string">        model.load_state_dict(pretrained_state_dict)</span></span><br><span class="line"><span class="string">        logger.info(&quot;Load pretrained model&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        logger.info(&quot;The pretrained model path &#123;&#125; is not exists&quot;.format(path_state_dict))</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 修改最后一层</span></span><br><span class="line"><span class="string">    num_ftrs = model.fc.in_features</span></span><br><span class="line"><span class="string">    model.fc = nn.Linear(num_ftrs, train_data.cls_num)</span></span><br><span class="line"><span class="string">    # to device</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 损失函数 优化器 等</span></span><br><span class="line">    loss_f = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=cfg.lr_init, momentum=cfg.momentum, weight_decay=cfg.weight_decay)</span><br><span class="line">    scheduler = optim.lr_scheduler.MultiStepLR(optimizer, gamma=cfg.factor, milestones=cfg.milestones)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 迭代训练</span></span><br><span class="line">    loss_rec = &#123;<span class="string">&#x27;train&#x27;</span>:[], <span class="string">&quot;valid&quot;</span>:[]&#125;</span><br><span class="line">    acc_rec = &#123;<span class="string">&#x27;train&#x27;</span>:[], <span class="string">&quot;valid&quot;</span>:[]&#125;</span><br><span class="line">    best_acc, best_epoch = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(cfg.max_epoch):</span><br><span class="line">        <span class="keyword">if</span> cfg.pb:</span><br><span class="line">            sampler, _ = sampler_generator(epoch)</span><br><span class="line">            train_loader = DataLoader(dataset=train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">False</span>,</span><br><span class="line">                                      num_workers=cfg.workers, sampler=sampler)</span><br><span class="line">        <span class="comment"># dataloader</span></span><br><span class="line">        loss_train, acc_train, mat_train, path_error_train = ModelTrainer.train(</span><br><span class="line">            train_loader, model, loss_f, optimizer, scheduler, epoch, device, cfg, logger)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># valid</span></span><br><span class="line">        loss_valid, acc_valid, mat_valid, path_error_valid = ModelTrainer.valid(</span><br><span class="line">            valid_loader, model, loss_f, device)</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Epoch[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Train Acc:&#123;:.2%&#125; Valid Acc:&#123;:.2%&#125; Train loss:&#123;:.4f&#125; Valid loss:&#123;:.4f&#125; LR:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>,</span><br><span class="line">                cfg.max_epoch, acc_train, acc_valid, loss_train, loss_valid,</span><br><span class="line">                optimizer.param_groups[<span class="number">0</span>][<span class="string">&quot;lr&quot;</span>]))</span><br><span class="line"></span><br><span class="line">        scheduler.step() <span class="comment"># 学习率进行更新！！！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练信息</span></span><br><span class="line">        loss_rec[<span class="string">&quot;train&quot;</span>].append(loss_train), loss_rec[<span class="string">&quot;valid&quot;</span>].append(loss_valid)</span><br><span class="line">        acc_rec[<span class="string">&quot;train&quot;</span>].append(acc_train), acc_rec[<span class="string">&quot;valid&quot;</span>].append(acc_valid)</span><br><span class="line">        <span class="comment"># 保存混淆矩阵图</span></span><br><span class="line">        show_confMat(mat_train, train_data.names, <span class="string">&quot;train&quot;</span>, log_dir, epoch=epoch, verbose=epoch == cfg.max_epoch - <span class="number">1</span>)</span><br><span class="line">        show_confMat(mat_valid, valid_data.names, <span class="string">&quot;valid&quot;</span>, log_dir, epoch=epoch, verbose=epoch == cfg.max_epoch - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 保存loss曲线 acc曲线</span></span><br><span class="line">        plt_x = np.arange(<span class="number">1</span>, epoch + <span class="number">2</span>)</span><br><span class="line">        plot_line(plt_x, loss_rec[<span class="string">&quot;train&quot;</span>], plt_x, loss_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;loss&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, acc_rec[<span class="string">&quot;train&quot;</span>], plt_x, acc_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;acc&quot;</span>, out_dir=log_dir)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">or</span> epoch == cfg.max_epoch - <span class="number">1</span>:</span><br><span class="line">            best_epoch = epoch <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">else</span> best_epoch</span><br><span class="line">            best_acc = acc_valid <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">else</span> best_acc</span><br><span class="line">            checkpoint = &#123;<span class="string">&quot;model_state_dict&quot;</span>: model.state_dict(),</span><br><span class="line">                          <span class="string">&quot;optimizer_state_dict&quot;</span>: optimizer.state_dict(),</span><br><span class="line">                          <span class="string">&quot;epoch&quot;</span>: epoch,</span><br><span class="line">                          <span class="string">&quot;best_acc&quot;</span>: best_acc&#125;</span><br><span class="line">            pkl_name = <span class="string">&quot;checkpoint_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;checkpoint_best.pkl&quot;</span></span><br><span class="line">            path_checkpoint = os.path.join(log_dir, pkl_name)</span><br><span class="line">            torch.save(checkpoint, path_checkpoint)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存错误图片的路径</span></span><br><span class="line">            err_ims_name = <span class="string">&quot;error_imgs_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;error_imgs_best.pkl&quot;</span></span><br><span class="line">            path_err_img = os.path.join(log_dir, err_ims_name)</span><br><span class="line">            error_info = &#123;&#125;</span><br><span class="line">            error_info[<span class="string">&quot;train&quot;</span>] = path_error_train</span><br><span class="line">            error_info[<span class="string">&quot;valid&quot;</span>] = path_error_valid</span><br><span class="line">            pickle.dump(error_info, <span class="built_in">open</span>(path_err_img, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line">    logger.info(<span class="string">&quot;&#123;&#125; done, best acc:&#123;&#125; in: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        datetime.strftime(datetime.now(), <span class="string">&quot;%m-%d_%H-%M&quot;</span>), best_acc, best_epoch))</span><br></pre></td></tr></table></figure><h2 id="实验实践"><a href="#实验实践" class="headerlink" title="实验实践"></a>实验实践</h2><p>采用PB Sampling和不采用PB Sampling时，模型精度的变化，表格如下：</p><table><thead><tr><th></th><th>Train Acc</th><th>Valid Acc</th><th>Train loss</th><th>Valid loss</th></tr></thead><tbody><tr><td>有PB Sampling</td><td>96.78%</td><td>71.25%</td><td>0.0920</td><td>1.3972</td></tr><tr><td>无PB Sampling</td><td>97.19%</td><td>68.87%</td><td>0.0821</td><td>1.6085</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 花朵分类项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「花朵分类项目」（四）模型涨点技巧</title>
      <link href="/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E5%9B%9B%EF%BC%89%E6%A8%A1%E5%9E%8B%E6%B6%A8%E7%82%B9%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E5%9B%9B%EF%BC%89%E6%A8%A1%E5%9E%8B%E6%B6%A8%E7%82%B9%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="数据增强「增广」"><a href="#数据增强「增广」" class="headerlink" title="数据增强「增广」"></a>数据增强「增广」</h2><p>数据增强指通过图像处理方法对训练集数据进行丰富化</p><p>数据增强使用原则：让训练集逼近验证集、测试集 </p><h3 id="PyTorch-Transforms的二十二个方法"><a href="#PyTorch-Transforms的二十二个方法" class="headerlink" title="PyTorch.Transforms的二十二个方法"></a>PyTorch.Transforms的二十二个方法</h3><table><thead><tr><th>名称</th><th>代码操作</th></tr></thead><tbody><tr><td><strong>裁剪</strong></td><td><strong>Crop</strong></td></tr><tr><td>中心裁剪</td><td>transforms.CenterCrop</td></tr><tr><td>随机裁剪</td><td>transforms.RandomCrop</td></tr><tr><td>随机长宽比裁剪</td><td>transforms.RandomResizedCrop</td></tr><tr><td>上下左右中心裁剪</td><td>transforms.FiveCrop</td></tr><tr><td>上下左右中心裁剪后翻转</td><td>transforms.TenCrop</td></tr><tr><td><strong>翻转和旋转</strong></td><td><strong>Flip and Rotation</strong></td></tr><tr><td>依概率 p 水平翻转</td><td>transforms.RandomHorizontalFlip(p&#x3D;0.5)</td></tr><tr><td>依概率 p 垂直翻转</td><td>transforms.RandomVerticalFlip(p&#x3D;0.5)</td></tr><tr><td>随机旋转</td><td>transforms.RandomRotation</td></tr><tr><td><strong>图像变换</strong></td><td></td></tr><tr><td>resize</td><td>transforms.Resize</td></tr><tr><td>标准化</td><td>transforms.Normalize</td></tr><tr><td>转为 tensor，并归一化至[0-1]</td><td>transforms.ToTensor</td></tr><tr><td>填充</td><td>transforms.Pad</td></tr><tr><td>修改亮度、对比度和饱和度</td><td>transforms.ColorJitter</td></tr><tr><td>转灰度图</td><td>transforms.Grayscale</td></tr><tr><td>线性变换</td><td>transforms.LinearTransformation()</td></tr><tr><td>仿射变换</td><td>transforms.RandomAffine</td></tr><tr><td>依概率 p 转为灰度图</td><td>transforms.RandomGrayscale</td></tr><tr><td>将数据转换为 PILImage</td><td>transforms.ToPILImage</td></tr><tr><td>Apply a user-defined lambda as a transform</td><td>transforms.Lambda</td></tr><tr><td><strong>对 transforms 操作，使数据增强更灵活</strong></td><td></td></tr><tr><td>从给定的一系列 transforms 中选一个进行操作</td><td>transforms.RandomChoice(transforms)</td></tr><tr><td>给一个 transform 加上概率，依概率进行操作</td><td>transforms.RandomApply(transforms, p&#x3D;0.5)</td></tr><tr><td>将 transforms 中的操作随机打乱</td><td>transforms.RandomOrder</td></tr></tbody></table><span id="more"></span><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f55c3j74j20kg0k0q3s.jpg" alt="" style="zoom: 25%;" /><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f3we9uimj20k00k0gq2.jpg"></p><h3 id="Mixup"><a href="#Mixup" class="headerlink" title="Mixup"></a>Mixup</h3><p>「<a href="https://arxiv.org/abs/1710.09412">mixup: Beyond Empirical Risk Minimization</a>」</p><p>Mixup从经验风险最小化方法(Empirical Risk Minimization, ERM)角度思考，发现问题：</p><p>网络倾向于记忆训练样本，而不是泛化；</p><p>难以抵御分布外样本，如肉眼感官没有区别的对抗样本</p><p>提出使用邻域风险最小化原则(Vicinal Risk Minimization, VRM)来解决上述问题，具体操作方法称为Mixup</p><p><strong>大道至简</strong>：将两张图片按比例混合在一起得到新图片，从而扩充数据丰富度Lambda：从Beta分布中随机采样</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f5yt7nlqj20zk04bdgp.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f60zmhl6j20vk07dgmu.jpg"></p><h2 id="Label-Smoothing「正则化」"><a href="#Label-Smoothing「正则化」" class="headerlink" title="Label Smoothing「正则化」"></a>Label Smoothing「正则化」</h2><p>「<a href="https://arxiv.org/abs/1512.00567">Rethinking the Inception Architecture for Computer Vision</a>」</p><p>交叉熵 $CrossEntropy$: $H(p, q)&#x3D; - \sum_{K-1}^Klog(p_k)q_k{}$衡量两个概率分布之间的差异</p><p>概率有两个性质：<strong>概率值非负</strong> 和 <strong>概率值和为1</strong></p><p>所以得到的数据可以完全依靠$Softmax$函数转化到概率分布的形式</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f6fqcch7j20zk079wep.jpg" style="zoom:25%;" /><table><thead><tr><th>概率两个性质</th><th>Softmax操作</th></tr></thead><tbody><tr><td>概率值是非负的</td><td>取指数，实现非负</td></tr><tr><td>概率之和等于1</td><td>除以指数之和，实现和为1</td></tr></tbody></table><p>传统的One-hot编码存在过度自信的问题，导致过拟合</p><p> $q$为 $one-hot$向量 $(0,1,0,0)$</p><p>$H(p, q) &#x3D; -\sum_{K&#x3D;1}^{K}log(p_k)q_k &#x3D; -log(p_2)q_2 &#x3D; -log(p_2) * 1$</p><p>标签平滑，把One-hot中概率为1的那一项进行衰减，避免过度自信，衰减的那部分confience平均分到其它的每一个类别中</p><p>$label &#x3D; (0, 1, 0, 0)$  $label Smoothing&#x3D;(0.00033, 0.999, 0.00033, 0.00033)$</p><p>$H(p, q) &#x3D; -\sum_{K&#x3D;1}^{K}log(p_k)q_k &#x3D; -[log(p_1)q_1 + log(p_2)q_2 + log(p_3)q_3 + log(p_4)q_4]$</p><h2 id="代码补充"><a href="#代码补充" class="headerlink" title="代码补充"></a>代码补充</h2><h3 id="tools-x2F-mixup-py"><a href="#tools-x2F-mixup-py" class="headerlink" title="tools&#x2F;mixup.py"></a>tools&#x2F;mixup.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :mixup.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-10</span></span><br><span class="line"><span class="string"># @brief        :mixup功能实现 内含测试样例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mixup_data</span>(<span class="params">x, y, alpha=<span class="number">1.0</span>, device=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return mixed inputs, pairs of targets, and lambda&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过beta分布获得lambda beta分布的参数alpha == beta 因此都是alpha</span></span><br><span class="line">    lam = np.random.beta(alpha, alpha) <span class="keyword">if</span> alpha &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取需要重叠的图片的标号</span></span><br><span class="line">    batch_size = x.size()[<span class="number">0</span>]</span><br><span class="line">    index = torch.randperm(batch_size).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mixup</span></span><br><span class="line">    mixed_x = lam * x + (<span class="number">1</span> - lam) * x[index, :]</span><br><span class="line">    y_a, y_b = y, y[index]</span><br><span class="line">    <span class="keyword">return</span> mixed_x, y_a, y_b, lam</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mixup_criterion</span>(<span class="params">criterion, pred, y_a, y_b, lam</span>):</span><br><span class="line">    <span class="keyword">return</span> lam * criterion(pred, y_a) + (<span class="number">1</span> - lam) * criterion(pred, y_b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> cv2</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    path_1 = <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/flower102/jpg/image_00001.jpg&quot;</span></span><br><span class="line">    path_2 = <span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/flower102/jpg/image_00002.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">    img1 = cv2.imread(path_1)</span><br><span class="line">    img2 = cv2.imread(path_2)</span><br><span class="line">    img1 = cv2.resize(img1, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    img2 = cv2.resize(img2, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"></span><br><span class="line">    alpha = <span class="number">1</span></span><br><span class="line">    figsize = <span class="number">15</span></span><br><span class="line">    plt.figure(figsize=(<span class="built_in">int</span>(figsize), <span class="built_in">int</span>(figsize)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># lam = i * 0.1</span></span><br><span class="line">        lam = np.random.beta(alpha, alpha)</span><br><span class="line">        im_mixup = (img1 * lam + img2 * (<span class="number">1</span> - lam)).astype(np.uint8)</span><br><span class="line">        im_mixup = cv2.cvtColor(im_mixup, cv2.COLOR_BGR2RGB)</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i)</span><br><span class="line">        plt.title(<span class="string">&quot;lamda_&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(lam))</span><br><span class="line">        plt.imshow(im_mixup)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="tools-x2F-my-loss-py"><a href="#tools-x2F-my-loss-py" class="headerlink" title="tools&#x2F;my_loss.py"></a>tools&#x2F;my_loss.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :my_loss.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-10</span></span><br><span class="line"><span class="string"># @brief        :重写的loss函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LabelSmoothLoss</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, smoothing = <span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LabelSmoothLoss, self).__init__()</span><br><span class="line">        self.smoothing = smoothing</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span>, target</span>):</span><br><span class="line">        log_prob = F.log_softmax(<span class="built_in">input</span>, dim=-<span class="number">1</span>)</span><br><span class="line">        weight = <span class="built_in">input</span>.new_ones(<span class="built_in">input</span>.size()) * self.smoothing / (<span class="built_in">input</span>.size(-<span class="number">1</span>) - <span class="number">1.</span>)</span><br><span class="line">        weight.scatter_(-<span class="number">1</span>, target.unsqueeze(-<span class="number">1</span>), (<span class="number">1</span> - self.smoothing))</span><br><span class="line">        loss = (-weight * log_prob).<span class="built_in">sum</span>(dim=-<span class="number">1</span>).mean()</span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    output = torch.tensor([[<span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">10.0</span>], [<span class="number">1.0</span>, <span class="number">5.0</span>, <span class="number">4.0</span>], [<span class="number">1.0</span>, <span class="number">15.0</span>, <span class="number">4.0</span>]])</span><br><span class="line">    label = torch.tensor([<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], dtype=torch.int64)</span><br><span class="line"></span><br><span class="line">    criterion = LabelSmoothLoss(<span class="number">0.001</span>)</span><br><span class="line">    loss = criterion(output, label)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CrossEntropy:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(loss))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 花朵分类项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「花朵分类项目」（三）卷积神经网络模型</title>
      <link href="/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="VGG-ResNet-SENet介绍"><a href="#VGG-ResNet-SENet介绍" class="headerlink" title="VGG ResNet SENet介绍"></a>VGG ResNet SENet介绍</h2><h3 id="VGG-「原文链接」"><a href="#VGG-「原文链接」" class="headerlink" title="VGG 「原文链接」"></a>VGG 「<a href="https://arxiv.org/abs/1409.1556">原文链接</a>」</h3><p><img src="https://pic3.zhimg.com/v2-dfe4eaaa4450e2b58b38c5fe82f918c0_1440w.jpg?source=172ae18b"></p><p>在VGG中，使用了3个3x3卷积核来代替7x7卷积核，使用了2个3x3卷积核来代替5*5卷积核，这样做的主要目的是在保证具有相同感知野的条件下，提升了网络的深度，在一定程度上提升了神经网络的效果。</p><h3 id="ResNet「原文链接」"><a href="#ResNet「原文链接」" class="headerlink" title="ResNet「原文链接」"></a>ResNet「<a href="https://arxiv.org/abs/1512.03385">原文链接</a>」</h3><p><img src="https://pic4.zhimg.com/80/v2-252e6d9979a2a91c2d3033b9b73eb69f_720w.jpg"></p><p>残差网络依旧让非线形层满足$H’(x,w_h)$，然后从输入直接引入一个短连接到非线形层的输出上，使得整个映射变为<br>$$<br>H(x) &#x3D; F(x) + x \Leftrightarrow  H’(x,w_h) + x<br>$$<br>$Shortcut-mapping$有利于<strong>梯度传播</strong>，梯度可以更有效的从后往前传播，同样可以有效的解决网络层数增加会导致的网络退化问题「至少不会变的更坏」，如果恒等映射已经是最优解，那么残差模块只需要拟合零映射。<br>$$<br>\frac{\partial H}{\partial x} &#x3D; \frac{\partial F}{\partial x} + \frac{\partial x}{\partial x} &#x3D; \frac{\partial F}{\partial x} + 1<br>$$</p><h3 id="SENet「原文链接」"><a href="#SENet「原文链接」" class="headerlink" title="SENet「原文链接」"></a>SENet「<a href="https://arxiv.org/abs/1709.01507">原文链接</a>」</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/65459972">参考链接</a>🔗</p></blockquote><p>对于卷积操作，很大一部分工作是提高<strong>感受野</strong>，即空间上融合更多特征融合，或者是提取多尺度空间信息，如Inception网络的多分支结构。对于channel维度的特征融合，卷积操作基本上默认对输入特征图的所有channel进行融合。而MobileNet网络中的组卷积（Group Convolution）和深度可分离卷积（Depthwise Separable Convolution）对channel进行分组也主要是为了使模型更加轻量级，减少计算量。而SENet网络的创新点在于<strong>关注channel之间的关系</strong>，希望模型可以自动学习到<strong>不同channel特征的重要程度</strong>。为此，SENet提出了<strong>Squeeze-and-Excitation (SE)模块</strong>，如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2iqetersyj20ru07rt98.jpg"></p><p>SE模块首先对卷积得到的特征图进行<strong>Squeeze</strong>操作，得到channel级的全局特征，然后对全局特征进行<strong>Excitation</strong>操作，学习各个channel间的关系，也<strong>得到不同channel的权重</strong>，最后乘以原来的特征图得到最终特征。</p><p>本质上，SE模块是在<strong>channel维度</strong>上做<strong>attention</strong>操作，这种注意力机制让模型可以更加关注信息量最大的channel特征，而抑制那些不重要的channel特征。另外一点是SE模块是通用的，这意味着其可以嵌入到现有的网络架构中。</p><h2 id="输入尺寸的选择"><a href="#输入尺寸的选择" class="headerlink" title="输入尺寸的选择"></a>输入尺寸的选择</h2><h3 id="方法一：让数据适应模型"><a href="#方法一：让数据适应模型" class="headerlink" title="方法一：让数据适应模型"></a>方法一：让数据适应模型</h3><p>直接将图像缩放&#x2F;裁剪到模型要求的输入尺寸，常见的尺寸如基于ImageNet设计的如224*224系列、基于Cifar设计的32*32系列</p><h3 id="方法二：修改模型适应参数"><a href="#方法二：修改模型适应参数" class="headerlink" title="方法二：修改模型适应参数"></a>方法二：修改模型适应参数</h3><p>修改分辨率下降的地方，以改变模型对输入尺寸的要求删除一个Pooling，使224*224变为可接收112*112增加一个Pooling，使224*224变为可接收448*448卷积步长stride&#x3D;2的，改为stide&#x3D;1，使输入可变为112*112卷积步长stride&#x3D;1的，改为stide&#x3D;2，使输入可变为448*448自行设计卷积核大小，stride，池化层数量</p><span id="more"></span><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f0prhgq1j208w0zkmza.jpg" style="zoom:25%;" /><h3 id="方法三：划分成Patch形式，分别处理，如遥感影像、数字病理图像"><a href="#方法三：划分成Patch形式，分别处理，如遥感影像、数字病理图像" class="headerlink" title="方法三：划分成Patch形式，分别处理，如遥感影像、数字病理图像"></a>方法三：划分成Patch形式，分别处理，如遥感影像、数字病理图像</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2f0pbom0jj20zk0by769.jpg"></p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="models-x2F-vgg-tv-py"><a href="#models-x2F-vgg-tv-py" class="headerlink" title="models&#x2F;vgg_tv.py"></a>models&#x2F;vgg_tv.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.model_zoo <span class="keyword">as</span> model_zoo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__all__ = [</span><br><span class="line">    <span class="string">&#x27;VGG&#x27;</span>, <span class="string">&#x27;vgg11&#x27;</span>, <span class="string">&#x27;vgg11_bn&#x27;</span>, <span class="string">&#x27;vgg13&#x27;</span>, <span class="string">&#x27;vgg13_bn&#x27;</span>, <span class="string">&#x27;vgg16&#x27;</span>, <span class="string">&#x27;vgg16_bn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg19_bn&#x27;</span>, <span class="string">&#x27;vgg19&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_urls = &#123;</span><br><span class="line">    <span class="string">&#x27;vgg11&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg11-bbd30ac9.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg13&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg13-c768596a.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg16&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg16-397923af.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg19&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg19-dcbb9e9d.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg11_bn&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg11_bn-6002323d.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg13_bn&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg13_bn-abd245e5.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg16_bn&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg16_bn-6c64b313.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg19_bn&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg19_bn-c79401a0.pth&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGG</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, features, num_classes=<span class="number">1000</span>, init_weights=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(VGG, self).__init__()</span><br><span class="line">        self.features = features</span><br><span class="line">        self.avgpool = nn.AdaptiveAvgPool2d((<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">512</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># self.xxx = nn.XXXX</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_initialize_weights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">                nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                nn.init.normal_(m.weight, <span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_layers</span>(<span class="params">cfg, batch_norm=<span class="literal">False</span></span>):</span><br><span class="line">    layers = []</span><br><span class="line">    in_channels = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> cfg:</span><br><span class="line">        <span class="keyword">if</span> v == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            layers += [nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conv2d = nn.Conv2d(in_channels, v, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> batch_norm:</span><br><span class="line">                layers += [conv2d, nn.BatchNorm2d(v), nn.ReLU(inplace=<span class="literal">True</span>)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                layers += [conv2d, nn.ReLU(inplace=<span class="literal">True</span>)]</span><br><span class="line">            in_channels = v</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfg = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg11</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 11-layer model (configuration &quot;A&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;A&#x27;</span>]), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg11&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg11_bn</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 11-layer model (configuration &quot;A&quot;) with batch normalization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;A&#x27;</span>], batch_norm=<span class="literal">True</span>), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg11_bn&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg13</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 13-layer model (configuration &quot;B&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;B&#x27;</span>]), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg13&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg13_bn</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 13-layer model (configuration &quot;B&quot;) with batch normalization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;B&#x27;</span>], batch_norm=<span class="literal">True</span>), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg13_bn&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg16</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 16-layer model (configuration &quot;D&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;D&#x27;</span>]), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg16&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg16_bn</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 16-layer model (configuration &quot;D&quot;) with batch normalization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;D&#x27;</span>], batch_norm=<span class="literal">True</span>), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg16_bn&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg19</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 19-layer model (configuration &quot;E&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;E&#x27;</span>]), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg19&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg19_bn</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;VGG 19-layer model (configuration &#x27;E&#x27;) with batch normalization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        kwargs[<span class="string">&#x27;init_weights&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    model = VGG(make_layers(cfg[<span class="string">&#x27;E&#x27;</span>], batch_norm=<span class="literal">True</span>), **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;vgg19_bn&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    model = vgg16_bn()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换网络层</span></span><br><span class="line">    <span class="keyword">for</span> name, module <span class="keyword">in</span> model.named_modules():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;layer name:&#123;&#125;, layer instance:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, module))</span><br><span class="line">    in_feat_num = model.classifier[<span class="number">6</span>].in_features</span><br><span class="line">    model.classifier[<span class="number">6</span>] = nn.Linear(in_feat_num, <span class="number">102</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward</span></span><br><span class="line">    fake_img = torch.randn((<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))  <span class="comment"># batchsize * channel * height * width</span></span><br><span class="line">    output = model(fake_img)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h3 id="models-x2F-resnet-tv-py"><a href="#models-x2F-resnet-tv-py" class="headerlink" title="models&#x2F;resnet_tv.py"></a>models&#x2F;resnet_tv.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.model_zoo <span class="keyword">as</span> model_zoo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;ResNet&#x27;</span>, <span class="string">&#x27;resnet18&#x27;</span>, <span class="string">&#x27;resnet34&#x27;</span>, <span class="string">&#x27;resnet50&#x27;</span>, <span class="string">&#x27;resnet101&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;resnet152&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_urls = &#123;</span><br><span class="line">    <span class="string">&#x27;resnet18&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/resnet18-5c106cde.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;resnet34&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;resnet50&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/resnet50-19c8e357.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;resnet101&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/resnet101-5d3b4d8f.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;resnet152&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/resnet152-b121ed2d.pth&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv3x3</span>(<span class="params">in_planes, out_planes, stride=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;3x3 convolution with padding&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> nn.Conv2d(in_planes, out_planes, kernel_size=<span class="number">3</span>, stride=stride,</span><br><span class="line">                     padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv1x1</span>(<span class="params">in_planes, out_planes, stride=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;1x1 convolution&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> nn.Conv2d(in_planes, out_planes, kernel_size=<span class="number">1</span>, stride=stride, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicBlock</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inplanes, planes, stride=<span class="number">1</span>, downsample=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicBlock, self).__init__()</span><br><span class="line">        self.conv1 = conv3x3(inplanes, planes, stride)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv2 = conv3x3(planes, planes)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line">        self.stride = stride</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        identity = x</span><br><span class="line"></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            identity = self.downsample(x)</span><br><span class="line"></span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bottleneck</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inplanes, planes, stride=<span class="number">1</span>, downsample=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Bottleneck, self).__init__()</span><br><span class="line">        self.conv1 = conv1x1(inplanes, planes)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv2 = conv3x3(planes, planes, stride)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv3 = conv1x1(planes, planes * self.expansion)</span><br><span class="line">        self.bn3 = nn.BatchNorm2d(planes * self.expansion)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line">        self.stride = stride</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        identity = x</span><br><span class="line"></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv3(out)</span><br><span class="line">        out = self.bn3(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            identity = self.downsample(x)</span><br><span class="line"></span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResNet</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, block, layers, num_classes=<span class="number">1000</span>, zero_init_residual=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.inplanes = <span class="number">64</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>,</span><br><span class="line">                               bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(<span class="number">64</span>)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.maxpool = nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.layer1 = self._make_layer(block, <span class="number">64</span>, layers[<span class="number">0</span>])</span><br><span class="line">        self.layer2 = self._make_layer(block, <span class="number">128</span>, layers[<span class="number">1</span>], stride=<span class="number">2</span>)</span><br><span class="line">        self.layer3 = self._make_layer(block, <span class="number">256</span>, layers[<span class="number">2</span>], stride=<span class="number">2</span>)</span><br><span class="line">        self.layer4 = self._make_layer(block, <span class="number">512</span>, layers[<span class="number">3</span>], stride=<span class="number">2</span>)</span><br><span class="line">        self.avgpool = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        self.fc = nn.Linear(<span class="number">512</span> * block.expansion, num_classes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">                nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Zero-initialize the last BN in each residual branch,</span></span><br><span class="line">        <span class="comment"># so that the residual branch starts with zeros, and each residual block behaves like an identity.</span></span><br><span class="line">        <span class="comment"># This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677</span></span><br><span class="line">        <span class="keyword">if</span> zero_init_residual:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, Bottleneck):</span><br><span class="line">                    nn.init.constant_(m.bn3.weight, <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, BasicBlock):</span><br><span class="line">                    nn.init.constant_(m.bn2.weight, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_layer</span>(<span class="params">self, block, planes, blocks, stride=<span class="number">1</span></span>):</span><br><span class="line">        downsample = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> stride != <span class="number">1</span> <span class="keyword">or</span> self.inplanes != planes * block.expansion:</span><br><span class="line">            downsample = nn.Sequential(</span><br><span class="line">                conv1x1(self.inplanes, planes * block.expansion, stride),</span><br><span class="line">                nn.BatchNorm2d(planes * block.expansion),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        layers = []</span><br><span class="line">        layers.append(block(self.inplanes, planes, stride, downsample))</span><br><span class="line">        self.inplanes = planes * block.expansion</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, blocks):</span><br><span class="line">            layers.append(block(self.inplanes, planes))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line"></span><br><span class="line">        x = self.layer1(x)</span><br><span class="line">        x = self.layer2(x)</span><br><span class="line">        x = self.layer3(x)</span><br><span class="line">        x = self.layer4(x)</span><br><span class="line"></span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet18</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-18 model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(BasicBlock, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;resnet18&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet34</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-34 model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(BasicBlock, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;resnet34&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet50</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-50 model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;resnet50&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet101</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-101 model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">3</span>], **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;resnet101&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet152</span>(<span class="params">pretrained=<span class="literal">False</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-152 model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">8</span>, <span class="number">36</span>, <span class="number">3</span>], **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(model_zoo.load_url(model_urls[<span class="string">&#x27;resnet152&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> torch</span><br><span class="line">    model = resnet18(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换网络层</span></span><br><span class="line">    <span class="keyword">for</span> name, module <span class="keyword">in</span> model.named_modules():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;layer name:&#123;&#125;, layer instance:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, module))</span><br><span class="line">    in_feat_num = model.fc.in_features</span><br><span class="line">    model.fc = nn.Linear(in_feat_num, <span class="number">102</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward</span></span><br><span class="line">    fake_img = torch.randn((<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))  <span class="comment"># batchsize * channel * height * width</span></span><br><span class="line">    output = model(fake_img)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h3 id="models-x2F-se-resnet-py"><a href="#models-x2F-se-resnet-py" class="headerlink" title="models&#x2F;se_resnet.py"></a>models&#x2F;se_resnet.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.hub <span class="keyword">import</span> load_state_dict_from_url</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SELayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channel, reduction=<span class="number">16</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SELayer, self).__init__()</span><br><span class="line">        self.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)     <span class="comment"># squeeze</span></span><br><span class="line">        self.fc = nn.Sequential(                    <span class="comment"># excitation</span></span><br><span class="line">            nn.Linear(channel, channel // reduction, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(channel // reduction, channel, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        b, c, _, _ = x.size()</span><br><span class="line">        y = self.avg_pool(x).view(b, c)</span><br><span class="line">        y = self.fc(y).view(b, c, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x * y.expand_as(x)  <span class="comment"># expand_as把一个tensor变成和函数括号内一样形状的tensor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv3x3</span>(<span class="params">in_planes, out_planes, stride=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> nn.Conv2d(in_planes, out_planes, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SEBasicBlock</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inplanes, planes, stride=<span class="number">1</span>, downsample=<span class="literal">None</span>, groups=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">                 base_width=<span class="number">64</span>, dilation=<span class="number">1</span>, norm_layer=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 *, reduction=<span class="number">16</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SEBasicBlock, self).__init__()</span><br><span class="line">        self.conv1 = conv3x3(inplanes, planes, stride)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.conv2 = conv3x3(planes, planes, <span class="number">1</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.se = SELayer(planes, reduction)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line">        self.stride = stride</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        residual = x</span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.se(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            residual = self.downsample(x)</span><br><span class="line"></span><br><span class="line">        out += residual</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SEBottleneck</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inplanes, planes, stride=<span class="number">1</span>, downsample=<span class="literal">None</span>, groups=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">                 base_width=<span class="number">64</span>, dilation=<span class="number">1</span>, norm_layer=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 *, reduction=<span class="number">16</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SEBottleneck, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv2 = nn.Conv2d(planes, planes, kernel_size=<span class="number">3</span>, stride=stride,</span><br><span class="line">                               padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv3 = nn.Conv2d(planes, planes * <span class="number">4</span>, kernel_size=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn3 = nn.BatchNorm2d(planes * <span class="number">4</span>)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.se = SELayer(planes * <span class="number">4</span>, reduction)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line">        self.stride = stride</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        residual = x</span><br><span class="line"></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv3(out)</span><br><span class="line">        out = self.bn3(out)</span><br><span class="line">        out = self.se(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            residual = self.downsample(x)</span><br><span class="line"></span><br><span class="line">        out += residual</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">se_resnet18</span>(<span class="params">num_classes=<span class="number">1_000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-18 model.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(SEBasicBlock, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], num_classes=num_classes)</span><br><span class="line">    model.avgpool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">se_resnet34</span>(<span class="params">num_classes=<span class="number">1_000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-34 model.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(SEBasicBlock, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], num_classes=num_classes)</span><br><span class="line">    model.avgpool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">se_resnet50</span>(<span class="params">num_classes=<span class="number">1_000</span>, pretrained=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-50 model.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(SEBottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], num_classes=num_classes)</span><br><span class="line">    model.avgpool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        model.load_state_dict(load_state_dict_from_url(</span><br><span class="line">            <span class="string">&quot;https://github.com/moskomule/senet.pytorch/releases/download/archive/seresnet50-60a8950a85b2b.pkl&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">se_resnet101</span>(<span class="params">num_classes=<span class="number">1_000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-101 model.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(SEBottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">3</span>], num_classes=num_classes)</span><br><span class="line">    model.avgpool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">se_resnet152</span>(<span class="params">num_classes=<span class="number">1_000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a ResNet-152 model.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on ImageNet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = ResNet(SEBottleneck, [<span class="number">3</span>, <span class="number">8</span>, <span class="number">36</span>, <span class="number">3</span>], num_classes=num_classes)</span><br><span class="line">    model.avgpool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> torch</span><br><span class="line">    model = se_resnet50()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换网络层</span></span><br><span class="line">    <span class="keyword">for</span> name, module <span class="keyword">in</span> model.named_modules():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;layer name:&#123;&#125;, layer instance:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, module))</span><br><span class="line">    in_feat_num = model.fc.in_features</span><br><span class="line">    model.fc = nn.Linear(in_feat_num, <span class="number">102</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward</span></span><br><span class="line">    fake_img = torch.randn((<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))  <span class="comment"># batchsize * channel * height * width</span></span><br><span class="line">    output = model(fake_img)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="图片处理展示「ResNet」"><a href="#图片处理展示「ResNet」" class="headerlink" title="图片处理展示「ResNet」"></a>图片处理展示「ResNet」</h2><table><thead><tr><th>步骤</th><th>经过何种操作</th><th>数据类型</th><th>数据形状「batch_size&#x3D;16」</th></tr></thead><tbody><tr><td>1</td><td>Image.open</td><td>PIL.image</td><td>(666,500,3)</td></tr><tr><td>2</td><td>Transforms.Compose</td><td>tensor</td><td>(3,224,224)</td></tr><tr><td>3</td><td>Model(inputs):输入模型</td><td>tensor</td><td>(16,3,224,224)</td></tr><tr><td>4</td><td>Resnet: conv1</td><td>tensor</td><td>(16,64,112,112)</td></tr><tr><td>5</td><td>Resnet: bn1</td><td>tensor</td><td>(16,64,112,112)</td></tr><tr><td>6</td><td>Resnet:relu</td><td>tensor</td><td>(16,64,112,112)</td></tr><tr><td>7</td><td>Resnet:maxpool</td><td>tensor</td><td>(16,64,56,56)</td></tr><tr><td>5</td><td>Resnet: layer1</td><td>tensor</td><td>(16,64,56,56)</td></tr><tr><td>6</td><td>Resnet: layer2</td><td>tensor</td><td>(16,128,28,28)</td></tr><tr><td>7</td><td>Resnet: layer3</td><td>tensor</td><td>(16,256,14,14)</td></tr><tr><td>8</td><td>Resnet: layer4</td><td>tensor</td><td>(16,512,7,7)</td></tr><tr><td>9</td><td>Resnet: avgpool</td><td>tensor</td><td>(16,512,1,1)</td></tr><tr><td>10</td><td>Resnet: flatten</td><td>tensor</td><td>(16,512)</td></tr><tr><td>11</td><td>Resnet: fc</td><td>tensor</td><td>(16,102)</td></tr><tr><td>12</td><td>x</td><td>tensor</td><td>(16,102)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 花朵分类项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「花朵分类项目」（二）功能函数</title>
      <link href="/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="模型训练指标"><a href="#模型训练指标" class="headerlink" title="模型训练指标"></a>模型训练指标</h2><table><thead><tr><th>指标</th><th>内容</th></tr></thead><tbody><tr><td>正确率(Accuracy)</td><td>衡量模型在整个数据集上分类正确的比例</td></tr><tr><td>召回率(Recall)</td><td>该类样本中，召回（找回）出了多少</td></tr><tr><td>精确度(Precision)</td><td>判别为该类的样本中，正确的有多少</td></tr><tr><td>混淆矩阵(Confusion Matrix)</td><td>混淆矩阵的<strong>行</strong>表示真实类别，<strong>列</strong>表示预测类别</td></tr></tbody></table><table><thead><tr><th>「混淆矩阵」</th><th>猫「预测类别」</th><th>狗「预测类别」</th></tr></thead><tbody><tr><td><strong>猫「真实类别」</strong></td><td>7</td><td>3</td></tr><tr><td><strong>狗「真实类别」</strong></td><td>10</td><td>20</td></tr></tbody></table><table><thead><tr><th>召回率</th><th>精确度</th></tr></thead><tbody><tr><td>猫「7&#x2F;(7+3)&#x3D;70%」狗「20&#x2F;(10+20)&#x3D;66.7%」</td><td>猫「7&#x2F;(7+10)&#x3D;41.17%」狗「20&#x2F;(3+20)&#x3D;86.96%」</td></tr></tbody></table><span id="more"></span><h2 id="模型选择方法"><a href="#模型选择方法" class="headerlink" title="模型选择方法"></a>模型选择方法</h2><p>模型选择泛化性能好的「<strong>方差低、偏差也小</strong>」</p><p>误差分解为：<strong>偏差</strong>，<strong>方差</strong>和<strong>噪声</strong>之和</p><p><strong>偏差</strong>度量算法的<strong>期望预测</strong>与<strong>真实结果</strong>的<strong>偏离程度</strong>，即刻画了算法本身的<strong>拟合能力</strong></p><p><strong>方差</strong>度量同样大小的<strong>训练集的变动</strong>所导致的<strong>学习性能的变化</strong>，即刻画了<strong>数据扰动所造成的影响</strong></p><p><strong>噪声</strong>则表达了在当前任务上任何学习算法所能达到的<strong>期望泛化误差的下界</strong></p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="tools-x2F-common-tool-py"><a href="#tools-x2F-common-tool-py" class="headerlink" title="tools&#x2F;common_tool.py"></a>tools&#x2F;common_tool.py</h3><p>随机种子：setup_seed()</p><p>logging：采用logging模块进行日志信息记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :common_tools.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-2</span></span><br><span class="line"><span class="string"># @brief        :常用文件 包含随机种子固定/检查数据目录/Logger类/绘制混淆矩阵/绘制loss和acc曲线</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> models.vgg_tv <span class="keyword">import</span> vgg16_bn</span><br><span class="line"><span class="keyword">from</span> models.se_resnet <span class="keyword">import</span> se_resnet50</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_seed</span>(<span class="params">seed = <span class="number">12345</span></span>):</span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    torch.manual_seed(seed) <span class="comment"># cpu</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(seed) <span class="comment"># cuda也有一个random</span></span><br><span class="line">        torch.backends.cudnn.determinstic = <span class="literal">True</span></span><br><span class="line">        torch.backends.cudnn.benchmark = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_data_dir</span>(<span class="params">path_tmp</span>):</span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(path_tmp), \</span><br><span class="line">        <span class="string">&quot;\n\n路径不存在，当前变量中指定的路径是：\n&#123;&#125;\n请检查相对路径的设置，或者文件是否存在&quot;</span>.<span class="built_in">format</span>(os.path.abspath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path_log</span>):</span><br><span class="line">        log_name = os.path.basename(path_log)</span><br><span class="line">        self.log_name = log_name <span class="keyword">if</span> log_name <span class="keyword">else</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.out_path = path_log</span><br><span class="line"></span><br><span class="line">        log_dir = os.path.dirname(self.out_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">            os.makedirs(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_logger</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        logger = logging.getLogger(self.log_name)</span><br><span class="line">        logger.setLevel(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置文件Header 输出到硬盘当中</span></span><br><span class="line">        file_handler = logging.FileHandler(self.out_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        file_handler.setLevel(logging.INFO)</span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置文件Header 输出到屏幕流上</span></span><br><span class="line">        console_handler = logging.StreamHandler()</span><br><span class="line">        console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加handler</span></span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line">        logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> logger</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_logger</span>(<span class="params">out_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在out_dir文件夹下以当前时间命名，创建日志文件夹，并创建logger用于记录信息</span></span><br><span class="line"><span class="string">    :param out_dir:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建log文件夹</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    time_str = datetime.strftime(now_time, <span class="string">&#x27;%m-%d_%H-%M&#x27;</span>)</span><br><span class="line">    log_dir = os.path.join(out_dir, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>, time_str) <span class="comment"># 为了相对路径一定找的准确</span></span><br><span class="line">        <span class="comment"># 根据config中的创建时间作为文件夹名字</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.makedirs((log_dir))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建logger</span></span><br><span class="line">    path_log = os.path.join(log_dir, <span class="string">&quot;log.log&quot;</span>)</span><br><span class="line">    logger = Logger(path_log)</span><br><span class="line">    logger = logger.init_logger()</span><br><span class="line">    <span class="keyword">return</span> logger,log_dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">cfg, cls_num, logger</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建模型</span></span><br><span class="line"><span class="string">    :param cfg:</span></span><br><span class="line"><span class="string">    :param cls_num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> cfg.model_name == <span class="string">&quot;resnet18&quot;</span>:</span><br><span class="line">        model = resnet18()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(cfg.path_resnet18):</span><br><span class="line">            pretrained_state_dict = torch.load(cfg.path_resnet18, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">            model.load_state_dict(pretrained_state_dict)    <span class="comment"># load pretrain model</span></span><br><span class="line">            logger.info(<span class="string">&quot;load pretrained model!&quot;</span>)</span><br><span class="line">        <span class="comment"># 修改最后一层</span></span><br><span class="line">        num_ftrs = model.fc.in_features</span><br><span class="line">        model.fc = nn.Linear(num_ftrs, cls_num)  <span class="comment"># 102</span></span><br><span class="line">    <span class="keyword">elif</span> cfg.model_name == <span class="string">&quot;vgg16_bn&quot;</span>:</span><br><span class="line">        model = vgg16_bn()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(cfg.path_vgg16bn):</span><br><span class="line">            pretrained_state_dict = torch.load(cfg.path_vgg16bn, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">            model.load_state_dict(pretrained_state_dict)    <span class="comment"># load pretrain model</span></span><br><span class="line">            logger.info(<span class="string">&quot;load pretrained model!&quot;</span>)</span><br><span class="line">        <span class="comment"># 替换网络层</span></span><br><span class="line">        in_feat_num = model.classifier[<span class="number">6</span>].in_features</span><br><span class="line">        model.classifier[<span class="number">6</span>] = nn.Linear(in_feat_num, cls_num)</span><br><span class="line">    <span class="keyword">elif</span> cfg.model_name == <span class="string">&quot;se_resnet50&quot;</span>:</span><br><span class="line">        model = se_resnet50()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(cfg.path_se_res50):</span><br><span class="line">            model.load_state_dict(torch.load(cfg.path_se_res50))    <span class="comment"># load pretrain model</span></span><br><span class="line">            logger.info(<span class="string">&quot;load pretrained model!&quot;</span>)</span><br><span class="line">        in_feat_num = model.fc.in_features</span><br><span class="line">        model.fc = nn.Linear(in_feat_num, cls_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Invalid model name. got &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cfg.model_name))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_confMat</span>(<span class="params">confusion_mat, classes, set_name, out_dir, epoch=<span class="number">999</span>, verbose=<span class="literal">False</span>, figsize=<span class="literal">None</span>, perc=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    混淆矩阵绘制并保存图片</span></span><br><span class="line"><span class="string">    :param confusion_mat: np.array</span></span><br><span class="line"><span class="string">    :param classes: list or tuple, 类别名称</span></span><br><span class="line"><span class="string">    :param set_name: str 数据集名称 train or valid or test</span></span><br><span class="line"><span class="string">    :param out_dir: str 图片要保存的文件夹</span></span><br><span class="line"><span class="string">    :param epoch: int 第几个epoch</span></span><br><span class="line"><span class="string">    :param verbose: bool 是否打印精度信息</span></span><br><span class="line"><span class="string">    :param figsize:</span></span><br><span class="line"><span class="string">    :param perc:是否采用百分比，图像分割时使用 因分类数目过大</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cls_num = <span class="built_in">len</span>(classes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    confusion_mat_tmp = confusion_mat.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classes)):</span><br><span class="line">        confusion_mat_tmp[i, :] = confusion_mat[i, :] / confusion_mat[i, :].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置图像大小</span></span><br><span class="line">    <span class="keyword">if</span> cls_num &lt; <span class="number">10</span>:</span><br><span class="line">        figsize = <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> cls_num &gt;= <span class="number">100</span>:</span><br><span class="line">        figsize = <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        figsize = np.linspace(<span class="number">6</span>, <span class="number">30</span>, <span class="number">91</span>)[cls_num-<span class="number">10</span>]</span><br><span class="line">    plt.figure(figsize=(<span class="built_in">int</span>(figsize), <span class="built_in">int</span>(figsize*<span class="number">1.3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取颜色</span></span><br><span class="line">    cmap = plt.cm.get_cmap(<span class="string">&#x27;Greys&#x27;</span>) <span class="comment"># 更多颜色: http://matplotlib.org/examples/color/colormaps_reference.html</span></span><br><span class="line">    plt.imshow(confusion_mat_tmp, cmap=cmap)</span><br><span class="line">    plt.colorbar(fraction=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置文字</span></span><br><span class="line">    xlocations = np.array(<span class="built_in">range</span>(<span class="built_in">len</span>(classes)))</span><br><span class="line">    plt.xticks(xlocations, <span class="built_in">list</span>(classes), rotation=<span class="number">60</span>)</span><br><span class="line">    plt.yticks(xlocations, <span class="built_in">list</span>(classes))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Predict label&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;True label&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Confusion_Matrix_&#123;&#125;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(set_name, epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印数字</span></span><br><span class="line">    <span class="keyword">if</span> perc:</span><br><span class="line">        cls_per_nums = confusion_mat.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">        conf_mat_per = confusion_mat / cls_per_nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                plt.text(x=j, y=i, s=<span class="string">&quot;&#123;:.0%&#125;&quot;</span>.<span class="built_in">format</span>(conf_mat_per[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                         fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                    plt.text(x=j, y=i, s=<span class="built_in">int</span>(confusion_mat[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    plt.savefig(os.path.join(out_dir, <span class="string">&quot;Confusion_Matrix_&#123;&#125;.png&quot;</span>).<span class="built_in">format</span>(set_name))</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cls_num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;class:&#123;:&lt;10&#125;, total num:&#123;:&lt;6&#125;, correct num:&#123;:&lt;5&#125;  Recall: &#123;:.2%&#125; Precision: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                classes[i], np.<span class="built_in">sum</span>(confusion_mat[i, :]), confusion_mat[i, i],</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">1e-9</span> + np.<span class="built_in">sum</span>(confusion_mat[i, :])),</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">1e-9</span> + np.<span class="built_in">sum</span>(confusion_mat[:, i]))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_line</span>(<span class="params">train_x, train_y, valid_x, valid_y, mode, out_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制训练和验证集的loss曲线和acc曲线</span></span><br><span class="line"><span class="string">    :param train_x: epoch</span></span><br><span class="line"><span class="string">    :param train_y: 标量值</span></span><br><span class="line"><span class="string">    :param valid_x:</span></span><br><span class="line"><span class="string">    :param valid_y:</span></span><br><span class="line"><span class="string">    :param mode: &#x27;loss&#x27; or &#x27;acc&#x27;</span></span><br><span class="line"><span class="string">    :param out_dir:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    plt.plot(train_x, train_y, label=<span class="string">&#x27;Train&#x27;</span>)</span><br><span class="line">    plt.plot(valid_x, valid_y, label=<span class="string">&#x27;Valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.ylabel(<span class="built_in">str</span>(mode))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    location = <span class="string">&#x27;upper right&#x27;</span> <span class="keyword">if</span> mode == <span class="string">&#x27;loss&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;upper left&#x27;</span></span><br><span class="line">    plt.legend(loc=location)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;_&#x27;</span>.join([mode]))</span><br><span class="line">    plt.savefig(os.path.join(out_dir, mode + <span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># setup_seed(2)</span></span><br><span class="line">    <span class="comment"># print(np.random.randint(0, 10, 1))</span></span><br><span class="line">    logger = Logger(<span class="string">&#x27;./logtest.log&#x27;</span>)</span><br><span class="line">    logger = logger.init_logger()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        logger.info(<span class="string">&#x27;test:&#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> config.flower_config <span class="keyword">import</span> cfg</span><br><span class="line">    logger.info(cfg)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="config-x2F-flower-config-py"><a href="#config-x2F-flower-config-py" class="headerlink" title="config&#x2F;flower_config.py"></a>config&#x2F;flower_config.py</h3><p>提取要配置的参数，统一放置：config&#x2F;flower_config.py中的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :flower_config.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-5</span></span><br><span class="line"><span class="string"># @brief        :花朵分类网络参数配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> datasets.flower102 <span class="keyword">import</span> FlowerDataset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> easydict <span class="keyword">import</span> EasyDict</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfg = EasyDict() <span class="comment"># 访问属性的方式去使用key-value 即通过key 或者 value</span></span><br><span class="line"></span><br><span class="line">cfg.model_name = <span class="string">&quot;resnet18&quot;</span></span><br><span class="line"><span class="comment"># cfg.model_name = &quot;vgg16_bn&quot;</span></span><br><span class="line"><span class="comment"># cfg.model_name = &quot;se_resnet50&quot;</span></span><br><span class="line"></span><br><span class="line">cfg.mixup = <span class="literal">True</span>  <span class="comment"># 是否采用mixup</span></span><br><span class="line">cfg.mixup_alpha = <span class="number">1.</span>  <span class="comment"># beta分布的参数. beta分布是一组定义在(0,1) 区间的连续概率分布。</span></span><br><span class="line">cfg.label_smooth = <span class="literal">True</span>  <span class="comment"># 是否采用标签平滑</span></span><br><span class="line">cfg.label_smooth_eps = <span class="number">0.01</span>  <span class="comment"># 标签平滑超参数 eps</span></span><br><span class="line"></span><br><span class="line">data_dir = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset&quot;</span></span><br><span class="line">cfg.path_resnet18 = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;resnet18-f37072fd.pth&quot;</span>)</span><br><span class="line">cfg.path_vgg16bn = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;vgg16_bn-6c64b313.pth&quot;</span>)</span><br><span class="line">cfg.path_se_res50 = os.path.join(data_dir, <span class="string">&quot;pretrained_model&quot;</span>, <span class="string">&quot;seresnet50-60a8950a85b2b.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">cfg.train_bs = <span class="number">16</span> <span class="comment"># batchsize</span></span><br><span class="line">cfg.valid_bs = <span class="number">16</span></span><br><span class="line">cfg.workers = <span class="number">0</span> <span class="comment">#线程个数</span></span><br><span class="line"></span><br><span class="line">cfg.lr_init = <span class="number">0.01</span></span><br><span class="line">cfg.momentum = <span class="number">0.9</span></span><br><span class="line">cfg.weight_decay = <span class="number">1e-4</span> <span class="comment"># 权重衰减</span></span><br><span class="line"></span><br><span class="line">cfg.factor = <span class="number">0.1</span> <span class="comment"># 权重更新的比例</span></span><br><span class="line">cfg.milestones = [<span class="number">30</span>, <span class="number">45</span>] <span class="comment"># 什么时候下降学习率</span></span><br><span class="line">cfg.max_epoch = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">cfg.log_interval = <span class="number">10</span> <span class="comment"># 日志打印间隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 数据集</span></span><br><span class="line">norm_mean = [<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>]</span><br><span class="line">norm_std = [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>] <span class="comment"># imageNet统计得到的</span></span><br><span class="line">normTransform = transforms.Normalize(norm_mean, norm_std)</span><br><span class="line"></span><br><span class="line">cfg.transforms_train = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">256</span>)),</span><br><span class="line">    transforms.CenterCrop(<span class="number">256</span>),</span><br><span class="line">    transforms.RandomCrop(<span class="number">224</span>),</span><br><span class="line">    transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normTransform,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">cfg.transforms_valid = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normTransform,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="bin-x2F-evaluate-flower-py"><a href="#bin-x2F-evaluate-flower-py" class="headerlink" title="bin&#x2F;evaluate_flower.py"></a>bin&#x2F;evaluate_flower.py</h3><p>模型评估，在test数据集上跑模型得到最后的指标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :evaluate_flower.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-5</span></span><br><span class="line"><span class="string"># @brief        :模型在test上进行指标计算 输出结果为test acc 「0%～100%」</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> datasets.flower102 <span class="keyword">import</span> FlowerDataset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 0. config</span></span><br><span class="line">    data_dir = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/flower102/test&quot;</span></span><br><span class="line">    path_state_dir = <span class="string">&quot;/Users/kenton/PycharmProjects/results/04-05_23-40/checkpoint_best.pkl&quot;</span></span><br><span class="line"></span><br><span class="line">    norm_mean = [<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>]  <span class="comment"># imagenet 120万图像统计得来</span></span><br><span class="line">    norm_std = [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]</span><br><span class="line">    normTransform = transforms.Normalize(norm_mean, norm_std)</span><br><span class="line">    transforms_valid = transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        normTransform,</span><br><span class="line">    ])</span><br><span class="line">    valid_bs = <span class="number">64</span></span><br><span class="line">    workers = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step1: dataset</span></span><br><span class="line">    test_data = FlowerDataset(root_dir=data_dir, transform=transforms_valid)</span><br><span class="line">    test_loader = DataLoader(dataset=test_data, batch_size=valid_bs, num_workers=workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: model</span></span><br><span class="line">    model = resnet18()</span><br><span class="line">    num_ftrs = model.fc.in_features</span><br><span class="line">    model.fc = nn.Linear(num_ftrs, test_data.cls_num)  <span class="comment"># 102</span></span><br><span class="line">    <span class="comment"># load pretrain model</span></span><br><span class="line">    ckpt = torch.load(path_state_dir)</span><br><span class="line">    model.load_state_dict(ckpt[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">    model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 3:inference</span></span><br><span class="line">    class_num = test_loader.dataset.cls_num</span><br><span class="line">    conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">        inputs, labels, path_imgs = data</span><br><span class="line">        <span class="comment"># inputs, labels = data</span></span><br><span class="line">        inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">        outputs = model(inputs)</span><br><span class="line"></span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">            cate_i = labels[j].cpu().numpy()</span><br><span class="line">            pre_i = predicted[j].cpu().numpy()</span><br><span class="line">            conf_mat[cate_i, pre_i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    acc_avg = conf_mat.trace() / conf_mat.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test acc: &#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(acc_avg))</span><br></pre></td></tr></table></figure><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><table><thead><tr><th>状态</th><th>指标</th></tr></thead><tbody><tr><td>模型使用网络</td><td>Res-18</td></tr><tr><td>总Epoch</td><td>50</td></tr><tr><td>训练集acc</td><td>100%</td></tr><tr><td>验证集best acc</td><td>0.9731379731379731 in 30</td></tr><tr><td>测试集acc</td><td>97.19%</td></tr><tr><td>Train loss</td><td>0.0018</td></tr><tr><td>Valid loss</td><td>0.1196</td></tr></tbody></table><table><thead><tr><th>Acc曲线图</th><th>Loss曲线图</th></tr></thead><tbody><tr><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h2xxs6hbj21400u0abg.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h2xyeqq7j21400u0abg.jpg"></td></tr></tbody></table><h2 id="Badcase分析"><a href="#Badcase分析" class="headerlink" title="Badcase分析"></a>Badcase分析</h2><p>限于篇幅移到了金山文档上「<a href="https://kdocs.cn/l/cpYKYpFmjKy1">点击链接</a>」🔗</p>]]></content>
      
      
      
        <tags>
            
            <tag> 花朵分类项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「花朵分类项目」（一）代码框架与Flower102数据集介绍</title>
      <link href="/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6%E4%B8%8EFlower102%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/19/%E3%80%8C%E8%8A%B1%E6%9C%B5%E5%88%86%E7%B1%BB%E9%A1%B9%E7%9B%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6%E4%B8%8EFlower102%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h2><h3 id="模型训练代码框架"><a href="#模型训练代码框架" class="headerlink" title="模型训练代码框架"></a>模型训练代码框架</h3><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ev6kbvcqj20jw0lb3zz.jpg" style="zoom: 50%;" /><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evasitcfj20vg0u0go9.jpg" style="zoom: 33%;" /><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evkpc7e0j219f0mf771.jpg" style="zoom: 33%;" /><h2 id="Flower102数据集介绍"><a href="#Flower102数据集介绍" class="headerlink" title="Flower102数据集介绍"></a>Flower102数据集介绍</h2><p>共有102类花朵，每个类别数量40到258不等 「<a href="https://www.robots.ox.ac.uk/~vgg/data/flowers/102/"><strong>下载地址</strong></a>」</p><p>下载「<strong>Dataset图片</strong>」和「<strong>图像标签文件</strong>」</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evvnzeogj20v00i0acs.jpg"></p><p>类别统计展示界面「<a href="https://www.robots.ox.ac.uk/~vgg/data/flowers/102/categories.html"><strong>链接</strong></a>」</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evsrbro2j20u00x378z.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evssoatgj20u00wotd8.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2evstaypyj20u00w042o.jpg"></p><h2 id="相关代码书写"><a href="#相关代码书写" class="headerlink" title="相关代码书写"></a>相关代码书写</h2><h3 id="bins-x2F-split-flower-dataset-py-划分数据集"><a href="#bins-x2F-split-flower-dataset-py-划分数据集" class="headerlink" title="bins&#x2F;split_flower_dataset.py 划分数据集"></a>bins&#x2F;split_flower_dataset.py 划分数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :split_flower_dataset.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-3-30</span></span><br><span class="line"><span class="string"># @brief        :划分flower数据集</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_mkdir</span>(<span class="params">my_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(my_dir):</span><br><span class="line">        os.makedirs(my_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_img</span>(<span class="params">imgs, root_dir, setname</span>):</span><br><span class="line">    data_dir = os.path.join(root_dir, setname)</span><br><span class="line">    my_mkdir(data_dir)</span><br><span class="line">    <span class="keyword">for</span> idx, path_imgs <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; / &#123;&#125;&quot;</span>.<span class="built_in">format</span>(idx, <span class="built_in">len</span>(imgs)))</span><br><span class="line">        shutil.copy(path_imgs, data_dir) <span class="comment"># 关键是这一行代码 移动图片到新文件夹</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; dataset, copy &#123;&#125; img to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(setname, <span class="built_in">len</span>(imgs), data_dir))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 0. config</span></span><br><span class="line">    random_seed = <span class="number">20210309</span></span><br><span class="line">    train_ratio = <span class="number">0.8</span></span><br><span class="line">    valid_ratio = <span class="number">0.1</span></span><br><span class="line">    test_ratio = <span class="number">0.1</span></span><br><span class="line">    root_dir = <span class="string">r&#x27;/Users/kenton/Downloads/deeplearning_dataset/flower102&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. read list, shuffle</span></span><br><span class="line">    data_dir = os.path.join(root_dir, <span class="string">&quot;jpg&quot;</span>)</span><br><span class="line">    name_imgs = [p <span class="keyword">for</span> p <span class="keyword">in</span> os.listdir(data_dir) <span class="keyword">if</span> p.endswith(<span class="string">&quot;.jpg&quot;</span>)] <span class="comment"># 列表生成式</span></span><br><span class="line">    path_imgs = [os.path.join(data_dir, name) <span class="keyword">for</span> name <span class="keyword">in</span> name_imgs]</span><br><span class="line">    random.seed(random_seed)</span><br><span class="line">    random.shuffle(path_imgs)</span><br><span class="line">    <span class="built_in">print</span>(path_imgs[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. split</span></span><br><span class="line">    train_breakpoints = <span class="built_in">int</span>(<span class="built_in">len</span>(path_imgs) * train_ratio)</span><br><span class="line">    valid_breakpoints = <span class="built_in">int</span>(<span class="built_in">len</span>(path_imgs) * (train_ratio + valid_ratio))</span><br><span class="line">    test_breakpoints = <span class="built_in">int</span>(<span class="built_in">len</span>(path_imgs) * <span class="number">1</span>) <span class="comment"># 可以省略</span></span><br><span class="line"></span><br><span class="line">    train_img = path_imgs[: train_breakpoints]</span><br><span class="line">    valid_img = path_imgs[train_breakpoints: valid_breakpoints]</span><br><span class="line">    test_img = path_imgs[valid_breakpoints:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. copy and save</span></span><br><span class="line">    move_img(train_img, root_dir, <span class="string">&quot;train&quot;</span>)</span><br><span class="line">    move_img(valid_img, root_dir, <span class="string">&quot;valid&quot;</span>)</span><br><span class="line">    move_img(test_img, root_dir, <span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="datasets-x2F-flower102-py-读取数据集"><a href="#datasets-x2F-flower102-py-读取数据集" class="headerlink" title="datasets&#x2F;flower102.py 读取数据集"></a>datasets&#x2F;flower102.py 读取数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :flower102.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-3-30</span></span><br><span class="line"><span class="string"># @brief        :DataSets类 数据读取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlowerDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    cls_num = <span class="number">102</span> <span class="comment"># 类的一些属性</span></span><br><span class="line">    names = <span class="built_in">tuple</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cls_num)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, transform=<span class="literal">None</span></span>): <span class="comment">#定义核心变量 比如路径 和 Transform预处理</span></span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.img_info = [] <span class="comment"># [(path, label),(),...]</span></span><br><span class="line">        self.label_array = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self._get_img_info()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入标量index，从硬盘中读取数据，并预处理 to tensor</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        path_img, label = self.img_info[index]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(path_img).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        <span class="keyword">return</span> img, label, path_img</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.img_info) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;\ndata_dir:&#123;&#125; is a empty dir!&quot;</span>.<span class="built_in">format</span>(self.root_dir))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_img_info</span>(<span class="params">self</span>): <span class="comment"># 读取数据的路径和标签 存在一个列表当中 给__getitem__使用</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        实现数据集的读取，将硬盘中的数据路径和标签 读取进来 存在一个list中</span></span><br><span class="line"><span class="string">        path, label</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        names_imgs = os.listdir(self.root_dir)</span><br><span class="line">        names_imgs = [n <span class="keyword">for</span> n <span class="keyword">in</span> names_imgs <span class="keyword">if</span> n.endswith(<span class="string">&#x27;.jpg&#x27;</span>)] <span class="comment"># pythonic 列表推导式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取mat形式label</span></span><br><span class="line">        label_file = <span class="string">&quot;imagelabels.mat&quot;</span></span><br><span class="line">        path_label_file = os.path.join(self.root_dir,<span class="string">&quot;..&quot;</span>,label_file)</span><br><span class="line">        <span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line">        label_array = loadmat(path_label_file)[<span class="string">&quot;labels&quot;</span>].squeeze()</span><br><span class="line">        self.label_array = label_array</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配label</span></span><br><span class="line">        idx_imgs = [<span class="built_in">int</span>(n[<span class="number">6</span>:<span class="number">11</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> names_imgs] <span class="comment"># 标号</span></span><br><span class="line">        path_imgs = [os.path.join(self.root_dir, n) <span class="keyword">for</span> n <span class="keyword">in</span> names_imgs] <span class="comment">#  路径 通过名称拼上根目录 列表推导式</span></span><br><span class="line">        self.img_info = [(p, <span class="built_in">int</span>(label_array[idx - <span class="number">1</span>] - <span class="number">1</span>)) <span class="keyword">for</span> p, idx <span class="keyword">in</span> <span class="built_in">zip</span>(path_imgs, idx_imgs)]</span><br><span class="line">        <span class="comment"># 获取整个图片的info 包含 path 和 label</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test part</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root_dir = <span class="string">r&#x27;/Users/kenton/Downloads/deeplearning_dataset/flower102/train&#x27;</span></span><br><span class="line">    test_dataset = FlowerDataset(root_dir)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(test_dataset))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(test_dataset))) <span class="comment">#迭代器</span></span><br></pre></td></tr></table></figure><h3 id="scr-x2F-flower-train-py-训练代码"><a href="#scr-x2F-flower-train-py-训练代码" class="headerlink" title="scr&#x2F;flower_train.py 训练代码"></a>scr&#x2F;flower_train.py 训练代码</h3><p>argparse：接收命令行参数，应用场景：服务器训练时便于调参</p><p>训练信息保存：混淆矩阵可视化，loss曲线绘制便于观察模型训练趋势</p><p>path_errors记录：用于分析模型badcase</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :model_trainer.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-4-5</span></span><br><span class="line"><span class="string"># @brief        :训练代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datasets.flower102 <span class="keyword">import</span> FlowerDataset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__)) <span class="comment"># 得到当前文件所在的目录</span></span><br><span class="line">sys.path.append(os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>))</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"><span class="keyword">from</span> tools.model_trainer <span class="keyword">import</span> ModelTrainer</span><br><span class="line"><span class="keyword">from</span> tools.common_tools <span class="keyword">import</span> setup_seed, show_confMat, plot_line, Logger, check_data_dir, make_logger, get_model</span><br><span class="line"><span class="keyword">from</span> config.flower_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datasets.flower102 <span class="keyword">import</span> FlowerDataset</span><br><span class="line"><span class="keyword">from</span> tools.my_loss <span class="keyword">import</span> LabelSmoothLoss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup_seed(<span class="number">12345</span>) <span class="comment"># 先固定随机种子</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析命令行的参数</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&#x27;learning rate&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--bs&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;training batch size&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--max_epoch&#x27;</span>,default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--data_root_dir&#x27;</span>,default=<span class="string">r&quot;/Users/kenton/Downloads/deeplearning_dataset/flower102&quot;</span>,</span><br><span class="line">                    <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;path to your dataset&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收参数</span></span><br><span class="line">cfg.lr_init = args.lr <span class="keyword">if</span> args.lr <span class="keyword">else</span> cfg.lr_init</span><br><span class="line">cfg.train_bs = args.bs <span class="keyword">if</span> args.bs <span class="keyword">else</span> cfg.train_bs</span><br><span class="line">cfg.max_epoch = args.max_epoch <span class="keyword">if</span> args.bs <span class="keyword">else</span> cfg.max_epoch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step 0: config</span></span><br><span class="line">    <span class="comment"># 数据路径</span></span><br><span class="line">    train_dir = os.path.join(args.data_root_dir, <span class="string">&quot;train&quot;</span>)</span><br><span class="line">    valid_dir = os.path.join(args.data_root_dir, <span class="string">&quot;valid&quot;</span>)</span><br><span class="line">    path_state_dict = <span class="string">&quot;/Users/kenton/Downloads/deeplearning_dataset/pretrain_model/resnet18-f37072fd.pth&quot;</span> <span class="comment"># 预训练模型所在位置</span></span><br><span class="line">    check_data_dir(train_dir) <span class="comment"># 验证路径是否存在</span></span><br><span class="line">    check_data_dir(valid_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建logger</span></span><br><span class="line">    res_dir = os.path.join(BASE_DIR, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;results&quot;</span>)</span><br><span class="line">    logger, log_dir = make_logger(res_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 1: 数据集</span></span><br><span class="line">    <span class="comment"># 构建Dataset实例，构建DataLoader</span></span><br><span class="line">    train_data = FlowerDataset(root_dir=train_dir, transform=cfg.transforms_train)</span><br><span class="line">    valid_data = FlowerDataset(root_dir=valid_dir, transform=cfg.transforms_valid)</span><br><span class="line">    train_loader = DataLoader(dataset=train_data, batch_size=cfg.train_bs, shuffle=<span class="literal">True</span>, num_workers=cfg.workers)</span><br><span class="line">    valid_loader = DataLoader(dataset=valid_data, batch_size=cfg.valid_bs, num_workers=cfg.workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 模型</span></span><br><span class="line">    model = get_model(cfg, train_data.cls_num, logger)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # 加载预训练模型的参数 state_dict</span></span><br><span class="line"><span class="string">    if os.path.exists(path_state_dict):</span></span><br><span class="line"><span class="string">        pretrained_state_dict = torch.load(path_state_dict, map_location=&#x27;cpu&#x27;)</span></span><br><span class="line"><span class="string">        model.load_state_dict(pretrained_state_dict)</span></span><br><span class="line"><span class="string">        logger.info(&quot;Load pretrained model&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        logger.info(&quot;The pretrained model path &#123;&#125; is not exists&quot;.format(path_state_dict))</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 修改最后一层</span></span><br><span class="line"><span class="string">    num_ftrs = model.fc.in_features</span></span><br><span class="line"><span class="string">    model.fc = nn.Linear(num_ftrs, train_data.cls_num)</span></span><br><span class="line"><span class="string">    # to device</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 损失函数 优化器 等</span></span><br><span class="line">    <span class="keyword">if</span> cfg.lable_smooth:</span><br><span class="line">        loss_f = LabelSmoothLoss(cfg.label_smooth_eps)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        loss_f = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=cfg.lr_init, momentum=cfg.momentum, weight_decay=cfg.weight_decay)</span><br><span class="line">    scheduler = optim.lr_scheduler.MultiStepLR(optimizer, gamma=cfg.factor, milestones=cfg.milestones)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 迭代训练</span></span><br><span class="line">    loss_rec = &#123;<span class="string">&#x27;train&#x27;</span>:[], <span class="string">&quot;valid&quot;</span>:[]&#125;</span><br><span class="line">    acc_rec = &#123;<span class="string">&#x27;train&#x27;</span>:[], <span class="string">&quot;valid&quot;</span>:[]&#125;</span><br><span class="line">    best_acc, best_epoch = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(cfg.max_epoch):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dataloader</span></span><br><span class="line">        loss_train, acc_train, mat_train, path_error_train = ModelTrainer.train(</span><br><span class="line">            train_loader, model, loss_f, optimizer, scheduler, epoch, device, cfg, logger)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># valid</span></span><br><span class="line">        loss_valid, acc_valid, mat_valid, path_error_valid = ModelTrainer.valid(</span><br><span class="line">            valid_loader, model, loss_f, device)</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Epoch[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Train Acc:&#123;:.2%&#125; Valid Acc:&#123;:.2%&#125; Train loss:&#123;:.4f&#125; Valid loss:&#123;:.4f&#125;&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>,</span><br><span class="line">                cfg.max_epoch, acc_train, acc_valid, loss_train, loss_valid,</span><br><span class="line">                optimizer.param_groups[<span class="number">0</span>][<span class="string">&quot;lr&quot;</span>]))</span><br><span class="line"></span><br><span class="line">        scheduler.step() <span class="comment"># 学习率进行更新！！！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练信息</span></span><br><span class="line">        loss_rec[<span class="string">&quot;train&quot;</span>].append(loss_train), loss_rec[<span class="string">&quot;valid&quot;</span>].append(loss_valid)</span><br><span class="line">        acc_rec[<span class="string">&quot;train&quot;</span>].append(acc_train), acc_rec[<span class="string">&quot;valid&quot;</span>].append(acc_valid)</span><br><span class="line">        <span class="comment"># 保存混淆矩阵图</span></span><br><span class="line">        show_confMat(mat_train, train_data.names, <span class="string">&quot;train&quot;</span>, log_dir, epoch=epoch, verbose=epoch == cfg.max_epoch - <span class="number">1</span>)</span><br><span class="line">        show_confMat(mat_valid, valid_data.names, <span class="string">&quot;valid&quot;</span>, log_dir, epoch=epoch, verbose=epoch == cfg.max_epoch - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 保存loss曲线 acc曲线</span></span><br><span class="line">        plt_x = np.arange(<span class="number">1</span>, epoch + <span class="number">2</span>)</span><br><span class="line">        plot_line(plt_x, loss_rec[<span class="string">&quot;train&quot;</span>], plt_x, loss_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;loss&quot;</span>, out_dir=log_dir)</span><br><span class="line">        plot_line(plt_x, acc_rec[<span class="string">&quot;train&quot;</span>], plt_x, acc_rec[<span class="string">&quot;valid&quot;</span>], mode=<span class="string">&quot;acc&quot;</span>, out_dir=log_dir)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">or</span> epoch == cfg.max_epoch - <span class="number">1</span>:</span><br><span class="line">            best_epoch = epoch <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">else</span> best_epoch</span><br><span class="line">            best_acc = acc_valid <span class="keyword">if</span> best_acc &lt; acc_valid <span class="keyword">else</span> best_acc</span><br><span class="line">            checkpoint = &#123;<span class="string">&quot;model_state_dict&quot;</span>: model.state_dict(),</span><br><span class="line">                          <span class="string">&quot;optimizer_state_dict&quot;</span>: optimizer.state_dict(),</span><br><span class="line">                          <span class="string">&quot;epoch&quot;</span>: epoch,</span><br><span class="line">                          <span class="string">&quot;best_acc&quot;</span>: best_acc&#125;</span><br><span class="line">            pkl_name = <span class="string">&quot;checkpoint_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;checkpoint_best.pkl&quot;</span></span><br><span class="line">            path_checkpoint = os.path.join(log_dir, pkl_name)</span><br><span class="line">            torch.save(checkpoint, path_checkpoint)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存错误图片的路径</span></span><br><span class="line">            err_ims_name = <span class="string">&quot;error_imgs_&#123;&#125;.pkl&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == cfg.max_epoch - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;error_imgs_best.pkl&quot;</span></span><br><span class="line">            path_err_img = os.path.join(log_dir, err_ims_name)</span><br><span class="line">            error_info = &#123;&#125;</span><br><span class="line">            error_info[<span class="string">&quot;train&quot;</span>] = path_error_train</span><br><span class="line">            error_info[<span class="string">&quot;valid&quot;</span>] = path_error_valid</span><br><span class="line">            pickle.dump(error_info, <span class="built_in">open</span>(path_err_img, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line">    logger.info(<span class="string">&quot;&#123;&#125; done, best acc:&#123;&#125; in: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        datetime.strftime(datetime.now(), <span class="string">&quot;%m-%d_%H-%M&quot;</span>), best_acc, best_epoch))</span><br></pre></td></tr></table></figure><h3 id="tools-x2F-model-trainer-py-模型训练函数"><a href="#tools-x2F-model-trainer-py-模型训练函数" class="headerlink" title="tools&#x2F;model_trainer.py 模型训练函数"></a>tools&#x2F;model_trainer.py 模型训练函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @file name    :model_trainer.py</span></span><br><span class="line"><span class="string"># @author       :zz0320</span></span><br><span class="line"><span class="string"># @data         :2022-3-31</span></span><br><span class="line"><span class="string"># @brief        :工具函数 用来模型训练 然后输出训练中的数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> tools.mixup <span class="keyword">import</span> mixup_data, mixup_criterion</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelTrainer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">data_loader, model, loss_f, optimizer, scheduler, epoch_idx, device, cfg, logger</span>):</span><br><span class="line">        model.train()</span><br><span class="line"></span><br><span class="line">        class_num = data_loader.dataset.cls_num</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line">        loss_sigma = []</span><br><span class="line">        loss_mean = <span class="number">0</span></span><br><span class="line">        acc_avg = <span class="number">0</span></span><br><span class="line">        path_error = []</span><br><span class="line">        label_list = []</span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># _, label = data</span></span><br><span class="line">            inputs, labels, path_imgs = data</span><br><span class="line">            label_list.extend(labels.tolist())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># inputs, labels = data</span></span><br><span class="line">            inputs, labels, path_imgs = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># mixup</span></span><br><span class="line">            <span class="keyword">if</span> cfg.mixup:</span><br><span class="line">                mixup_inputs, label_a, label_b, lam = mixup_data(inputs, labels,</span><br><span class="line">                                        cfg.mixup_alpha,device)</span><br><span class="line">                inputs = mixup_inputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># forward &amp; backward</span></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># loss计算</span></span><br><span class="line">            <span class="keyword">if</span> cfg.mixup:</span><br><span class="line">                loss = mixup_criterion(loss_f, outputs.cpu(), label_a.cpu(), label_b.cpu(), lam)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计loss</span></span><br><span class="line">            loss_sigma.append(loss.item())</span><br><span class="line">            loss_mean = np.mean(loss_sigma)</span><br><span class="line"></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cate_i != pre_i:</span><br><span class="line">                    path_error.append((cate_i, pre_i, path_imgs[j]))</span><br><span class="line">            acc_avg = conf_mat.trace() / conf_mat.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 每 log_interval 个 iter 打印一次训练信息</span></span><br><span class="line">            <span class="keyword">if</span> i % cfg.log_interval == cfg.log_interval - <span class="number">1</span>:</span><br><span class="line">                logger.info(<span class="string">&quot;Training: Epoch[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Iteration[&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;] Loss:&#123;:.4f&#125; Acc:&#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(epoch_idx\</span><br><span class="line">                    + <span class="number">1</span>, cfg.max_epoch, i + <span class="number">1</span>, <span class="built_in">len</span>(data_loader), loss_mean, acc_avg))</span><br><span class="line">        logger.info(<span class="string">&quot;epoch:&#123;&#125; sampler:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch_idx, Counter(label_list)))</span><br><span class="line">        <span class="keyword">return</span> loss_mean, acc_avg, conf_mat, path_error</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">data_loader, model, loss_f, device</span>):</span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">        class_num = data_loader.dataset.cls_num</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line">        loss_sigma = []</span><br><span class="line">        path_error = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels, path_imgs = data</span><br><span class="line">            <span class="comment"># inputs, labels = data</span></span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计混淆矩阵</span></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cate_i != pre_i:</span><br><span class="line">                    path_error.append((cate_i, pre_i, path_imgs[j]))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计loss</span></span><br><span class="line">            loss_sigma.append(loss.item())</span><br><span class="line"></span><br><span class="line">        acc_avg = conf_mat.trace() / conf_mat.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.mean(loss_sigma), acc_avg, conf_mat, path_error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 花朵分类项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「环境配置」使用Conda配置mmdetction环境</title>
      <link href="/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8Dmmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8Dmmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章「<a href="https://mmdetection.readthedocs.io/zh_CN/v2.22.0/get_started.html#id2"><strong>mmdet文档</strong></a>」「<a href="https://pytorch.org/get-started/locally/"><strong>Pytorch官网</strong></a>」</p><h2 id="Conda激活环境"><a href="#Conda激活环境" class="headerlink" title="Conda激活环境"></a>Conda激活环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py39_torch112 python=3.9</span><br><span class="line">conda activate py39_torch112  </span><br></pre></td></tr></table></figure><h2 id="使用pip-下载Pytorch"><a href="#使用pip-下载Pytorch" class="headerlink" title="使用pip 下载Pytorch"></a>使用pip 下载Pytorch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu</span><br><span class="line">pip3 install torch torchvision torchaudio</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装mmcv-full-x3D-x3D-1-4-5"><a href="#安装mmcv-full-x3D-x3D-1-4-5" class="headerlink" title="安装mmcv-full &#x3D;&#x3D; 1.4.5"></a>安装mmcv-full &#x3D;&#x3D; 1.4.5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv-full==1.4.5</span><br></pre></td></tr></table></figure><h2 id="Conda-安装onnx和onnxruntime"><a href="#Conda-安装onnx和onnxruntime" class="headerlink" title="Conda 安装onnx和onnxruntime"></a>Conda 安装onnx和onnxruntime</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install onnx onnxruntime</span><br></pre></td></tr></table></figure><h2 id="安装依赖环境库"><a href="#安装依赖环境库" class="headerlink" title="安装依赖环境库"></a>安装依赖环境库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="之后-python-setup-py-develp"><a href="#之后-python-setup-py-develp" class="headerlink" title="之后 python setup.py develp"></a>之后 python setup.py develp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「环境配置」（一）使用Conda配置mmdetction环境</title>
      <link href="/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89mmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/19/%E3%80%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89mmdetection%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>参考文章「<a href="https://mmdetection.readthedocs.io/zh_CN/v2.22.0/get_started.html#id2"><strong>mmdet文档</strong></a>」「<a href="https://pytorch.org/get-started/locally/"><strong>Pytorch官网</strong></a>」</p><h2 id="Conda激活环境"><a href="#Conda激活环境" class="headerlink" title="Conda激活环境"></a>Conda激活环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py39_torch112 python=3.9</span><br><span class="line">conda activate py39_torch112  </span><br></pre></td></tr></table></figure><h2 id="使用pip-下载Pytorch"><a href="#使用pip-下载Pytorch" class="headerlink" title="使用pip 下载Pytorch"></a>使用pip 下载Pytorch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu</span><br><span class="line"></span><br><span class="line">pip3 install torch torchvision torchaudio</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装mmcv-full-x3D-x3D-1-4-5"><a href="#安装mmcv-full-x3D-x3D-1-4-5" class="headerlink" title="安装mmcv-full &#x3D;&#x3D; 1.4.5"></a>安装mmcv-full &#x3D;&#x3D; 1.4.5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv-full==1.4.5</span><br></pre></td></tr></table></figure><h2 id="Conda-安装onnx和onnxruntime"><a href="#Conda-安装onnx和onnxruntime" class="headerlink" title="Conda 安装onnx和onnxruntime"></a>Conda 安装onnx和onnxruntime</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install onnx onnxruntime</span><br></pre></td></tr></table></figure><h2 id="安装依赖环境库"><a href="#安装依赖环境库" class="headerlink" title="安装依赖环境库"></a>安装依赖环境库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="之后-python-setup-py-develp"><a href="#之后-python-setup-py-develp" class="headerlink" title="之后 python setup.py develp"></a>之后 python setup.py develp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「瞎折腾」支持Apple Silion的新版本Pytorch测试</title>
      <link href="/2022/05/18/%E3%80%8C%E7%9E%8E%E6%8A%98%E8%85%BE%E3%80%8D%E6%94%AF%E6%8C%81Apple%20Silion%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%ACPytorch%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/18/%E3%80%8C%E7%9E%8E%E6%8A%98%E8%85%BE%E3%80%8D%E6%94%AF%E6%8C%81Apple%20Silion%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%ACPytorch%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>今天早晨起来看到了「机器之心」和「量子位」的公众号推文「<a href="https://mp.weixin.qq.com/s/UjnDVacH-6kSadPOnO32lQ">PyTorch宣布支持苹果M1芯片GPU加速：训练快6倍，推理提升21倍</a>」「<a href="https://mp.weixin.qq.com/s/TMreqcWsvu-EOB1qEgg6Kg">炼丹速度×7！你的Mac电脑也能在PyTorch训练中用GPU加速了</a>」</p><p>我的天 过年了过年了  <strong>Pytorch支持Apple Silion啦！！！</strong> </p><p>看了看推文 有Preview版本可以使用了 这还不折腾起来？ 开整！</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>先根据Pytorch的<a href="https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/">官方指引</a>用Conda创建一个原生Python环境「M1系列Python3.9以上才是原生」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n torch112_py39 python=3.9</span><br><span class="line">conda activate torch112_py39</span><br></pre></td></tr></table></figure><span id="more"></span><p>之后进入环境 安装torch</p><blockquote><p>这里需要注意 conda下面找不到torchaudio 需要在pip下面安装</p><p>安装结束后为了防止pip的环境与conda的环境冲突 删掉pip下面的torch</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision -c pytorch-nightly</span><br><span class="line">pip install torchaudio</span><br><span class="line">pip uninstall torch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再安装一个依赖库「可能有用😂」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pkg-config libuv</span><br></pre></td></tr></table></figure><p>OK 环境配置好了 找个项目来试一试</p><h2 id="项目实测"><a href="#项目实测" class="headerlink" title="项目实测"></a>项目实测</h2><p>正好手头有目标检测CenterNet的项目代码 跑跑看看有没有提升</p><p>在Pycharm里面将编译环境改成设置好的<strong>torch112_py39</strong>环境</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dpqbqiihj20ya08uq3l.jpg"></p><p>之后安装项目依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">pip install torchsummary</span><br></pre></td></tr></table></figure><p>最后运行看看结果</p><table><thead><tr><th>Torch1.9.0｜Python3.8</th><th>Torch1.10.2 | Python3.9</th><th>Torch1.9.0</th><th>Python3.9</th></tr></thead><tbody><tr><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqf6zkndj21fz0u078d.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqhrgzalj21fz0u0aeb.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dvnjaakxj21fz0u078s.jpg"></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dqgzjxb4j21fz0u078n.jpg"></td></tr><tr><td>1.43FPS</td><td>2.42FPS</td><td>4.29FPS</td><td>5.85FPS</td></tr></tbody></table><blockquote><p>Torch针对MBP的GPU代码为’mps’ 需要将model和data都移到device &#x3D; torch.device(‘mps’)上</p></blockquote><p>平台为MacBook M1 Pro 16+512 8核CPU 14核GPU</p><p>最后来看效果确实是有提升，考虑到目标检测过程中非torch操作很多且只能在CPU上跑这个项目，这种提升效果还是不错的，后续考虑再测试一下Train阶段的提升效果</p>]]></content>
      
      
      
        <tags>
            
            <tag> 尝鲜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「论文系列」（一）旷视科技CVPR2022【CREStereo】官方GitHub代码推理运行</title>
      <link href="/2022/05/11/%E3%80%8C%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80CVPR2022%E3%80%90CREStereo%E3%80%91%E5%AE%98%E6%96%B9GitHub%E4%BB%A3%E7%A0%81%E6%8E%A8%E7%90%86%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/05/11/%E3%80%8C%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97%E3%80%8D%EF%BC%88%E4%B8%80%EF%BC%89%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80CVPR2022%E3%80%90CREStereo%E3%80%91%E5%AE%98%E6%96%B9GitHub%E4%BB%A3%E7%A0%81%E6%8E%A8%E7%90%86%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="论文简介"><a href="#论文简介" class="headerlink" title="论文简介"></a>论文简介</h2><p>CVPR2022论文     <strong>《基于自适应相关级联递归网络的实用双目匹配》</strong>ttps:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2203.11483</p><p>原文链接：「<a href="https://arxiv.org/abs/2203.11483">Practical Stereo Matching via Cascaded Recurrent Network with Adaptive Correlation</a>」</p><p>作者解读视频：</p><iframe src="//player.bilibili.com/player.html?aid=383885340&bvid=BV1oZ4y1h7mL&cid=717464018&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="运行准备"><a href="#运行准备" class="headerlink" title="运行准备"></a>运行准备</h2><p>在<strong>恒源云</strong>平台 配置一个<strong>CUDA10.1</strong>的环境 这里选择<strong>Tesla T4</strong> 「使用其他型号可能无法只能进行CUDA11及以上的配置」</p><span id="more"></span><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24u0rmh0gj20mt02tt8p.jpg" alt="image-20220511212511378"  /><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24u0x9dtgj20dg07t3yt.jpg" alt="image-20220511212457641"></p><p>设置成功后进入<strong>Jupyter-lab</strong>，安装<strong>OpenCV</strong></p><blockquote><p>参考「<a href="https://blog.csdn.net/keineahnung2345/article/details/84299532%E3%80%8D">https://blog.csdn.net/keineahnung2345/article/details/84299532」</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">apt-get install -y libglib2.0-0</span><br><span class="line">apt-get install -y libsm6 libxext6</span><br><span class="line">apt-get install -y libxrender-dev</span><br></pre></td></tr></table></figure><p>之后根据官方GitHub「<a href="https://github.com/megvii-research/CREStereo%E3%80%8D">https://github.com/megvii-research/CREStereo」</a> 进行操作</p><blockquote><p>建议使用Download ZIP进行下载 之后放入服务器 unzip出来  git clone经常抽风卡在clone不动弹</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><blockquote><p>这里需要提前将requirements.txt 中的 MegEngine&gt;&#x3D;1.8.2 改为 MegEngine&#x3D;&#x3D;1.8.2 防止出现版本不兼容问题</p></blockquote><p>然后下载一个官方提供的预训练模型「<a href="https://drive.google.com/file/d/1Wx_-zDQh7BUFBmN9im_26DFpnf3AkXj4/view">Google网盘链接</a>」放到主目录下用于前向推理</p><p>最后运行如下代码，即可生成<strong>深度图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py --model_path path_to_mge_model --left img/test/left.png --right img/test/right.png --size 1024x1536 --output disparity.png</span><br></pre></td></tr></table></figure><h2 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示"></a>运行结果展示</h2><p>最近正好在做双目视觉相关的工作，有一些双目的素材</p><p>实验了一下看看，效果还是挺不错的，下面放上几张效果图</p><p>如果后面能够利用声纳测距或者其他方法 做一个水下蝠鲼双目匹配的的真值数据集就更好</p><table><thead><tr><th align="center">左侧图</th><th align="center">右侧图</th><th align="center">深度图</th></tr></thead><tbody><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uqkkb4ej20zk0k0q53.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uqkkb4ej20zk0k0q53.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24ut82ysij20zk0k0t97.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24up9kgcej20zk0k0tak.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24upf2e6jj20zk0k0wgb.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uukp9oxj20zk0k0aav.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uww73g7j20zk0k0whd.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uww73g7j20zk0k0whd.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24ux180a4j20zk0k0q3s.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyh35k6j20zk0k0whf.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyeiq49j20zk0k0tbo.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24uyft7d6j20zk0k0jsd.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0hv9urj20zk0k0dip.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0hv9urj20zk0k0dip.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v0ts6ulj20zk0k0gmk.jpg"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v658pitj20zk0k0mzc.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v64j9edj20zk0k0dhv.jpg"></td><td align="center"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24v633e4hj20zk0k03z6.jpg"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 论文系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/08/hello-world/"/>
      <url>/2022/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
